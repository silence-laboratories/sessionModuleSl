{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/yogendrasankhla/Desktop/abstractsdksl/lib/biconomy.ts"],"sourcesContent":["// lib/biconomy.ts\nimport { generatePrivateKey, privateKeyToAccount } from \"viem/accounts\";\nimport { createSmartAccountClient, toNexusAccount, smartSessionCreateActions } from \"@biconomy/abstractjs\";\nimport { baseSepolia, sepolia } from \"viem/chains\";\nimport { http } from \"viem\";\nimport { generateKey } from \"crypto\";\n\n// Owner’s private key (for demo purposes, use secure storage in production)\nconst privateKey = generatePrivateKey();\nconsole.log(\"private key\",privateKey)\nconst OWNER_PRIVATE_KEY = privateKey// Replace with your private key\nconst ownerAccount = privateKeyToAccount(\"0x6b17d0ae446c070ce14b12990cc10f5fcf89d3410277abea6f00352535502393\");\n\n// Biconomy bundler URL (replace with your actual bundler endpoint)\nconst bundlerUrl = \"https://bundler.biconomy.io/api/v3/11155111/nJPK7B3ru.dd7f7861-190d-41bd-af80-6877f74b8f44\";\n\nexport async function createOwnerNexusClient() {\n  const nexusClient = createSmartAccountClient({\n    account: await toNexusAccount({\n      signer: ownerAccount,\n      chain: sepolia,\n      transport: http(),\n    }),\n    transport: http(bundlerUrl),\n  });\n  return nexusClient;\n}\n\n// Install the smart sessions module using the custom session signer (from Silence Labs).\nexport async function installSmartSessionModule(nexusClient: any, sessionSigner:any) {\n  const sessionsModule = (await import(\"@biconomy/abstractjs\")).toSmartSessionsValidator({\n    account: nexusClient.account,\n    signer: sessionSigner, // Swap in our Silence Labs signer here.\n  });\n\n  const hash = await nexusClient.installModule({ module: sessionsModule.moduleInitData });\n  await nexusClient.waitForUserOperationReceipt({ hash });\n  const nexusSessionClient = nexusClient.extend(smartSessionCreateActions(sessionsModule));\n  return { nexusSessionClient, sessionsModule };\n}\n\n// Create a client for using the session (for sending transactions).\nexport async function createSessionUsageClient() {\n  const nexusClient = await createOwnerNexusClient();\n  return nexusClient;\n}\n"],"names":[],"mappings":"AAAA,kBAAkB;;;;;;AAClB;AAAA;AACA;AAAA;AACA;AACA;AAFA;;;;;AAKA,4EAA4E;AAC5E,MAAM,aAAa,CAAA,GAAA,iKAAA,CAAA,qBAAkB,AAAD;AACpC,QAAQ,GAAG,CAAC,eAAc;AAC1B,MAAM,oBAAoB,WAAU,gCAAgC;;AACpE,MAAM,eAAe,CAAA,GAAA,kKAAA,CAAA,sBAAmB,AAAD,EAAE;AAEzC,mEAAmE;AACnE,MAAM,aAAa;AAEZ,eAAe;IACpB,MAAM,cAAc,CAAA,GAAA,iMAAA,CAAA,2BAAwB,AAAD,EAAE;QAC3C,SAAS,MAAM,CAAA,GAAA,wLAAA,CAAA,iBAAc,AAAD,EAAE;YAC5B,QAAQ;YACR,OAAO,mKAAA,CAAA,UAAO;YACd,WAAW,CAAA,GAAA,gKAAA,CAAA,OAAI,AAAD;QAChB;QACA,WAAW,CAAA,GAAA,gKAAA,CAAA,OAAI,AAAD,EAAE;IAClB;IACA,OAAO;AACT;AAGO,eAAe,0BAA0B,WAAgB,EAAE,aAAiB;IACjF,MAAM,iBAAiB,CAAC,2JAAoC,EAAE,wBAAwB,CAAC;QACrF,SAAS,YAAY,OAAO;QAC5B,QAAQ;IACV;IAEA,MAAM,OAAO,MAAM,YAAY,aAAa,CAAC;QAAE,QAAQ,eAAe,cAAc;IAAC;IACrF,MAAM,YAAY,2BAA2B,CAAC;QAAE;IAAK;IACrD,MAAM,qBAAqB,YAAY,MAAM,CAAC,CAAA,GAAA,uOAAA,CAAA,4BAAyB,AAAD,EAAE;IACxE,OAAO;QAAE;QAAoB;IAAe;AAC9C;AAGO,eAAe;IACpB,MAAM,cAAc,MAAM;IAC1B,OAAO;AACT"}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 73, "column": 0}, "map": {"version":3,"sources":["file:///Users/yogendrasankhla/Desktop/abstractsdksl/lib/browserWallet.ts"],"sourcesContent":["// lib/browserWallet.ts\nimport { TypedData, IBrowserWallet } from '@silencelaboratories/walletprovider-sdk';\nimport { secp256k1 } from '@noble/curves/secp256k1';\nimport { hashTypedData, hexToBytes, serializeSignature } from 'viem';\nimport { toHex } from 'viem/utils';\nimport { Buffer } from 'buffer';\n\nexport class BrowserWallet implements IBrowserWallet {\n  private privateKey: Uint8Array;\n\n  constructor(privateKeyHex: string) {\n    this.privateKey = Uint8Array.from(Buffer.from(privateKeyHex.replace(/^0x/, ''), 'hex'));\n  }\n\n  async signTypedData<T>(from: string, request: TypedData<T>): Promise<unknown> {\n    const castedRequest = {\n      ...request,\n      message: request.message as Record<string, unknown>,\n    };\n\n    // Create a hash of the typed data.\n    const messageHash = hashTypedData(castedRequest);\n    const messageBytes = hexToBytes(messageHash);\n\n    // Sign the hash.\n    const signature = secp256k1.sign(messageBytes, this.privateKey);\n\n    return serializeSignature({\n      r: toHex(signature.r),\n      s: toHex(signature.s),\n      v: BigInt(signature.recovery) + BigInt(27),\n    });\n  }\n}\n"],"names":[],"mappings":"AAAA,uBAAuB;;;;AAKvB;AAFA;AAAA;AADA;AACA;AACA;;;;;AAGO,MAAM;IACH,WAAuB;IAE/B,YAAY,aAAqB,CAAE;QACjC,IAAI,CAAC,UAAU,GAAG,WAAW,IAAI,CAAC,8JAAA,CAAA,SAAM,CAAC,IAAI,CAAC,cAAc,OAAO,CAAC,OAAO,KAAK;IAClF;IAEA,MAAM,cAAiB,IAAY,EAAE,OAAqB,EAAoB;QAC5E,MAAM,gBAAgB;YACpB,GAAG,OAAO;YACV,SAAS,QAAQ,OAAO;QAC1B;QAEA,mCAAmC;QACnC,MAAM,cAAc,CAAA,GAAA,sKAAA,CAAA,gBAAa,AAAD,EAAE;QAClC,MAAM,eAAe,CAAA,GAAA,+JAAA,CAAA,aAAU,AAAD,EAAE;QAEhC,iBAAiB;QACjB,MAAM,YAAY,wJAAA,CAAA,YAAS,CAAC,IAAI,CAAC,cAAc,IAAI,CAAC,UAAU;QAE9D,OAAO,CAAA,GAAA,2KAAA,CAAA,qBAAkB,AAAD,EAAE;YACxB,GAAG,CAAA,GAAA,6JAAA,CAAA,QAAK,AAAD,EAAE,UAAU,CAAC;YACpB,GAAG,CAAA,GAAA,6JAAA,CAAA,QAAK,AAAD,EAAE,UAAU,CAAC;YACpB,GAAG,OAAO,UAAU,QAAQ,IAAI,OAAO;QACzC;IACF;AACF"}},
    {"offset": {"line": 112, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 118, "column": 0}, "map": {"version":3,"sources":["file:///Users/yogendrasankhla/Desktop/abstractsdksl/lib/sl.ts"],"sourcesContent":["// lib/silenceLabs.ts\nimport { v4 as uuidv4 } from \"uuid\";\nimport { LocalAccount, privateKeyToAccount, publicKeyToAddress, toAccount } from 'viem/accounts';\nimport { secp256k1 } from '@noble/curves/secp256k1';\nimport {\n    Address,\n    hashMessage,\n    hashTypedData,\n    keccak256,\n    serializeSignature,\n    serializeTransaction,\n    Signature,\n    toHex,\n  } from 'viem';\n  import { Base64 } from 'js-base64';\n\nimport { \n  WalletProviderServiceClient,\n  EOAAuth,\n  EphKeyClaim,\n  generateEphPrivateKey,\n  getEphPublicKey,\n  NetworkSigner,\n  SignRequestBuilder,\n  computeAddress,\n  SignResponse,\n} from \"@silencelaboratories/walletprovider-sdk\";\nimport { BrowserWallet } from \"./browserWallet\";\n\n// Silence Labs cluster configuration (update if needed)\nconst clusterConfig = {\n  walletProviderId: \"WalletProvider\",\n  walletProviderUrl: \"ws://34.118.117.249\", // Replace with your endpoint\n  apiVersion: \"v1\",\n};\n\nconst THRESHOLD = 2;\nconst PARTIES_NUMBER = 3;\n\nexport async function createSilenceLabsSigner() {\n\n  const demoWalletPrivateKey = \"0x6b17d0ae446c070ce14b12990cc10f5fcf89d3410277abea6f00352535502393\"; // Replace with a demo key\n  const browserWallet = new BrowserWallet(demoWalletPrivateKey);\n  const account = privateKeyToAccount(\"0x6b17d0ae446c070ce14b12990cc10f5fcf89d3410277abea6f00352535502393\")\n\n\n  const ownerAddress =account.address; \n\n  // Generate an ephemeral key for signing.\n  const algSign = [\"secp256k1\"];\n  const ephemeralPrivateKey = generateEphPrivateKey(\"ed25519\");\n  const ephemeralPublicKey = getEphPublicKey(ephemeralPrivateKey, \"secp256k1\");\n  const ephId = uuidv4();\n\n  // Create an ephemeral key claim with a 1‑hour lifetime.\n  const ephClaim = new EphKeyClaim(ephId, ephemeralPublicKey, \"secp256k1\", 60 * 60);\n\n  // Create the EOAAuth instance using the BrowserWallet.\n  const eoaAuth = new EOAAuth(ownerAddress, browserWallet, { ephClaim });\n\n  // Create the wallet provider service client.\n  const walletProviderClient = new WalletProviderServiceClient({\n    walletProviderId: \"WalletProvider\",\n    walletProviderUrl: \"ws://34.118.117.249\",\n    apiVersion: \"v1\",\n});\n\n  // Create the NetworkSigner instance.\n  const networkSigner = new NetworkSigner(walletProviderClient, THRESHOLD, PARTIES_NUMBER, eoaAuth);\n  \n  // Perform key generation without any permission arguments.\n  const keygenResponse = await networkSigner.generateKey(algSign);\n  console.log(\"Silence Labs keygen response:\", keygenResponse);\n\n  return networkSigner;\n}\n\n// Sign a message using the Silence Labs signer.\nexport async function signMessageWithSilenceLabs(message : any) {\n  const networkSigner = await createSilenceLabsSigner();\n  const signReq = new SignRequestBuilder()\n    .setRequest(uuidv4(), message, \"rawBytes\")\n    .build();\n\n  const algSign = [\"secp256k1\"];\n  const keygenResponse = await networkSigner.generateKey(algSign);\n  const primaryKey = keygenResponse[0];\n\n  const [signatureResult] = await networkSigner.signMessage(primaryKey.keyId, \"secp256k1\", signReq);\n  return signatureResult.sign;\n}\n\nexport function createViemAccount(\n    networkSigner: NetworkSigner,\n    keyId: string,\n    publicKey: string,\n    signAlg: string = 'secp256k1',\n  ): LocalAccount {\n    const address = computeAddress(publicKey);\n    return toAccount({\n      address,\n      keyId,\n      async signMessage({ message }) {\n        const signRequest = new SignRequestBuilder().setRequest(address, hashMessage(message), 'EIP191').build();\n        const sign = (await networkSigner.signMessage(keyId, signAlg, signRequest))[0];\n        if (sign) {\n          const signature = formatViemSign(sign);\n          return serializeSignature(signature);\n        }\n        throw new Error('No signature returned from network');\n      },\n      async signTransaction(transaction, args) {\n        const serializer = args?.serializer || serializeTransaction;\n        const signableTransaction = (() => {\n          // For EIP-4844 Transactions, we want to sign the transaction payload body (tx_payload_body) without the sidecars (ie. without the network wrapper).\n          // See: https://github.com/ethereum/EIPs/blob/e00f4daa66bd56e2dbd5f1d36d09fd613811a48b/EIPS/eip-4844.md#networking\n          if (transaction.type === 'eip4844') {\n            return {\n              ...transaction,\n              sidecars: false,\n            };\n          }\n          return transaction;\n        })();\n  \n        const signRequest = new SignRequestBuilder()\n          .setRequest(address, keccak256(serializer(signableTransaction)), 'EIP191')\n          .build();\n        const sign = (await networkSigner.signMessage(keyId, signAlg, signRequest))[0];\n        if (sign) {\n          const signature = formatViemSign(sign);\n          return serializer(transaction, signature);\n        }\n        throw new Error('No signature returned from network');\n      },\n      async signTypedData(typedData) {\n        const signRequest = new SignRequestBuilder().setRequest(address, hashTypedData(typedData), 'EIP712').build();\n        const sign = (await networkSigner.signMessage(keyId, signAlg, signRequest))[0];\n        if (sign) {\n          const signature = formatViemSign(sign);\n          return serializeSignature(signature);\n        }\n        throw new Error('No signature returned from network');\n      },\n    });\n  }\n\n  function formatViemSign(signResp: SignResponse): Signature {\n    const signb64 = signResp.sign;\n    const sign = Base64.decode(signb64);\n    const r = toHex(sign.slice(0, 32));\n    const s = toHex(sign.slice(32, 64));\n    const recid = signResp.recid;\n    const signature: Signature = {\n      r,\n      s,\n      v: recid === 0 ? BigInt(27) : BigInt(28),\n      yParity: recid,\n    };\n    return signature;\n  }\n  "],"names":[],"mappings":"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"}},
    {"offset": {"line": 255, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 266, "column": 0}, "map": {"version":3,"sources":["file:///Users/yogendrasankhla/Desktop/abstractsdksl/src/app/page.tsx"],"sourcesContent":["// pages/index.tsx\n\"use client\"\nimport { useState } from \"react\";\nimport { createOwnerNexusClient, installSmartSessionModule, createSessionUsageClient } from \"../../lib/biconomy\";\nimport { createSilenceLabsSigner, signMessageWithSilenceLabs } from \"../../lib/sl\";\nimport { encodeFunctionData } from \"viem\";\nimport IncrementerABI from \"../../contracts/ABI.json\";\n\nexport default function Home() {\n  const [txHash, setTxHash] = useState(null);\n  const [signature, setSignature] = useState<string | null>(null);\n  const [loading, setLoading] = useState(false);\n\n  // Send a transaction using the integrated Biconomy + Silence Labs session.\n  const sendTransaction = async () => {\n    setLoading(true);\n    try {\n      // 1. Create the owner Nexus client.\n      const nexusClient = await createOwnerNexusClient();\n\n      // 2. Create a Silence Labs signer (using our EOAAuth setup).\n      const silenceLabsSigner = await createSilenceLabsSigner();\n\n      // 3. Install the smart sessions module with the Silence Labs signer.\n      const { nexusSessionClient, sessionsModule } = await installSmartSessionModule(nexusClient, silenceLabsSigner);\n\n      // 4. Create a dummy session key (for demo, we generate a random account).\n      const { privateKeyToAccount, generatePrivateKey } = await import(\"viem/accounts\");\n      const sessionOwner = privateKeyToAccount(`0x${generatePrivateKey().slice(2)}`);\n      const sessionPublicKey = sessionOwner.address;\n\n      const sessionRequestedInfo = [\n        {\n          sessionPublicKey,\n          actionPoliciesInfo: [\n            {\n              contractAddress: \"0xd9145CCE52D386f254917e481eB44e9943F39138\", \n              rules: [],\n              functionSelector: \"0x\", \n            },\n          ],\n        },\n      ];\n\n      // 6. Grant session permission.\n      const createSessionsResponse = await nexusSessionClient.grantPermission({\n        sessionRequestedInfo,\n      });\n      await nexusClient.waitForUserOperationReceipt({ hash: createSessionsResponse.userOpHash });\n\n      const sessionData = {\n        granter: nexusClient.account.address,\n        sessionPublicKey,\n        description: `Demo session using Silence Labs signer`,\n        moduleData: {\n          ...createSessionsResponse,\n          mode: \"USE\", // For demonstration\n        },\n      };\n\n      const smartSessionNexusClient = await createSessionUsageClient();\n      // const useSmartSessionNexusClient = smartSessionNexusClient.extend(\n      //   sessionsModule && sessionsModule.moduleInitData ? () => sessionsModule : () => ({})\n      // );\n\n      // 9. Prepare transaction data: call the \"increment\" function.\n      const txData = encodeFunctionData({\n        abi: IncrementerABI,\n        functionName: \"increment\",\n      });\n\n    //   const contractAddress = \"0xd9145CCE52D386f254917e481eB44e9943F39138\"; \n\n    //   const userOpHash = await useSmartSessionNexusClient.usePermission({\n    //     calls: [\n    //         {\n    //             to: contractAddress, // Replace with your target contract address\n    //             data: encodeFunctionData({\n    //                 abi: IncrementerABI,\n    //                 functionName: \"incrementNumber\"\n    //             })\n    //         }\n    //     ]\n    // });\n\n      // setTxHash(userOpHash);\n    } catch (error) {\n      console.error(\"Error sending transaction:\", error);\n    }\n    setLoading(false);\n  };\n\n  const signDemoMessage = async () => {\n    setLoading(true);\n    try {\n      const demoMessage = \"Hello from Silence Labs!\";\n      const sig = await signMessageWithSilenceLabs(demoMessage);\n      setSignature(sig);\n    } catch (error) {\n      console.error(\"Error signing message:\", error);\n    }\n    setLoading(false);\n  };\n\n  return (\n    <div style={{ padding: \"2rem\" }}>\n      <h1>Biconomy & Silence Labs Integration</h1>\n      <button onClick={sendTransaction} disabled={loading}>\n        {loading ? \"Processing Transaction...\" : \"Send Increment Transaction\"}\n      </button>\n      {txHash && (\n        <p>\n          Transaction submitted! UserOp hash: <code>{txHash}</code>\n        </p>\n      )}\n      <hr />\n      <button onClick={signDemoMessage} disabled={loading}>\n        {loading ? \"Signing...\" : \"Sign Demo Message\"}\n      </button>\n      {signature && (\n        <p>\n          Message Signature: <code>{signature}</code>\n        </p>\n      )}\n    </div>\n  );\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 450, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}