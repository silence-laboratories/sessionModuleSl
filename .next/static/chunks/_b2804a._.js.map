{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 12, "column": 0}, "map": {"version":3,"sources":["file:///Users/yogendrasankhla/Desktop/abstractsdksl/src/app/page.tsx"],"sourcesContent":["// app/page.tsx\n\"use client\";\nimport { useState } from 'react';\nimport {\n  createSmartAccountClient,\n  toNexusAccount,\n  smartSessionCreateActions,\n  toSmartSessionsValidator,\n  smartSessionUseActions,\n  stringify,\n  parse,\n  SmartSessionMode,\n  CreateSessionDataParams,\n} from \"@biconomy/abstractjs\";\nimport { baseSepolia } from \"viem/chains\";\nimport { http, encodeFunctionData } from \"viem\";\nimport { createViemAccount, createSignerForSign } from '../../lib/sl';\nimport abi from './../../contracts/ABI.json';\nimport { generatePrivateKey, privateKeyToAccount } from 'viem/accounts';\nimport { ethers } from 'ethers';\nimport { generateKeyPair } from 'crypto';\n\n\nexport default function SessionPage() {\n  const [mpcSigner, setMpcSigner] = useState<any>(null);\n  const [sessionData, setSessionData] = useState<string | null>(null);\n  const [loading, setLoading] = useState<string>('');\n  const [txHash, setTxHash] = useState<string>('');\n  const sessionPrivateKey = generatePrivateKey();\n  const sessionSigner = privateKeyToAccount(sessionPrivateKey);\n  // Initialize MPC Signer: generate keys (if needed) and then create the signer for signing\n  const initializeMPCSigner = async () => {\n    setLoading('Initializing MPC signer...');\n    try {\n      // Generate key pair (this will store config in localStorage)\n      // Create a NetworkSigner using EphAuth for signing operations\n      // const { networkSigner, keyId, publicKey } = await createSignerForSign();\n      // const mpcAccount = createViemAccount(networkSigner, keyId, publicKey);\n      setMpcSigner(\"mpcAccount\");\n      setLoading('');\n    } catch (error) {\n      console.error('MPC Signer Error:', error);\n      setLoading('');\n    }\n  };\n\n  // Create Biconomy Smart Session\n  const createSmartSession = async () => {\n    if (!mpcSigner) return;\n    setLoading('Creating smart session...');\n  \n    try {\n      // Initialize Nexus client with owner account\n      const ownerPrivateKey = \"0xec2387b319f9c96c5f2a3f9f5152208d09c0265d139235cab9c90511e6836fc7\"; // Replace with actual owner key\n      // const sessionPrivateKey = generatePrivateKey();\n      const ownerAccount = privateKeyToAccount(ownerPrivateKey);\n      // const sessionSigner = privateKeyToAccount(sessionPrivateKey);\n\n      const bundlerUrl = \"https://bundler.biconomy.io/api/v3/84532/nJPK7B3ru.dd7f7861-190d-41bd-af80-6877f74b8f44\";\n      const ownerAccountAddress = ownerAccount.address;\n      console.log(\"Owner Account:\", ownerAccountAddress);\n      const nexusClient = await createSmartAccountClient({\n        account: await toNexusAccount({\n          signer: ownerAccount,\n          chain: baseSepolia,\n          transport: http(),\n        }),\n        transport: http(bundlerUrl),\n      });\n      console.log(\"Nexus Client:\", nexusClient.account.address);\n\n      // Create and install sessions module\n      const sessionsModule = toSmartSessionsValidator({\n        account: nexusClient.account,\n        signer: ownerAccount\n      });\n      console.log(\"Sessions Module:\", sessionsModule.moduleInitData);\n\n      const hash = await nexusClient.installModule({\n        module: sessionsModule.moduleInitData\n      });\n      console.log(\"Module Installation Hash:\", hash);\n\n      await nexusClient.waitForUserOperationReceipt({ hash });\n\n      const nexusSessionClient = nexusClient.extend(smartSessionCreateActions(sessionsModule));\n\n      // Create session with MPC public key\n      const sessionRequestedInfo: CreateSessionDataParams[] = [\n        {\n          sessionKeyData: sessionSigner.address as `0x${string}`,\n          actionPoliciesInfo: [{\n            contractAddress: \"0x7961d826258946969fa0d80b34508094c6148bdf\" as `0x${string}`,\n            rules: [],\n            functionSelector: \"0xd09de08a\" as `0x${string}` // Function selector for 'increment'\n          }]\n        }\n      ];\n      console.log(\"sessionRequestedInfo:\", sessionRequestedInfo);\n\n      const createSessionsResponse = await nexusSessionClient.grantPermission({\n        sessionRequestedInfo\n      });\n\n      await nexusClient.waitForUserOperationReceipt({\n        hash: createSessionsResponse.userOpHash\n      });\n\n      // Store session data in localStorage for persistence\n      const sessionDataObj = {\n        granter: nexusClient.account.address,\n        sessionPublicKey: sessionSigner.address,\n        moduleData: {\n          permissionIds: createSessionsResponse.permissionIds,  // Only permissionIds\n          mode: SmartSessionMode.USE\n        }\n      };\n\n      const compressedData = stringify(sessionDataObj);\n      localStorage.setItem('mpcSessionData', compressedData);\n      setSessionData(compressedData);\n      setLoading('');\n    } catch (error) {\n      console.error('Session Creation Error:', error);\n      setLoading('');\n    }\n  };\n\n  // Execute Transaction with MPC Session\n  const executeTransaction = async () => {\n    if (!sessionData) return;\n    setLoading('Executing transaction...');\n\n    try {\n      const parsedData = parse(sessionData);\n      const bundlerUrl = \"https://bundler.biconomy.io/api/v3/84532/nJPK7B3ru.dd7f7861-190d-41bd-af80-6877f74b8f44\";\n\n      // Create MPC-powered client\n      console.log(\"Creating MPC-powered client...\");\n      const smartSessionClient = createSmartAccountClient({\n        chain: baseSepolia,\n        account: await toNexusAccount({\n          signer: sessionSigner,\n          chain: baseSepolia,\n          transport: http(),\n        }),\n        transport: http(bundlerUrl)\n      });\n\n      // Attach sessions module\n      console.log(\"Attaching sessions module...\");\n      const usePermissionsModule = toSmartSessionsValidator({\n        account: smartSessionClient.account,\n        signer: sessionSigner,\n        moduleData: parsedData.moduleData\n      });\n\n      const sessionEnabledClient = smartSessionClient.extend(\n        smartSessionUseActions(usePermissionsModule)\n      );\n\n      // Execute transaction (example: calling 'increment')\n      console.log(\"Executing transaction...\");\n      const userOpHash = await sessionEnabledClient.usePermission({\n        calls: [{\n          to: \"0x7961d826258946969fa0d80b34508094c6148bdf\",\n          data: encodeFunctionData({\n            abi: abi,\n            functionName: \"increment\"\n          })\n        }],\n        // callGasLimit: BigInt(100000),\n        // verificationGasLimit: BigInt(500000),\n        // preVerificationGas: BigInt(300000)\n\n      });\n\n      setTxHash(userOpHash);\n      setLoading('');\n    } catch (error) {\n      console.error('Execution Error:', error);\n      setLoading('');\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen p-8\">\n      <h1 className=\"text-3xl mb-8\">MPC-Powered Smart Sessions</h1>\n\n      <div className=\"space-y-4 max-w-2xl\">\n        <button\n          onClick={initializeMPCSigner}\n          className=\"btn-primary\"\n          disabled={!!mpcSigner}\n        >\n          {mpcSigner ? 'MPC Signer Ready' : 'Initialize MPC Signer'}\n        </button>\n\n        {mpcSigner && (\n          <button\n            onClick={createSmartSession}\n            className=\"btn-secondary\"\n            disabled={!!sessionData}\n          >\n            {sessionData ? 'Session Created' : 'Create Smart Session'}\n          </button>\n        )}\n\n        {sessionData && (\n          <button\n            onClick={executeTransaction}\n            className=\"btn-success\"\n          >\n            Execute Transaction\n          </button>\n        )}\n\n        {loading && <p className=\"text-blue-500\">{loading}</p>}\n        {txHash && (\n          <div className=\"mt-4 p-4 bg-gray-100 rounded\">\n            <p className=\"font-mono break-words\">Transaction Hash: {txHash}</p>\n          </div>\n        )}\n\n        <div className=\"mt-8 space-y-2\">\n          {mpcSigner && (\n            <p>MPC Signer Address: {mpcSigner.address}</p>\n          )}\n          {sessionData && (\n            <p>Session Granter: {parse(sessionData).granter}</p>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"AAAA,eAAe;;;;;AAEf;AAeA;AACA;AAAA;AAfA;AAAA;AAWA;AACA;AAZA;AAAA;AAAA;AAAA;AAYA;;;AAdA;;;;;;;AAsBe,SAAS;;IACtB,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAO;IAChD,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB;IAC9D,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAU;IAC/C,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAU;IAC7C,MAAM,oBAAoB,CAAA,GAAA,iKAAA,CAAA,qBAAkB,AAAD;IAC3C,MAAM,gBAAgB,CAAA,GAAA,kKAAA,CAAA,sBAAmB,AAAD,EAAE;IAC1C,0FAA0F;IAC1F,MAAM,sBAAsB;QAC1B,WAAW;QACX,IAAI;YACF,6DAA6D;YAC7D,8DAA8D;YAC9D,2EAA2E;YAC3E,yEAAyE;YACzE,aAAa;YACb,WAAW;QACb,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,qBAAqB;YACnC,WAAW;QACb;IACF;IAEA,gCAAgC;IAChC,MAAM,qBAAqB;QACzB,IAAI,CAAC,WAAW;QAChB,WAAW;QAEX,IAAI;YACF,6CAA6C;YAC7C,MAAM,kBAAkB,sEAAsE,gCAAgC;YAC9H,kDAAkD;YAClD,MAAM,eAAe,CAAA,GAAA,kKAAA,CAAA,sBAAmB,AAAD,EAAE;YACzC,gEAAgE;YAEhE,MAAM,aAAa;YACnB,MAAM,sBAAsB,aAAa,OAAO;YAChD,QAAQ,GAAG,CAAC,kBAAkB;YAC9B,MAAM,cAAc,MAAM,CAAA,GAAA,iMAAA,CAAA,2BAAwB,AAAD,EAAE;gBACjD,SAAS,MAAM,CAAA,GAAA,wLAAA,CAAA,iBAAc,AAAD,EAAE;oBAC5B,QAAQ;oBACR,OAAO,uKAAA,CAAA,cAAW;oBAClB,WAAW,CAAA,GAAA,gKAAA,CAAA,OAAI,AAAD;gBAChB;gBACA,WAAW,CAAA,GAAA,gKAAA,CAAA,OAAI,AAAD,EAAE;YAClB;YACA,QAAQ,GAAG,CAAC,iBAAiB,YAAY,OAAO,CAAC,OAAO;YAExD,qCAAqC;YACrC,MAAM,iBAAiB,CAAA,GAAA,4NAAA,CAAA,2BAAwB,AAAD,EAAE;gBAC9C,SAAS,YAAY,OAAO;gBAC5B,QAAQ;YACV;YACA,QAAQ,GAAG,CAAC,oBAAoB,eAAe,cAAc;YAE7D,MAAM,OAAO,MAAM,YAAY,aAAa,CAAC;gBAC3C,QAAQ,eAAe,cAAc;YACvC;YACA,QAAQ,GAAG,CAAC,6BAA6B;YAEzC,MAAM,YAAY,2BAA2B,CAAC;gBAAE;YAAK;YAErD,MAAM,qBAAqB,YAAY,MAAM,CAAC,CAAA,GAAA,uOAAA,CAAA,4BAAyB,AAAD,EAAE;YAExE,qCAAqC;YACrC,MAAM,uBAAkD;gBACtD;oBACE,gBAAgB,cAAc,OAAO;oBACrC,oBAAoB;wBAAC;4BACnB,iBAAiB;4BACjB,OAAO,EAAE;4BACT,kBAAkB;wBACpB;qBAAE;gBACJ;aACD;YACD,QAAQ,GAAG,CAAC,yBAAyB;YAErC,MAAM,yBAAyB,MAAM,mBAAmB,eAAe,CAAC;gBACtE;YACF;YAEA,MAAM,YAAY,2BAA2B,CAAC;gBAC5C,MAAM,uBAAuB,UAAU;YACzC;YAEA,qDAAqD;YACrD,MAAM,iBAAiB;gBACrB,SAAS,YAAY,OAAO,CAAC,OAAO;gBACpC,kBAAkB,cAAc,OAAO;gBACvC,YAAY;oBACV,eAAe,uBAAuB,aAAa;oBACnD,MAAM,gMAAA,CAAA,mBAAgB,CAAC,GAAG;gBAC5B;YACF;YAEA,MAAM,iBAAiB,CAAA,GAAA,2MAAA,CAAA,YAAS,AAAD,EAAE;YACjC,aAAa,OAAO,CAAC,kBAAkB;YACvC,eAAe;YACf,WAAW;QACb,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,2BAA2B;YACzC,WAAW;QACb;IACF;IAEA,uCAAuC;IACvC,MAAM,qBAAqB;QACzB,IAAI,CAAC,aAAa;QAClB,WAAW;QAEX,IAAI;YACF,MAAM,aAAa,CAAA,GAAA,2MAAA,CAAA,QAAK,AAAD,EAAE;YACzB,MAAM,aAAa;YAEnB,4BAA4B;YAC5B,QAAQ,GAAG,CAAC;YACZ,MAAM,qBAAqB,CAAA,GAAA,iMAAA,CAAA,2BAAwB,AAAD,EAAE;gBAClD,OAAO,uKAAA,CAAA,cAAW;gBAClB,SAAS,MAAM,CAAA,GAAA,wLAAA,CAAA,iBAAc,AAAD,EAAE;oBAC5B,QAAQ;oBACR,OAAO,uKAAA,CAAA,cAAW;oBAClB,WAAW,CAAA,GAAA,gKAAA,CAAA,OAAI,AAAD;gBAChB;gBACA,WAAW,CAAA,GAAA,gKAAA,CAAA,OAAI,AAAD,EAAE;YAClB;YAEA,yBAAyB;YACzB,QAAQ,GAAG,CAAC;YACZ,MAAM,uBAAuB,CAAA,GAAA,4NAAA,CAAA,2BAAwB,AAAD,EAAE;gBACpD,SAAS,mBAAmB,OAAO;gBACnC,QAAQ;gBACR,YAAY,WAAW,UAAU;YACnC;YAEA,MAAM,uBAAuB,mBAAmB,MAAM,CACpD,CAAA,GAAA,uOAAA,CAAA,yBAAsB,AAAD,EAAE;YAGzB,qDAAqD;YACrD,QAAQ,GAAG,CAAC;YACZ,MAAM,aAAa,MAAM,qBAAqB,aAAa,CAAC;gBAC1D,OAAO;oBAAC;wBACN,IAAI;wBACJ,MAAM,CAAA,GAAA,qKAAA,CAAA,qBAAkB,AAAD,EAAE;4BACvB,KAAK,wFAAA,CAAA,UAAG;4BACR,cAAc;wBAChB;oBACF;iBAAE;YAKJ;YAEA,UAAU;YACV,WAAW;QACb,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,oBAAoB;YAClC,WAAW;QACb;IACF;IAEA,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC;gBAAG,WAAU;0BAAgB;;;;;;0BAE9B,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBACC,SAAS;wBACT,WAAU;wBACV,UAAU,CAAC,CAAC;kCAEX,YAAY,qBAAqB;;;;;;oBAGnC,2BACC,6LAAC;wBACC,SAAS;wBACT,WAAU;wBACV,UAAU,CAAC,CAAC;kCAEX,cAAc,oBAAoB;;;;;;oBAItC,6BACC,6LAAC;wBACC,SAAS;wBACT,WAAU;kCACX;;;;;;oBAKF,yBAAW,6LAAC;wBAAE,WAAU;kCAAiB;;;;;;oBACzC,wBACC,6LAAC;wBAAI,WAAU;kCACb,cAAA,6LAAC;4BAAE,WAAU;;gCAAwB;gCAAmB;;;;;;;;;;;;kCAI5D,6LAAC;wBAAI,WAAU;;4BACZ,2BACC,6LAAC;;oCAAE;oCAAqB,UAAU,OAAO;;;;;;;4BAE1C,6BACC,6LAAC;;oCAAE;oCAAkB,CAAA,GAAA,2MAAA,CAAA,QAAK,AAAD,EAAE,aAAa,OAAO;;;;;;;;;;;;;;;;;;;;;;;;;AAM3D;GApNwB;KAAA"}},
    {"offset": {"line": 300, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}