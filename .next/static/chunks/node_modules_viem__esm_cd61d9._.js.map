{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"number.js","sources":["file:///Users/yogendrasankhla/Desktop/abstractsdksl/node_modules/viem/zksync/constants/number.ts"],"sourcesContent":["import { maxUint16 } from '../../constants/number.js'\n\nexport const gasPerPubdataDefault = 50000n\nexport const maxBytecodeSize = maxUint16 * 32n\nexport const requiredL1ToL2GasPerPubdataLimit = 800n\n"],"names":[],"mappings":";;;;;AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,2BAA2B,CAAA;;AAE9C,MAAM,oBAAoB,GAAG,MAAM,CAAA;AACnC,MAAM,eAAe,0JAAG,YAAS,GAAG,GAAG,CAAA;AACvC,MAAM,gCAAgC,GAAG,IAAI,CAAA","ignoreList":[0]}},
    {"offset": {"line": 17, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"file":"formatters.js","sources":["file:///Users/yogendrasankhla/Desktop/abstractsdksl/node_modules/viem/zksync/formatters.ts"],"sourcesContent":["import type { ChainFormatters } from '../types/chain.js'\nimport { hexToBigInt, hexToNumber } from '../utils/encoding/fromHex.js'\nimport { hexToBytes } from '../utils/encoding/toBytes.js'\nimport { toHex } from '../utils/encoding/toHex.js'\nimport { defineBlock } from '../utils/formatters/block.js'\nimport { formatLog } from '../utils/formatters/log.js'\nimport { defineTransaction } from '../utils/formatters/transaction.js'\nimport { defineTransactionReceipt } from '../utils/formatters/transactionReceipt.js'\nimport { defineTransactionRequest } from '../utils/formatters/transactionRequest.js'\nimport { gasPerPubdataDefault } from './constants/number.js'\nimport type { ZksyncBlock, ZksyncRpcBlock } from './types/block.js'\nimport type { ZksyncL2ToL1Log, ZksyncLog } from './types/log.js'\nimport type {\n  ZksyncRpcTransaction,\n  ZksyncRpcTransactionReceipt,\n  ZksyncRpcTransactionRequest,\n  ZksyncTransaction,\n  ZksyncTransactionReceipt,\n  ZksyncTransactionRequest,\n} from './types/transaction.js'\n\nexport const formatters = {\n  block: /*#__PURE__*/ defineBlock({\n    format(args: ZksyncRpcBlock): ZksyncBlock {\n      const transactions = args.transactions?.map((transaction) => {\n        if (typeof transaction === 'string') return transaction\n        const formatted = formatters.transaction?.format(\n          transaction as ZksyncRpcTransaction,\n        ) as ZksyncTransaction\n        if (formatted.typeHex === '0x71') formatted.type = 'eip712'\n        else if (formatted.typeHex === '0xff') formatted.type = 'priority'\n        return formatted\n      })\n      return {\n        l1BatchNumber: args.l1BatchNumber\n          ? hexToBigInt(args.l1BatchNumber)\n          : null,\n        l1BatchTimestamp: args.l1BatchTimestamp\n          ? hexToBigInt(args.l1BatchTimestamp)\n          : null,\n        transactions,\n      } as ZksyncBlock\n    },\n  }),\n  transaction: /*#__PURE__*/ defineTransaction({\n    format(args: ZksyncRpcTransaction): ZksyncTransaction {\n      const transaction = {} as ZksyncTransaction\n      if (args.type === '0x71') transaction.type = 'eip712'\n      else if (args.type === '0xff') transaction.type = 'priority'\n      return {\n        ...transaction,\n        l1BatchNumber: args.l1BatchNumber\n          ? hexToBigInt(args.l1BatchNumber)\n          : null,\n        l1BatchTxIndex: args.l1BatchTxIndex\n          ? hexToBigInt(args.l1BatchTxIndex)\n          : null,\n      } as ZksyncTransaction\n    },\n  }),\n  transactionReceipt: /*#__PURE__*/ defineTransactionReceipt({\n    format(args: ZksyncRpcTransactionReceipt): ZksyncTransactionReceipt {\n      return {\n        l1BatchNumber: args.l1BatchNumber\n          ? hexToBigInt(args.l1BatchNumber)\n          : null,\n        l1BatchTxIndex: args.l1BatchTxIndex\n          ? hexToBigInt(args.l1BatchTxIndex)\n          : null,\n        logs: args.logs.map((log) => {\n          return {\n            ...formatLog(log),\n            l1BatchNumber: log.l1BatchNumber\n              ? hexToBigInt(log.l1BatchNumber)\n              : null,\n            transactionLogIndex: hexToNumber(log.transactionLogIndex),\n            logType: log.logType,\n          }\n        }) as ZksyncLog[],\n        l2ToL1Logs: args.l2ToL1Logs.map((l2ToL1Log) => {\n          return {\n            blockNumber: hexToBigInt(l2ToL1Log.blockHash),\n            blockHash: l2ToL1Log.blockHash,\n            l1BatchNumber: l2ToL1Log.l1BatchNumber\n              ? hexToBigInt(l2ToL1Log.l1BatchNumber)\n              : null,\n            transactionIndex: hexToBigInt(l2ToL1Log.transactionIndex),\n            shardId: hexToBigInt(l2ToL1Log.shardId),\n            isService: l2ToL1Log.isService,\n            sender: l2ToL1Log.sender,\n            key: l2ToL1Log.key,\n            value: l2ToL1Log.value,\n            transactionHash: l2ToL1Log.transactionHash,\n            logIndex: hexToBigInt(l2ToL1Log.logIndex),\n          }\n        }) as ZksyncL2ToL1Log[],\n      } as ZksyncTransactionReceipt\n    },\n  }),\n  transactionRequest: /*#__PURE__*/ defineTransactionRequest({\n    exclude: [\n      'customSignature',\n      'factoryDeps',\n      'gasPerPubdata',\n      'paymaster',\n      'paymasterInput',\n    ],\n    format(args: ZksyncTransactionRequest): ZksyncRpcTransactionRequest {\n      if (\n        args.gasPerPubdata ||\n        (args.paymaster && args.paymasterInput) ||\n        args.factoryDeps ||\n        args.customSignature\n      )\n        return {\n          eip712Meta: {\n            ...(args.gasPerPubdata\n              ? { gasPerPubdata: toHex(args.gasPerPubdata) }\n              : { gasPerPubdata: toHex(gasPerPubdataDefault) }),\n            ...(args.paymaster && args.paymasterInput\n              ? {\n                  paymasterParams: {\n                    paymaster: args.paymaster,\n                    paymasterInput: Array.from(hexToBytes(args.paymasterInput)),\n                  },\n                }\n              : {}),\n            ...(args.factoryDeps\n              ? {\n                  factoryDeps: args.factoryDeps.map((dep) =>\n                    Array.from(hexToBytes(dep)),\n                  ),\n                }\n              : {}),\n            ...(args.customSignature\n              ? {\n                  customSignature: Array.from(hexToBytes(args.customSignature)),\n                }\n              : {}),\n          },\n          type: '0x71',\n        } as unknown as ZksyncRpcTransactionRequest\n      return {} as ZksyncRpcTransactionRequest\n    },\n  }),\n} as const satisfies ChainFormatters\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 139, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 145, "column": 0}, "map": {"version":3,"file":"isEip712Transaction.js","sources":["file:///Users/yogendrasankhla/Desktop/abstractsdksl/node_modules/viem/zksync/utils/isEip712Transaction.ts"],"sourcesContent":["import type { ExactPartial, OneOf } from '../../types/utils.js'\nimport type {\n  ZksyncTransactionRequest,\n  ZksyncTransactionSerializable,\n} from '../types/transaction.js'\n\nexport function isEIP712Transaction(\n  transaction: ExactPartial<\n    OneOf<ZksyncTransactionRequest | ZksyncTransactionSerializable>\n  >,\n) {\n  if (transaction.type === 'eip712') return true\n  if (\n    ('customSignature' in transaction && transaction.customSignature) ||\n    ('paymaster' in transaction && transaction.paymaster) ||\n    ('paymasterInput' in transaction && transaction.paymasterInput) ||\n    ('gasPerPubdata' in transaction &&\n      typeof transaction.gasPerPubdata === 'bigint') ||\n    ('factoryDeps' in transaction && transaction.factoryDeps)\n  )\n    return true\n  return false\n}\n"],"names":[],"mappings":";;;AAMM,SAAU,mBAAmB,CACjC,WAEC;IAED,IAAI,WAAW,CAAC,IAAI,KAAK,QAAQ,EAAE,OAAO,IAAI,CAAA;IAC9C,IACE,AAAC,iBAAiB,IAAI,WAAW,IAAI,WAAW,CAAC,eAAe,CAAC,GAChE,WAAW,IAAI,WAAW,IAAI,WAAW,CAAC,SAAS,CAAC,GACpD,gBAAgB,IAAI,WAAW,IAAI,WAAW,CAAC,cAAc,CAAC,GAC9D,eAAe,IAAI,WAAW,IAC7B,OAAO,WAAW,CAAC,aAAa,KAAK,QAAQ,CAAC,GAC/C,aAAa,IAAI,WAAW,IAAI,WAAW,CAAC,WAAW,CAAC,CAEzD,OAAO,IAAI,CAAA;IACb,OAAO,KAAK,CAAA;AACd,CAAC","ignoreList":[0]}},
    {"offset": {"line": 153, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 159, "column": 0}, "map": {"version":3,"file":"transaction.js","sources":["file:///Users/yogendrasankhla/Desktop/abstractsdksl/node_modules/viem/zksync/errors/transaction.ts"],"sourcesContent":["import { BaseError } from '../../errors/base.js'\n\nexport type InvalidEip712TransactionErrorType =\n  InvalidEip712TransactionError & {\n    name: 'InvalidEip712TransactionError'\n  }\nexport class InvalidEip712TransactionError extends BaseError {\n  constructor() {\n    super(\n      [\n        'Transaction is not an EIP712 transaction.',\n        '',\n        'Transaction must:',\n        '  - include `type: \"eip712\"`',\n        '  - include one of the following: `customSignature`, `paymaster`, `paymasterInput`, `gasPerPubdata`, `factoryDeps`',\n      ].join('\\n'),\n      { name: 'InvalidEip712TransactionError' },\n    )\n  }\n}\n"],"names":[],"mappings":";;;AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,sBAAsB,CAAA;;AAM1C,MAAO,6BAA8B,2JAAQ,YAAS;IAC1D,aAAA;QACE,KAAK,CACH;YACE,2CAA2C;YAC3C,EAAE;YACF,mBAAmB;YACnB,8BAA8B;YAC9B,oHAAoH;SACrH,CAAC,IAAI,CAAC,IAAI,CAAC,EACZ;YAAE,IAAI,EAAE,+BAA+B;QAAA,CAAE,CAC1C,CAAA;IACH,CAAC;CACF","ignoreList":[0]}},
    {"offset": {"line": 177, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 183, "column": 0}, "map": {"version":3,"file":"assertEip712Transaction.js","sources":["file:///Users/yogendrasankhla/Desktop/abstractsdksl/node_modules/viem/zksync/utils/assertEip712Transaction.ts"],"sourcesContent":["import { InvalidAddressError } from '../../errors/address.js'\nimport { BaseError } from '../../errors/base.js'\nimport { InvalidChainIdError } from '../../errors/chain.js'\nimport type { ExactPartial } from '../../types/utils.js'\nimport { isAddress } from '../../utils/address/isAddress.js'\nimport { InvalidEip712TransactionError } from '../errors/transaction.js'\nimport type {\n  ZksyncTransactionSerializable,\n  ZksyncTransactionSerializableEIP712,\n} from '../types/transaction.js'\nimport { isEIP712Transaction } from './isEip712Transaction.js'\n\nexport function assertEip712Transaction(\n  transaction: ExactPartial<ZksyncTransactionSerializable>,\n) {\n  const { chainId, to, from, paymaster, paymasterInput } =\n    transaction as ZksyncTransactionSerializableEIP712\n\n  if (!isEIP712Transaction(transaction))\n    throw new InvalidEip712TransactionError()\n  if (!chainId || chainId <= 0) throw new InvalidChainIdError({ chainId })\n  if (to && !isAddress(to)) throw new InvalidAddressError({ address: to })\n  if (from && !isAddress(from)) throw new InvalidAddressError({ address: from })\n  if (paymaster && !isAddress(paymaster))\n    throw new InvalidAddressError({ address: paymaster })\n  if (paymaster && !paymasterInput) {\n    throw new BaseError(\n      '`paymasterInput` must be provided when `paymaster` is defined',\n    )\n  }\n  if (!paymaster && paymasterInput) {\n    throw new BaseError(\n      '`paymaster` must be provided when `paymasterInput` is defined',\n    )\n  }\n}\n"],"names":[],"mappings":";;;AAUA,OAAO,EAAE,mBAAmB,EAAE,MAAM,0BAA0B,CAAA;AAL9D,OAAO,EAAE,6BAA6B,EAAE,MAAM,0BAA0B,CAAA;AAHxE,OAAO,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAA;AAE3D,OAAO,EAAE,SAAS,EAAE,MAAM,kCAAkC,CAAA;AAJ5D,OAAO,EAAE,mBAAmB,EAAE,MAAM,yBAAyB,CAAA;AAC7D,OAAO,EAAE,SAAS,EAAE,MAAM,sBAAsB,CAAA;;;;;;;AAW1C,SAAU,uBAAuB,CACrC,WAAwD;IAExD,MAAM,EAAE,OAAO,EAAE,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,cAAc,EAAE,GACpD,WAAkD,CAAA;IAEpD,IAAI,+KAAC,sBAAA,AAAmB,EAAC,WAAW,CAAC,EACnC,MAAM,uKAAI,gCAA6B,EAAE,CAAA;IAC3C,IAAI,CAAC,OAAO,IAAI,OAAO,IAAI,CAAC,EAAE,MAAM,uJAAI,sBAAmB,CAAC;QAAE,OAAO;IAAA,CAAE,CAAC,CAAA;IACxE,IAAI,EAAE,IAAI,EAAC,gLAAA,AAAS,EAAC,EAAE,CAAC,EAAE,MAAM,yJAAI,sBAAmB,CAAC;QAAE,OAAO,EAAE,EAAE;IAAA,CAAE,CAAC,CAAA;IACxE,IAAI,IAAI,IAAI,EAAC,gLAAA,AAAS,EAAC,IAAI,CAAC,EAAE,MAAM,yJAAI,sBAAmB,CAAC;QAAE,OAAO,EAAE,IAAI;IAAA,CAAE,CAAC,CAAA;IAC9E,IAAI,SAAS,IAAI,sKAAC,YAAA,AAAS,EAAC,SAAS,CAAC,EACpC,MAAM,yJAAI,sBAAmB,CAAC;QAAE,OAAO,EAAE,SAAS;IAAA,CAAE,CAAC,CAAA;IACvD,IAAI,SAAS,IAAI,CAAC,cAAc,EAAE,CAAC;QACjC,MAAM,sJAAI,YAAS,CACjB,+DAA+D,CAChE,CAAA;IACH,CAAC;IACD,IAAI,CAAC,SAAS,IAAI,cAAc,EAAE,CAAC;QACjC,MAAM,sJAAI,YAAS,CACjB,+DAA+D,CAChE,CAAA;IACH,CAAC;AACH,CAAC","ignoreList":[0]}},
    {"offset": {"line": 220, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 226, "column": 0}, "map": {"version":3,"file":"serializers.js","sources":["file:///Users/yogendrasankhla/Desktop/abstractsdksl/node_modules/viem/zksync/serializers.ts"],"sourcesContent":["import type { Signature } from '../index.js'\nimport type { ChainSerializers } from '../types/chain.js'\nimport type { TransactionSerializable } from '../types/transaction.js'\nimport { concatHex } from '../utils/data/concat.js'\nimport { toHex } from '../utils/encoding/toHex.js'\nimport { toRlp } from '../utils/encoding/toRlp.js'\nimport { serializeTransaction as serializeTransaction_ } from '../utils/transaction/serializeTransaction.js'\nimport { gasPerPubdataDefault } from './constants/number.js'\nimport type {\n  ZksyncTransactionSerializable,\n  ZksyncTransactionSerializableEIP712,\n  ZksyncTransactionSerializedEIP712,\n} from './types/transaction.js'\nimport { assertEip712Transaction } from './utils/assertEip712Transaction.js'\nimport { isEIP712Transaction } from './utils/isEip712Transaction.js'\n\nexport function serializeTransaction(\n  transaction: ZksyncTransactionSerializable,\n  signature?: Signature | undefined,\n) {\n  if (isEIP712Transaction(transaction))\n    return serializeTransactionEIP712(\n      transaction as ZksyncTransactionSerializableEIP712,\n    )\n  return serializeTransaction_(\n    transaction as TransactionSerializable,\n    signature,\n  )\n}\n\nexport const serializers = {\n  transaction: serializeTransaction,\n} as const satisfies ChainSerializers\n\ntype SerializeTransactionEIP712ReturnType = ZksyncTransactionSerializedEIP712\n\nfunction serializeTransactionEIP712(\n  transaction: ZksyncTransactionSerializableEIP712,\n): SerializeTransactionEIP712ReturnType {\n  const {\n    chainId,\n    gas,\n    nonce,\n    to,\n    from,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    customSignature,\n    factoryDeps,\n    paymaster,\n    paymasterInput,\n    gasPerPubdata,\n    data,\n  } = transaction\n\n  assertEip712Transaction(transaction)\n\n  const serializedTransaction = [\n    nonce ? toHex(nonce) : '0x',\n    maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : '0x',\n    maxFeePerGas ? toHex(maxFeePerGas) : '0x',\n    gas ? toHex(gas) : '0x',\n    to ?? '0x',\n    value ? toHex(value) : '0x',\n    data ?? '0x0',\n    toHex(chainId),\n    toHex(''),\n    toHex(''),\n    toHex(chainId),\n    from ?? '0x',\n    gasPerPubdata ? toHex(gasPerPubdata) : toHex(gasPerPubdataDefault),\n    factoryDeps ?? [],\n    customSignature ?? '0x', // EIP712 signature\n    paymaster && paymasterInput ? [paymaster, paymasterInput] : [],\n  ]\n\n  return concatHex([\n    '0x71',\n    toRlp(serializedTransaction),\n  ]) as SerializeTransactionEIP712ReturnType\n}\n"],"names":[],"mappings":";;;;AAcA,OAAO,EAAE,mBAAmB,EAAE,MAAM,gCAAgC,CAAA;AARpE,OAAO,EAAE,oBAAoB,IAAI,qBAAqB,EAAE,MAAM,8CAA8C,CAAA;AAO5G,OAAO,EAAE,uBAAuB,EAAE,MAAM,oCAAoC,CAAA;AAT5E,OAAO,EAAE,KAAK,EAAE,MAAM,4BAA4B,CAAA;AAGlD,OAAO,EAAE,oBAAoB,EAAE,MAAM,uBAAuB,CAAA;AAJ5D,OAAO,EAAE,SAAS,EAAE,MAAM,yBAAyB,CAAA;AAEnD,OAAO,EAAE,KAAK,EAAE,MAAM,4BAA4B,CAAA;;;;;;;;AAW5C,SAAU,oBAAoB,CAClC,WAA0C,EAC1C,SAAiC;IAEjC,kLAAI,sBAAA,AAAmB,EAAC,WAAW,CAAC,EAClC,OAAO,0BAA0B,CAC/B,WAAkD,CACnD,CAAA;IACH,OAAO,2MAAA,AAAqB,EAC1B,WAAsC,EACtC,SAAS,CACV,CAAA;AACH,CAAC;AAEM,MAAM,WAAW,GAAG;IACzB,WAAW,EAAE,oBAAoB;CACE,CAAA;AAIrC,SAAS,0BAA0B,CACjC,WAAgD;IAEhD,MAAM,EACJ,OAAO,EACP,GAAG,EACH,KAAK,EACL,EAAE,EACF,IAAI,EACJ,KAAK,EACL,YAAY,EACZ,oBAAoB,EACpB,eAAe,EACf,WAAW,EACX,SAAS,EACT,cAAc,EACd,aAAa,EACb,IAAI,EACL,GAAG,WAAW,CAAA;sLAEf,0BAAA,AAAuB,EAAC,WAAW,CAAC,CAAA;IAEpC,MAAM,qBAAqB,GAAG;QAC5B,KAAK,CAAC,CAAC,mKAAC,QAAA,AAAK,EAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI;QAC3B,oBAAoB,CAAC,CAAC,CAAC,0KAAA,AAAK,EAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,IAAI;QACzD,YAAY,CAAC,CAAC,mKAAC,QAAA,AAAK,EAAC,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI;QACzC,GAAG,CAAC,CAAC,mKAAC,QAAA,AAAK,EAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI;QACvB,EAAE,IAAI,IAAI;QACV,KAAK,CAAC,CAAC,mKAAC,QAAA,AAAK,EAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI;QAC3B,IAAI,IAAI,KAAK;0KACb,QAAA,AAAK,EAAC,OAAO,CAAC;0KACd,QAAA,AAAK,EAAC,EAAE,CAAC;QACT,0KAAA,AAAK,EAAC,EAAE,CAAC;0KACT,QAAA,AAAK,EAAC,OAAO,CAAC;QACd,IAAI,IAAI,IAAI;QACZ,aAAa,CAAC,CAAC,mKAAC,QAAA,AAAK,EAAC,aAAa,CAAC,CAAC,CAAC,CAAC,0KAAA,AAAK,mKAAC,uBAAoB,CAAC;QAClE,WAAW,IAAI,EAAE;QACjB,eAAe,IAAI,IAAI,EAAE,mBAAmB;QAC5C,SAAS,IAAI,cAAc,CAAC,CAAC,CAAC;YAAC,SAAS;YAAE,cAAc;SAAC,CAAC,CAAC,CAAC,EAAE;KAC/D,CAAA;IAED,sKAAO,YAAA,AAAS,EAAC;QACf,MAAM;0KACN,QAAA,AAAK,EAAC,qBAAqB,CAAC;KAC7B,CAAyC,CAAA;AAC5C,CAAC","ignoreList":[0]}},
    {"offset": {"line": 280, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 286, "column": 0}, "map": {"version":3,"file":"bytecode.js","sources":["file:///Users/yogendrasankhla/Desktop/abstractsdksl/node_modules/viem/zksync/errors/bytecode.ts"],"sourcesContent":["import { BaseError } from '../../errors/base.js'\n\nexport type BytecodeLengthExceedsMaxSizeErrorType =\n  BytecodeLengthExceedsMaxSizeError & {\n    name: 'BytecodeLengthExceedsMaxSizeError'\n  }\n\nexport class BytecodeLengthExceedsMaxSizeError extends BaseError {\n  constructor({\n    givenLength,\n    maxBytecodeSize,\n  }: { givenLength: number; maxBytecodeSize: bigint }) {\n    super(\n      `Bytecode cannot be longer than ${maxBytecodeSize} bytes. Given length: ${givenLength}`,\n      { name: 'BytecodeLengthExceedsMaxSizeError' },\n    )\n  }\n}\n\nexport type BytecodeLengthInWordsMustBeOddErrorType =\n  BytecodeLengthInWordsMustBeOddError & {\n    name: 'BytecodeLengthInWordsMustBeOddError'\n  }\n\nexport class BytecodeLengthInWordsMustBeOddError extends BaseError {\n  constructor({ givenLengthInWords }: { givenLengthInWords: number }) {\n    super(\n      `Bytecode length in 32-byte words must be odd. Given length in words: ${givenLengthInWords}`,\n      { name: 'BytecodeLengthInWordsMustBeOddError' },\n    )\n  }\n}\n\nexport type BytecodeLengthMustBeDivisibleBy32ErrorType =\n  BytecodeLengthMustBeDivisibleBy32Error & {\n    name: 'BytecodeLengthMustBeDivisibleBy32Error'\n  }\n\nexport class BytecodeLengthMustBeDivisibleBy32Error extends BaseError {\n  constructor({ givenLength }: { givenLength: number }) {\n    super(\n      `The bytecode length in bytes must be divisible by 32. Given length: ${givenLength}`,\n      { name: 'BytecodeLengthMustBeDivisibleBy32Error' },\n    )\n  }\n}\n"],"names":[],"mappings":";;;;;AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,sBAAsB,CAAA;;AAO1C,MAAO,iCAAkC,2JAAQ,YAAS;IAC9D,YAAY,EACV,WAAW,EACX,eAAe,EACkC,CAAA;QACjD,KAAK,CACH,CAAA,+BAAA,EAAkC,eAAe,CAAA,sBAAA,EAAyB,WAAW,EAAE,EACvF;YAAE,IAAI,EAAE,mCAAmC;QAAA,CAAE,CAC9C,CAAA;IACH,CAAC;CACF;AAOK,MAAO,mCAAoC,2JAAQ,YAAS;IAChE,YAAY,EAAE,kBAAkB,EAAkC,CAAA;QAChE,KAAK,CACH,CAAA,qEAAA,EAAwE,kBAAkB,EAAE,EAC5F;YAAE,IAAI,EAAE,qCAAqC;QAAA,CAAE,CAChD,CAAA;IACH,CAAC;CACF;AAOK,MAAO,sCAAuC,2JAAQ,YAAS;IACnE,YAAY,EAAE,WAAW,EAA2B,CAAA;QAClD,KAAK,CACH,CAAA,oEAAA,EAAuE,WAAW,EAAE,EACpF;YAAE,IAAI,EAAE,wCAAwC;QAAA,CAAE,CACnD,CAAA;IACH,CAAC;CACF","ignoreList":[0]}},
    {"offset": {"line": 314, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 320, "column": 0}, "map": {"version":3,"file":"hashBytecode.js","sources":["file:///Users/yogendrasankhla/Desktop/abstractsdksl/node_modules/viem/zksync/utils/hashBytecode.ts"],"sourcesContent":["import type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../types/misc.js'\nimport { pad } from '../../utils/data/pad.js'\nimport { type ToBytesErrorType, toBytes } from '../../utils/encoding/toBytes.js'\nimport { type Sha256ErrorType, sha256 } from '../../utils/hash/sha256.js'\nimport { maxBytecodeSize } from '../constants/number.js'\nimport {\n  BytecodeLengthExceedsMaxSizeError,\n  type BytecodeLengthExceedsMaxSizeErrorType,\n  BytecodeLengthInWordsMustBeOddError,\n  type BytecodeLengthInWordsMustBeOddErrorType,\n  BytecodeLengthMustBeDivisibleBy32Error,\n  type BytecodeLengthMustBeDivisibleBy32ErrorType,\n} from '../errors/bytecode.js'\n\nexport type HashBytecodeErrorType =\n  | BytecodeLengthExceedsMaxSizeErrorType\n  | BytecodeLengthInWordsMustBeOddErrorType\n  | BytecodeLengthMustBeDivisibleBy32ErrorType\n  | Sha256ErrorType\n  | ToBytesErrorType\n  | ErrorType\n\nexport function hashBytecode(bytecode: Hex): Uint8Array {\n  const bytecodeBytes = toBytes(bytecode)\n  if (bytecodeBytes.length % 32 !== 0)\n    throw new BytecodeLengthMustBeDivisibleBy32Error({\n      givenLength: bytecodeBytes.length,\n    })\n\n  if (bytecodeBytes.length > maxBytecodeSize)\n    throw new BytecodeLengthExceedsMaxSizeError({\n      givenLength: bytecodeBytes.length,\n      maxBytecodeSize,\n    })\n\n  const hashStr = sha256(bytecodeBytes)\n  const hash = toBytes(hashStr)\n\n  // Note that the length of the bytecode\n  // should be provided in 32-byte words.\n  const bytecodeLengthInWords = bytecodeBytes.length / 32\n  if (bytecodeLengthInWords % 2 === 0) {\n    throw new BytecodeLengthInWordsMustBeOddError({\n      givenLengthInWords: bytecodeLengthInWords,\n    })\n  }\n\n  const bytecodeLength = toBytes(bytecodeLengthInWords)\n\n  // The bytecode should always take the first 2 bytes of the bytecode hash,\n  // so we pad it from the left in case the length is smaller than 2 bytes.\n  const bytecodeLengthPadded = pad(bytecodeLength, { size: 2 })\n\n  const codeHashVersion = new Uint8Array([1, 0])\n  hash.set(codeHashVersion, 0)\n  hash.set(bytecodeLengthPadded, 2)\n\n  return hash\n}\n"],"names":[],"mappings":";;;AAGA,OAAO,EAAyB,OAAO,EAAE,MAAM,iCAAiC,CAAA;AAGhF,OAAO,EACL,iCAAiC,EAEjC,mCAAmC,EAEnC,sCAAsC,GAEvC,MAAM,uBAAuB,CAAA;AAR9B,OAAO,EAAE,eAAe,EAAE,MAAM,wBAAwB,CAAA;AADxD,OAAO,EAAwB,MAAM,EAAE,MAAM,4BAA4B,CAAA;AAFzE,OAAO,EAAE,GAAG,EAAE,MAAM,yBAAyB,CAAA;;;;;;AAqBvC,SAAU,YAAY,CAAC,QAAa;IACxC,MAAM,aAAa,uKAAG,UAAA,AAAO,EAAC,QAAQ,CAAC,CAAA;IACvC,IAAI,aAAa,CAAC,MAAM,GAAG,EAAE,KAAK,CAAC,EACjC,MAAM,oKAAI,yCAAsC,CAAC;QAC/C,WAAW,EAAE,aAAa,CAAC,MAAM;KAClC,CAAC,CAAA;IAEJ,IAAI,aAAa,CAAC,MAAM,oKAAG,kBAAe,EACxC,MAAM,IAAI,oMAAiC,CAAC;QAC1C,WAAW,EAAE,aAAa,CAAC,MAAM;0LACjC,kBAAe;KAChB,CAAC,CAAA;IAEJ,MAAM,OAAO,GAAG,wKAAA,AAAM,EAAC,aAAa,CAAC,CAAA;IACrC,MAAM,IAAI,uKAAG,UAAA,AAAO,EAAC,OAAO,CAAC,CAAA;IAE7B,uCAAuC;IACvC,uCAAuC;IACvC,MAAM,qBAAqB,GAAG,aAAa,CAAC,MAAM,GAAG,EAAE,CAAA;IACvD,IAAI,qBAAqB,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC;QACpC,MAAM,oKAAI,sCAAmC,CAAC;YAC5C,kBAAkB,EAAE,qBAAqB;SAC1C,CAAC,CAAA;IACJ,CAAC;IAED,MAAM,cAAc,uKAAG,UAAA,AAAO,EAAC,qBAAqB,CAAC,CAAA;IAErD,0EAA0E;IAC1E,yEAAyE;IACzE,MAAM,oBAAoB,IAAG,iKAAA,AAAG,EAAC,cAAc,EAAE;QAAE,IAAI,EAAE,CAAC;IAAA,CAAE,CAAC,CAAA;IAE7D,MAAM,eAAe,GAAG,IAAI,UAAU,CAAC;QAAC,CAAC;QAAE,CAAC;KAAC,CAAC,CAAA;IAC9C,IAAI,CAAC,GAAG,CAAC,eAAe,EAAE,CAAC,CAAC,CAAA;IAC5B,IAAI,CAAC,GAAG,CAAC,oBAAoB,EAAE,CAAC,CAAC,CAAA;IAEjC,OAAO,IAAI,CAAA;AACb,CAAC","ignoreList":[0]}},
    {"offset": {"line": 366, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 372, "column": 0}, "map": {"version":3,"file":"getEip712Domain.js","sources":["file:///Users/yogendrasankhla/Desktop/abstractsdksl/node_modules/viem/zksync/utils/getEip712Domain.ts"],"sourcesContent":["import { toHex } from '../../utils/encoding/toHex.js'\nimport { gasPerPubdataDefault } from '../constants/number.js'\nimport type { EIP712DomainFn } from '../types/eip712.js'\nimport type {\n  ZksyncEIP712TransactionSignable,\n  ZksyncTransactionSerializable,\n  ZksyncTransactionSerializableEIP712,\n} from '../types/transaction.js'\nimport { assertEip712Transaction } from './assertEip712Transaction.js'\nimport { hashBytecode } from './hashBytecode.js'\n\nexport const getEip712Domain: EIP712DomainFn<\n  ZksyncTransactionSerializable,\n  ZksyncEIP712TransactionSignable\n> = (transaction) => {\n  assertEip712Transaction(transaction)\n\n  const message = transactionToMessage(\n    transaction as ZksyncTransactionSerializableEIP712,\n  )\n\n  return {\n    domain: {\n      name: 'zkSync',\n      version: '2',\n      chainId: transaction.chainId,\n    },\n    types: {\n      Transaction: [\n        { name: 'txType', type: 'uint256' },\n        { name: 'from', type: 'uint256' },\n        { name: 'to', type: 'uint256' },\n        { name: 'gasLimit', type: 'uint256' },\n        { name: 'gasPerPubdataByteLimit', type: 'uint256' },\n        { name: 'maxFeePerGas', type: 'uint256' },\n        { name: 'maxPriorityFeePerGas', type: 'uint256' },\n        { name: 'paymaster', type: 'uint256' },\n        { name: 'nonce', type: 'uint256' },\n        { name: 'value', type: 'uint256' },\n        { name: 'data', type: 'bytes' },\n        { name: 'factoryDeps', type: 'bytes32[]' },\n        { name: 'paymasterInput', type: 'bytes' },\n      ],\n    },\n    primaryType: 'Transaction',\n    message: message,\n  }\n}\n\n//////////////////////////////////////////////////////////////////////////////\n// Utilities\n\nfunction transactionToMessage(\n  transaction: ZksyncTransactionSerializableEIP712,\n): ZksyncEIP712TransactionSignable {\n  const {\n    gas,\n    nonce,\n    to,\n    from,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    factoryDeps,\n    paymaster,\n    paymasterInput,\n    gasPerPubdata,\n    data,\n  } = transaction\n\n  return {\n    txType: 113n,\n    from: BigInt(from),\n    to: to ? BigInt(to) : 0n,\n    gasLimit: gas ?? 0n,\n    gasPerPubdataByteLimit: gasPerPubdata ?? gasPerPubdataDefault,\n    maxFeePerGas: maxFeePerGas ?? 0n,\n    maxPriorityFeePerGas: maxPriorityFeePerGas ?? 0n,\n    paymaster: paymaster ? BigInt(paymaster) : 0n,\n    nonce: nonce ? BigInt(nonce) : 0n,\n    value: value ?? 0n,\n    data: data ? data : '0x0',\n    factoryDeps: factoryDeps?.map((dep) => toHex(hashBytecode(dep))) ?? [],\n    paymasterInput: paymasterInput ? paymasterInput : '0x',\n  }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 472, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 478, "column": 0}, "map": {"version":3,"file":"chainConfig.js","sources":["file:///Users/yogendrasankhla/Desktop/abstractsdksl/node_modules/viem/zksync/chainConfig.ts"],"sourcesContent":["import { formatters } from './formatters.js'\nimport { serializers } from './serializers.js'\nimport { getEip712Domain } from './utils/getEip712Domain.js'\n\nexport const chainConfig = {\n  formatters,\n  serializers,\n  custom: {\n    getEip712Domain,\n  },\n} as const\n"],"names":[],"mappings":";;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAA;AAC5C,OAAO,EAAE,WAAW,EAAE,MAAM,kBAAkB,CAAA;AAC9C,OAAO,EAAE,eAAe,EAAE,MAAM,4BAA4B,CAAA;;;;AAErD,MAAM,WAAW,GAAG;wKACzB,aAAU;0KACV,cAAW;IACX,MAAM,EAAE;+LACN,kBAAe;KAChB;CACO,CAAA","ignoreList":[0]}},
    {"offset": {"line": 494, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 500, "column": 0}, "map": {"version":3,"file":"contracts.js","sources":["file:///Users/yogendrasankhla/Desktop/abstractsdksl/node_modules/viem/op-stack/contracts.ts"],"sourcesContent":["import type { Chain } from '../types/chain.js'\n\n/**\n * Predeploy contracts for OP Stack.\n * @see https://github.com/ethereum-optimism/optimism/blob/develop/specs/predeploys.md\n */\nexport const contracts = {\n  gasPriceOracle: { address: '0x420000000000000000000000000000000000000F' },\n  l1Block: { address: '0x4200000000000000000000000000000000000015' },\n  l2CrossDomainMessenger: {\n    address: '0x4200000000000000000000000000000000000007',\n  },\n  l2Erc721Bridge: { address: '0x4200000000000000000000000000000000000014' },\n  l2StandardBridge: { address: '0x4200000000000000000000000000000000000010' },\n  l2ToL1MessagePasser: {\n    address: '0x4200000000000000000000000000000000000016',\n  },\n} as const satisfies Chain['contracts']\n"],"names":[],"mappings":"AAEA;;;GAGG;;;AACI,MAAM,SAAS,GAAG;IACvB,cAAc,EAAE;QAAE,OAAO,EAAE,4CAA4C;IAAA,CAAE;IACzE,OAAO,EAAE;QAAE,OAAO,EAAE,4CAA4C;IAAA,CAAE;IAClE,sBAAsB,EAAE;QACtB,OAAO,EAAE,4CAA4C;KACtD;IACD,cAAc,EAAE;QAAE,OAAO,EAAE,4CAA4C;IAAA,CAAE;IACzE,gBAAgB,EAAE;QAAE,OAAO,EAAE,4CAA4C;IAAA,CAAE;IAC3E,mBAAmB,EAAE;QACnB,OAAO,EAAE,4CAA4C;KACtD;CACoC,CAAA","ignoreList":[0]}},
    {"offset": {"line": 526, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 532, "column": 0}, "map": {"version":3,"file":"formatters.js","sources":["file:///Users/yogendrasankhla/Desktop/abstractsdksl/node_modules/viem/op-stack/formatters.ts"],"sourcesContent":["import type { ChainFormatters } from '../types/chain.js'\nimport type { RpcTransaction } from '../types/rpc.js'\nimport { hexToBigInt } from '../utils/encoding/fromHex.js'\nimport { defineBlock } from '../utils/formatters/block.js'\nimport {\n  defineTransaction,\n  formatTransaction,\n} from '../utils/formatters/transaction.js'\nimport { defineTransactionReceipt } from '../utils/formatters/transactionReceipt.js'\nimport type { OpStackBlock, OpStackRpcBlock } from './types/block.js'\nimport type {\n  OpStackRpcTransaction,\n  OpStackRpcTransactionReceipt,\n  OpStackTransaction,\n  OpStackTransactionReceipt,\n} from './types/transaction.js'\n\nexport const formatters = {\n  block: /*#__PURE__*/ defineBlock({\n    format(args: OpStackRpcBlock): OpStackBlock {\n      const transactions = args.transactions?.map((transaction) => {\n        if (typeof transaction === 'string') return transaction\n        const formatted = formatTransaction(\n          transaction as RpcTransaction,\n        ) as OpStackTransaction\n        if (formatted.typeHex === '0x7e') {\n          formatted.isSystemTx = transaction.isSystemTx\n          formatted.mint = transaction.mint\n            ? hexToBigInt(transaction.mint)\n            : undefined\n          formatted.sourceHash = transaction.sourceHash\n          formatted.type = 'deposit'\n        }\n        return formatted\n      })\n      return {\n        transactions,\n        stateRoot: args.stateRoot,\n      } as OpStackBlock\n    },\n  }),\n  transaction: /*#__PURE__*/ defineTransaction({\n    format(args: OpStackRpcTransaction): OpStackTransaction {\n      const transaction = {} as OpStackTransaction\n      if (args.type === '0x7e') {\n        transaction.isSystemTx = args.isSystemTx\n        transaction.mint = args.mint ? hexToBigInt(args.mint) : undefined\n        transaction.sourceHash = args.sourceHash\n        transaction.type = 'deposit'\n      }\n      return transaction\n    },\n  }),\n  transactionReceipt: /*#__PURE__*/ defineTransactionReceipt({\n    format(args: OpStackRpcTransactionReceipt): OpStackTransactionReceipt {\n      return {\n        l1GasPrice: args.l1GasPrice ? hexToBigInt(args.l1GasPrice) : null,\n        l1GasUsed: args.l1GasUsed ? hexToBigInt(args.l1GasUsed) : null,\n        l1Fee: args.l1Fee ? hexToBigInt(args.l1Fee) : null,\n        l1FeeScalar: args.l1FeeScalar ? Number(args.l1FeeScalar) : null,\n      } as OpStackTransactionReceipt\n    },\n  }),\n} as const satisfies ChainFormatters\n"],"names":[],"mappings":";;;AAGA,OAAO,EAAE,WAAW,EAAE,MAAM,8BAA8B,CAAA;AAC1D,OAAO,EACL,iBAAiB,EACjB,iBAAiB,GAClB,MAAM,oCAAoC,CAAA;AAL3C,OAAO,EAAE,WAAW,EAAE,MAAM,8BAA8B,CAAA;AAM1D,OAAO,EAAE,wBAAwB,EAAE,MAAM,2CAA2C,CAAA;;;;;AAS7E,MAAM,UAAU,GAAG;IACxB,KAAK,EAAE,WAAA,EAAa,qKAAC,cAAA,AAAW,EAAC;QAC/B,MAAM,EAAC,IAAqB;YAC1B,MAAM,YAAY,GAAG,IAAI,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC,WAAW,EAAE,EAAE;gBAC1D,IAAI,OAAO,WAAW,KAAK,QAAQ,EAAE,OAAO,WAAW,CAAA;gBACvD,MAAM,SAAS,6KAAG,oBAAA,AAAiB,EACjC,WAA6B,CACR,CAAA;gBACvB,IAAI,SAAS,CAAC,OAAO,KAAK,MAAM,EAAE,CAAC;oBACjC,SAAS,CAAC,UAAU,GAAG,WAAW,CAAC,UAAU,CAAA;oBAC7C,SAAS,CAAC,IAAI,GAAG,WAAW,CAAC,IAAI,uKAC7B,cAAW,AAAX,EAAY,WAAW,CAAC,IAAI,CAAC,GAC7B,SAAS,CAAA;oBACb,SAAS,CAAC,UAAU,GAAG,WAAW,CAAC,UAAU,CAAA;oBAC7C,SAAS,CAAC,IAAI,GAAG,SAAS,CAAA;gBAC5B,CAAC;gBACD,OAAO,SAAS,CAAA;YAClB,CAAC,CAAC,CAAA;YACF,OAAO;gBACL,YAAY;gBACZ,SAAS,EAAE,IAAI,CAAC,SAAS;aACV,CAAA;QACnB,CAAC;KACF,CAAC;IACF,WAAW,EAAE,WAAA,EAAa,2KAAC,oBAAA,AAAiB,EAAC;QAC3C,MAAM,EAAC,IAA2B;YAChC,MAAM,WAAW,GAAG,CAAA,CAAwB,CAAA;YAC5C,IAAI,IAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC;gBACzB,WAAW,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAA;gBACxC,WAAW,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,qKAAC,cAAA,AAAW,EAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,CAAA;gBACjE,WAAW,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAA;gBACxC,WAAW,CAAC,IAAI,GAAG,SAAS,CAAA;YAC9B,CAAC;YACD,OAAO,WAAW,CAAA;QACpB,CAAC;KACF,CAAC;IACF,kBAAkB,EAAE,WAAA,EAAa,kLAAC,2BAAA,AAAwB,EAAC;QACzD,MAAM,EAAC,IAAkC;YACvC,OAAO;gBACL,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,qKAAC,cAAA,AAAW,EAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI;gBACjE,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,qKAAC,cAAA,AAAW,EAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI;gBAC9D,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,qKAAC,cAAA,AAAW,EAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI;gBAClD,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI;aACnC,CAAA;QAChC,CAAC;KACF,CAAC;CACgC,CAAA","ignoreList":[0]}},
    {"offset": {"line": 586, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 592, "column": 0}, "map": {"version":3,"file":"serializers.js","sources":["file:///Users/yogendrasankhla/Desktop/abstractsdksl/node_modules/viem/op-stack/serializers.ts"],"sourcesContent":["import { InvalidAddressError } from '../errors/address.js'\nimport type { ErrorType } from '../errors/utils.js'\nimport type { ChainSerializers } from '../types/chain.js'\nimport type { Hex, Signature } from '../types/misc.js'\nimport type { TransactionSerializable } from '../types/transaction.js'\nimport type { RequiredBy } from '../types/utils.js'\nimport { isAddress } from '../utils/address/isAddress.js'\nimport { concatHex } from '../utils/data/concat.js'\nimport { toHex } from '../utils/encoding/toHex.js'\nimport { toRlp } from '../utils/encoding/toRlp.js'\nimport {\n  type SerializeTransactionErrorType as SerializeTransactionErrorType_,\n  serializeTransaction as serializeTransaction_,\n} from '../utils/transaction/serializeTransaction.js'\nimport type {\n  OpStackTransactionSerializable,\n  TransactionSerializableDeposit,\n  TransactionSerializedDeposit,\n} from './types/transaction.js'\n\nexport type SerializeTransactionReturnType = ReturnType<\n  typeof serializeTransaction\n>\n\nexport type SerializeTransactionErrorType =\n  | SerializeTransactionErrorType_\n  | ErrorType\n\nexport function serializeTransaction(\n  transaction: OpStackTransactionSerializable,\n  signature?: Signature,\n) {\n  if (isDeposit(transaction)) return serializeTransactionDeposit(transaction)\n  return serializeTransaction_(\n    transaction as TransactionSerializable,\n    signature,\n  )\n}\n\nexport const serializers = {\n  transaction: serializeTransaction,\n} as const satisfies ChainSerializers\n\n//////////////////////////////////////////////////////////////////////////////\n// Serializers\n\nexport type SerializeTransactionDepositReturnType = TransactionSerializedDeposit\n\nfunction serializeTransactionDeposit(\n  transaction: TransactionSerializableDeposit,\n): SerializeTransactionDepositReturnType {\n  assertTransactionDeposit(transaction)\n\n  const { sourceHash, data, from, gas, isSystemTx, mint, to, value } =\n    transaction\n\n  const serializedTransaction: Hex[] = [\n    sourceHash,\n    from,\n    to ?? '0x',\n    mint ? toHex(mint) : '0x',\n    value ? toHex(value) : '0x',\n    gas ? toHex(gas) : '0x',\n    isSystemTx ? '0x1' : '0x',\n    data ?? '0x',\n  ]\n\n  return concatHex([\n    '0x7e',\n    toRlp(serializedTransaction),\n  ]) as SerializeTransactionDepositReturnType\n}\n\nfunction isDeposit(\n  transaction: OpStackTransactionSerializable,\n): transaction is RequiredBy<TransactionSerializableDeposit, 'type'> {\n  if (transaction.type === 'deposit') return true\n  if (typeof transaction.sourceHash !== 'undefined') return true\n  return false\n}\n\nexport function assertTransactionDeposit(\n  transaction: TransactionSerializableDeposit,\n) {\n  const { from, to } = transaction\n  if (from && !isAddress(from)) throw new InvalidAddressError({ address: from })\n  if (to && !isAddress(to)) throw new InvalidAddressError({ address: to })\n}\n"],"names":[],"mappings":";;;;;AAUA,OAAO,EAEL,oBAAoB,IAAI,qBAAqB,GAC9C,MAAM,8CAA8C,CAAA;AALrD,OAAO,EAAE,KAAK,EAAE,MAAM,4BAA4B,CAAA;AADlD,OAAO,EAAE,SAAS,EAAE,MAAM,yBAAyB,CAAA;AAEnD,OAAO,EAAE,KAAK,EAAE,MAAM,4BAA4B,CAAA;AAHlD,OAAO,EAAE,SAAS,EAAE,MAAM,+BAA+B,CAAA;AANzD,OAAO,EAAE,mBAAmB,EAAE,MAAM,sBAAsB,CAAA;;;;;;;AA4BpD,SAAU,oBAAoB,CAClC,WAA2C,EAC3C,SAAqB;IAErB,IAAI,SAAS,CAAC,WAAW,CAAC,EAAE,OAAO,2BAA2B,CAAC,WAAW,CAAC,CAAA;IAC3E,2LAAO,uBAAqB,AAArB,EACL,WAAsC,EACtC,SAAS,CACV,CAAA;AACH,CAAC;AAEM,MAAM,WAAW,GAAG;IACzB,WAAW,EAAE,oBAAoB;CACE,CAAA;AAOrC,SAAS,2BAA2B,CAClC,WAA2C;IAE3C,wBAAwB,CAAC,WAAW,CAAC,CAAA;IAErC,MAAM,EAAE,UAAU,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,UAAU,EAAE,IAAI,EAAE,EAAE,EAAE,KAAK,EAAE,GAChE,WAAW,CAAA;IAEb,MAAM,qBAAqB,GAAU;QACnC,UAAU;QACV,IAAI;QACJ,EAAE,IAAI,IAAI;QACV,IAAI,CAAC,CAAC,mKAAC,QAAA,AAAK,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI;QACzB,KAAK,CAAC,CAAC,mKAAC,QAAA,AAAK,EAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI;QAC3B,GAAG,CAAC,CAAC,mKAAC,QAAK,AAAL,EAAM,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI;QACvB,UAAU,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI;QACzB,IAAI,IAAI,IAAI;KACb,CAAA;IAED,sKAAO,YAAA,AAAS,EAAC;QACf,MAAM;QACN,0KAAA,AAAK,EAAC,qBAAqB,CAAC;KAC7B,CAA0C,CAAA;AAC7C,CAAC;AAED,SAAS,SAAS,CAChB,WAA2C;IAE3C,IAAI,WAAW,CAAC,IAAI,KAAK,SAAS,EAAE,OAAO,IAAI,CAAA;IAC/C,IAAI,OAAO,WAAW,CAAC,UAAU,KAAK,WAAW,EAAE,OAAO,IAAI,CAAA;IAC9D,OAAO,KAAK,CAAA;AACd,CAAC;AAEK,SAAU,wBAAwB,CACtC,WAA2C;IAE3C,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,GAAG,WAAW,CAAA;IAChC,IAAI,IAAI,IAAI,EAAC,gLAAA,AAAS,EAAC,IAAI,CAAC,EAAE,MAAM,yJAAI,sBAAmB,CAAC;QAAE,OAAO,EAAE,IAAI;IAAA,CAAE,CAAC,CAAA;IAC9E,IAAI,EAAE,IAAI,sKAAC,YAAA,AAAS,EAAC,EAAE,CAAC,EAAE,MAAM,yJAAI,sBAAmB,CAAC;QAAE,OAAO,EAAE,EAAE;IAAA,CAAE,CAAC,CAAA;AAC1E,CAAC","ignoreList":[0]}},
    {"offset": {"line": 648, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 654, "column": 0}, "map": {"version":3,"file":"chainConfig.js","sources":["file:///Users/yogendrasankhla/Desktop/abstractsdksl/node_modules/viem/op-stack/chainConfig.ts"],"sourcesContent":["import { contracts } from './contracts.js'\nimport { formatters } from './formatters.js'\nimport { serializers } from './serializers.js'\n\nexport const chainConfig = {\n  contracts,\n  formatters,\n  serializers,\n} as const\n"],"names":[],"mappings":";;;AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAC1C,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAA;AAC5C,OAAO,EAAE,WAAW,EAAE,MAAM,kBAAkB,CAAA;;;;AAEvC,MAAM,WAAW,GAAG;2KACzB,YAAS;6KACT,aAAU;+KACV,cAAW;CACH,CAAA","ignoreList":[0]}},
    {"offset": {"line": 668, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 674, "column": 0}, "map": {"version":3,"file":"utils.js","sources":["file:///Users/yogendrasankhla/Desktop/abstractsdksl/node_modules/viem/celo/utils.ts"],"sourcesContent":["import type { Address } from 'abitype'\nimport { trim } from '../utils/data/trim.js'\nimport type {\n  CeloTransactionRequest,\n  CeloTransactionSerializable,\n  TransactionSerializableCIP64,\n} from './types.js'\n\nexport function isEmpty(\n  value: string | undefined | number | BigInt,\n): value is undefined {\n  return (\n    value === 0 ||\n    value === 0n ||\n    value === undefined ||\n    value === null ||\n    value === '0' ||\n    value === '' ||\n    (typeof value === 'string' &&\n      (trim(value as Address).toLowerCase() === '0x' ||\n        trim(value as Address).toLowerCase() === '0x00'))\n  )\n}\n\nexport function isPresent(\n  value: string | undefined | number | BigInt,\n): value is string | number | BigInt {\n  return !isEmpty(value)\n}\n\n/** @internal */\nexport function isEIP1559(\n  transaction: CeloTransactionSerializable | CeloTransactionRequest,\n): boolean {\n  return (\n    typeof transaction.maxFeePerGas !== 'undefined' &&\n    typeof transaction.maxPriorityFeePerGas !== 'undefined'\n  )\n}\n\nexport function isCIP64(\n  transaction: CeloTransactionSerializable | CeloTransactionRequest,\n): transaction is TransactionSerializableCIP64 {\n  /*\n   * Enable end user to force the tx to be considered as a CIP-64.\n   *\n   * The preliminary type will be determined as \"eip1559\" by src/utils/transaction/getTransactionType.ts\n   * and so we need the logic below to check for the specific value instead of checking if just any\n   * transaction type is provided. If that's anything else than \"cip64\" then we need to reevaluate the\n   * type based on the transaction fields.\n   *\n   * Modify with caution and according to https://github.com/celo-org/celo-proposals/blob/master/CIPs/cip-0064.md\n   */\n  if (transaction.type === 'cip64') {\n    return true\n  }\n\n  return isEIP1559(transaction) && isPresent(transaction.feeCurrency)\n}\n"],"names":[],"mappings":";;;;;;AACA,OAAO,EAAE,IAAI,EAAE,MAAM,uBAAuB,CAAA;;AAOtC,SAAU,OAAO,CACrB,KAA2C;IAE3C,OAAO,AACL,KAAK,KAAK,CAAC,IACX,KAAK,KAAK,EAAE,IACZ,KAAK,KAAK,SAAS,IACnB,KAAK,KAAK,IAAI,IACd,KAAK,KAAK,GAAG,IACb,KAAK,KAAK,EAAE,IACX,OAAO,KAAK,KAAK,QAAQ,IACxB,EAAC,mKAAA,AAAI,EAAC,KAAgB,CAAC,CAAC,WAAW,EAAE,KAAK,IAAI,iKAC5C,OAAA,AAAI,EAAC,KAAgB,CAAC,CAAC,WAAW,EAAE,KAAK,MAAM,CAAC,CAAC,CACtD,CAAA;AACH,CAAC;AAEK,SAAU,SAAS,CACvB,KAA2C;IAE3C,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;AACxB,CAAC;AAGK,SAAU,SAAS,CACvB,WAAiE;IAEjE,OAAO,AACL,OAAO,WAAW,CAAC,YAAY,KAAK,WAAW,IAC/C,OAAO,WAAW,CAAC,oBAAoB,KAAK,WAAW,CACxD,CAAA;AACH,CAAC;AAEK,SAAU,OAAO,CACrB,WAAiE;IAEjE;;;;;;;;;OASG,CACH,IAAI,WAAW,CAAC,IAAI,KAAK,OAAO,EAAE,CAAC;QACjC,OAAO,IAAI,CAAA;IACb,CAAC;IAED,OAAO,SAAS,CAAC,WAAW,CAAC,IAAI,SAAS,CAAC,WAAW,CAAC,WAAW,CAAC,CAAA;AACrE,CAAC","ignoreList":[0]}},
    {"offset": {"line": 706, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 712, "column": 0}, "map": {"version":3,"file":"formatters.js","sources":["file:///Users/yogendrasankhla/Desktop/abstractsdksl/node_modules/viem/celo/formatters.ts"],"sourcesContent":["import type { ChainFormatters } from '../types/chain.js'\nimport type { RpcTransaction } from '../types/rpc.js'\nimport { hexToBigInt } from '../utils/encoding/fromHex.js'\nimport { defineBlock } from '../utils/formatters/block.js'\nimport {\n  defineTransaction,\n  formatTransaction,\n} from '../utils/formatters/transaction.js'\nimport { defineTransactionRequest } from '../utils/formatters/transactionRequest.js'\nimport type {\n  CeloBlock,\n  CeloRpcBlock,\n  CeloRpcTransaction,\n  CeloRpcTransactionRequest,\n  CeloTransaction,\n  CeloTransactionRequest,\n} from './types.js'\nimport { isCIP64 } from './utils.js'\n\nexport const formatters = {\n  block: /*#__PURE__*/ defineBlock({\n    format(args: CeloRpcBlock): CeloBlock {\n      const transactions = args.transactions?.map((transaction) => {\n        if (typeof transaction === 'string') return transaction\n        const formatted = formatTransaction(transaction as RpcTransaction)\n        return {\n          ...formatted,\n          ...(transaction.gatewayFee\n            ? {\n                gatewayFee: hexToBigInt(transaction.gatewayFee),\n                gatewayFeeRecipient: transaction.gatewayFeeRecipient,\n              }\n            : {}),\n          feeCurrency: transaction.feeCurrency,\n        }\n      })\n      return {\n        transactions,\n        ...(args.randomness ? { randomness: args.randomness } : {}),\n      } as CeloBlock\n    },\n  }),\n  transaction: /*#__PURE__*/ defineTransaction({\n    format(args: CeloRpcTransaction): CeloTransaction {\n      if (args.type === '0x7e')\n        return {\n          isSystemTx: args.isSystemTx,\n          mint: args.mint ? hexToBigInt(args.mint) : undefined,\n          sourceHash: args.sourceHash,\n          type: 'deposit',\n        } as CeloTransaction\n\n      const transaction = { feeCurrency: args.feeCurrency } as CeloTransaction\n\n      if (args.type === '0x7b') transaction.type = 'cip64'\n      else {\n        if (args.type === '0x7c') transaction.type = 'cip42'\n\n        transaction.gatewayFee = args.gatewayFee\n          ? hexToBigInt(args.gatewayFee)\n          : null\n        transaction.gatewayFeeRecipient = args.gatewayFeeRecipient\n      }\n\n      return transaction\n    },\n  }),\n  transactionRequest: /*#__PURE__*/ defineTransactionRequest({\n    format(args: CeloTransactionRequest): CeloRpcTransactionRequest {\n      const request = {} as CeloRpcTransactionRequest\n\n      if (args.feeCurrency) request.feeCurrency = args.feeCurrency\n      if (isCIP64(args)) request.type = '0x7b'\n\n      return request\n    },\n  }),\n} as const satisfies ChainFormatters\n"],"names":[],"mappings":";;;AAGA,OAAO,EAAE,WAAW,EAAE,MAAM,8BAA8B,CAAA;AAC1D,OAAO,EACL,iBAAiB,EACjB,iBAAiB,GAClB,MAAM,oCAAoC,CAAA;AAL3C,OAAO,EAAE,WAAW,EAAE,MAAM,8BAA8B,CAAA;AAM1D,OAAO,EAAE,wBAAwB,EAAE,MAAM,2CAA2C,CAAA;AASpF,OAAO,EAAE,OAAO,EAAE,MAAM,YAAY,CAAA;;;;;;AAE7B,MAAM,UAAU,GAAG;IACxB,KAAK,EAAE,WAAA,EAAa,qKAAC,cAAA,AAAW,EAAC;QAC/B,MAAM,EAAC,IAAkB;YACvB,MAAM,YAAY,GAAG,IAAI,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC,WAAW,EAAE,EAAE;gBAC1D,IAAI,OAAO,WAAW,KAAK,QAAQ,EAAE,OAAO,WAAW,CAAA;gBACvD,MAAM,SAAS,OAAG,0LAAA,AAAiB,EAAC,WAA6B,CAAC,CAAA;gBAClE,OAAO;oBACL,GAAG,SAAS;oBACZ,GAAG,AAAC,WAAW,CAAC,UAAU,GACtB;wBACE,UAAU,MAAE,8KAAA,AAAW,EAAC,WAAW,CAAC,UAAU,CAAC;wBAC/C,mBAAmB,EAAE,WAAW,CAAC,mBAAmB;qBACrD,GACD,CAAA,CAAE,CAAC;oBACP,WAAW,EAAE,WAAW,CAAC,WAAW;iBACrC,CAAA;YACH,CAAC,CAAC,CAAA;YACF,OAAO;gBACL,YAAY;gBACZ,GAAG,AAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;oBAAE,UAAU,EAAE,IAAI,CAAC,UAAU;gBAAA,CAAE,CAAC,CAAC,CAAC,CAAA,CAAE,CAAC;aAC/C,CAAA;QAChB,CAAC;KACF,CAAC;IACF,WAAW,EAAE,WAAA,EAAa,EAAC,6LAAA,AAAiB,EAAC;QAC3C,MAAM,EAAC,IAAwB;YAC7B,IAAI,IAAI,CAAC,IAAI,KAAK,MAAM,EACtB,OAAO;gBACL,UAAU,EAAE,IAAI,CAAC,UAAU;gBAC3B,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,qKAAC,cAAA,AAAW,EAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS;gBACpD,UAAU,EAAE,IAAI,CAAC,UAAU;gBAC3B,IAAI,EAAE,SAAS;aACG,CAAA;YAEtB,MAAM,WAAW,GAAG;gBAAE,WAAW,EAAE,IAAI,CAAC,WAAW;YAAA,CAAqB,CAAA;YAExE,IAAI,IAAI,CAAC,IAAI,KAAK,MAAM,EAAE,WAAW,CAAC,IAAI,GAAG,OAAO,CAAA;iBAC/C,CAAC;gBACJ,IAAI,IAAI,CAAC,IAAI,KAAK,MAAM,EAAE,WAAW,CAAC,IAAI,GAAG,OAAO,CAAA;gBAEpD,WAAW,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,uKACpC,cAAA,AAAW,EAAC,IAAI,CAAC,UAAU,CAAC,GAC5B,IAAI,CAAA;gBACR,WAAW,CAAC,mBAAmB,GAAG,IAAI,CAAC,mBAAmB,CAAA;YAC5D,CAAC;YAED,OAAO,WAAW,CAAA;QACpB,CAAC;KACF,CAAC;IACF,kBAAkB,EAAE,WAAA,EAAa,kLAAC,2BAAA,AAAwB,EAAC;QACzD,MAAM,EAAC,IAA4B;YACjC,MAAM,OAAO,GAAG,CAAA,CAA+B,CAAA;YAE/C,IAAI,IAAI,CAAC,WAAW,EAAE,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAA;YAC5D,yJAAI,UAAA,AAAO,EAAC,IAAI,CAAC,EAAE,OAAO,CAAC,IAAI,GAAG,MAAM,CAAA;YAExC,OAAO,OAAO,CAAA;QAChB,CAAC;KACF,CAAC;CACgC,CAAA","ignoreList":[0]}},
    {"offset": {"line": 777, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 783, "column": 0}, "map": {"version":3,"file":"serializers.js","sources":["file:///Users/yogendrasankhla/Desktop/abstractsdksl/node_modules/viem/celo/serializers.ts"],"sourcesContent":["import { maxUint256 } from '../constants/number.js'\nimport { InvalidAddressError } from '../errors/address.js'\nimport { BaseError } from '../errors/base.js'\nimport { InvalidChainIdError } from '../errors/chain.js'\nimport { FeeCapTooHighError, TipAboveFeeCapError } from '../errors/node.js'\nimport { serializeTransaction as serializeTransaction_op } from '../op-stack/serializers.js'\nimport type { ChainSerializers } from '../types/chain.js'\nimport type { Signature } from '../types/misc.js'\nimport { isAddress } from '../utils/address/isAddress.js'\nimport { concatHex } from '../utils/data/concat.js'\nimport { toHex } from '../utils/encoding/toHex.js'\nimport { toRlp } from '../utils/encoding/toRlp.js'\nimport { serializeAccessList } from '../utils/transaction/serializeAccessList.js'\nimport { toYParitySignatureArray } from '../utils/transaction/serializeTransaction.js'\nimport type {\n  CeloTransactionSerializable,\n  TransactionSerializableCIP42,\n  TransactionSerializableCIP64,\n  TransactionSerializedCIP64,\n} from './types.js'\nimport { isCIP64, isEmpty, isPresent } from './utils.js'\n\nexport function serializeTransaction(\n  transaction: CeloTransactionSerializable,\n  signature?: Signature | undefined,\n) {\n  if (isCIP64(transaction))\n    return serializeTransactionCIP64(transaction, signature)\n  return serializeTransaction_op(transaction, signature)\n}\n\nexport const serializers = {\n  transaction: serializeTransaction,\n} as const satisfies ChainSerializers\n\n//////////////////////////////////////////////////////////////////////////////\n// Serializers\n\nexport type SerializeTransactionCIP64ReturnType = TransactionSerializedCIP64\n\nfunction serializeTransactionCIP64(\n  transaction: TransactionSerializableCIP64,\n  signature?: Signature | undefined,\n): SerializeTransactionCIP64ReturnType {\n  assertTransactionCIP64(transaction)\n  const {\n    chainId,\n    gas,\n    nonce,\n    to,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    accessList,\n    feeCurrency,\n    data,\n  } = transaction\n\n  const serializedTransaction = [\n    toHex(chainId),\n    nonce ? toHex(nonce) : '0x',\n    maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : '0x',\n    maxFeePerGas ? toHex(maxFeePerGas) : '0x',\n    gas ? toHex(gas) : '0x',\n    to ?? '0x',\n    value ? toHex(value) : '0x',\n    data ?? '0x',\n    serializeAccessList(accessList),\n    feeCurrency!,\n    ...toYParitySignatureArray(transaction, signature),\n  ]\n\n  return concatHex([\n    '0x7b',\n    toRlp(serializedTransaction),\n  ]) as SerializeTransactionCIP64ReturnType\n}\n\n// maxFeePerGas must be less than maxUint256\nconst MAX_MAX_FEE_PER_GAS = maxUint256\n\nexport function assertTransactionCIP42(\n  transaction: TransactionSerializableCIP42,\n) {\n  const {\n    chainId,\n    maxPriorityFeePerGas,\n    gasPrice,\n    maxFeePerGas,\n    to,\n    feeCurrency,\n    gatewayFee,\n    gatewayFeeRecipient,\n  } = transaction\n  if (chainId <= 0) throw new InvalidChainIdError({ chainId })\n  if (to && !isAddress(to)) throw new InvalidAddressError({ address: to })\n  if (gasPrice)\n    throw new BaseError(\n      '`gasPrice` is not a valid CIP-42 Transaction attribute.',\n    )\n\n  if (isPresent(maxFeePerGas) && maxFeePerGas > MAX_MAX_FEE_PER_GAS)\n    throw new FeeCapTooHighError({ maxFeePerGas })\n\n  if (\n    isPresent(maxPriorityFeePerGas) &&\n    isPresent(maxFeePerGas) &&\n    maxPriorityFeePerGas > maxFeePerGas\n  )\n    throw new TipAboveFeeCapError({ maxFeePerGas, maxPriorityFeePerGas })\n\n  if (\n    (isPresent(gatewayFee) && isEmpty(gatewayFeeRecipient)) ||\n    (isPresent(gatewayFeeRecipient) && isEmpty(gatewayFee))\n  ) {\n    throw new BaseError(\n      '`gatewayFee` and `gatewayFeeRecipient` must be provided together.',\n    )\n  }\n\n  if (isPresent(feeCurrency) && !isAddress(feeCurrency)) {\n    throw new BaseError(\n      '`feeCurrency` MUST be a token address for CIP-42 transactions.',\n    )\n  }\n\n  if (isPresent(gatewayFeeRecipient) && !isAddress(gatewayFeeRecipient)) {\n    throw new InvalidAddressError(gatewayFeeRecipient)\n  }\n\n  if (isEmpty(feeCurrency) && isEmpty(gatewayFeeRecipient)) {\n    throw new BaseError(\n      'Either `feeCurrency` or `gatewayFeeRecipient` must be provided for CIP-42 transactions.',\n    )\n  }\n}\n\nexport function assertTransactionCIP64(\n  transaction: TransactionSerializableCIP64,\n) {\n  const {\n    chainId,\n    maxPriorityFeePerGas,\n    gasPrice,\n    maxFeePerGas,\n    to,\n    feeCurrency,\n  } = transaction\n\n  if (chainId <= 0) throw new InvalidChainIdError({ chainId })\n  if (to && !isAddress(to)) throw new InvalidAddressError({ address: to })\n\n  if (gasPrice)\n    throw new BaseError(\n      '`gasPrice` is not a valid CIP-64 Transaction attribute.',\n    )\n\n  if (isPresent(maxFeePerGas) && maxFeePerGas > MAX_MAX_FEE_PER_GAS)\n    throw new FeeCapTooHighError({ maxFeePerGas })\n  if (\n    isPresent(maxPriorityFeePerGas) &&\n    isPresent(maxFeePerGas) &&\n    maxPriorityFeePerGas > maxFeePerGas\n  )\n    throw new TipAboveFeeCapError({ maxFeePerGas, maxPriorityFeePerGas })\n\n  if (isPresent(feeCurrency) && !isAddress(feeCurrency)) {\n    throw new BaseError(\n      '`feeCurrency` MUST be a token address for CIP-64 transactions.',\n    )\n  }\n\n  if (isEmpty(feeCurrency)) {\n    throw new BaseError(\n      '`feeCurrency` must be provided for CIP-64 transactions.',\n    )\n  }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 897, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 903, "column": 0}, "map": {"version":3,"file":"fees.js","sources":["file:///Users/yogendrasankhla/Desktop/abstractsdksl/node_modules/viem/celo/fees.ts"],"sourcesContent":["import { getCode } from '../actions/public/getCode.js'\nimport type { Client } from '../clients/createClient.js'\nimport type {\n  Address,\n  ChainEstimateFeesPerGasFnParameters,\n  ChainFees,\n  Hex,\n} from '../index.js'\nimport type { formatters } from './formatters.js'\n\nexport const fees: ChainFees<typeof formatters> = {\n  /*\n   * Estimates the fees per gas for a transaction.\n\n   * If the transaction is to be paid in a token (feeCurrency is present) then the fees \n   * are estimated in the value of the token. Otherwise falls back to the default\n   * estimation by returning null.\n   * \n   * @param params fee estimation function parameters\n   */\n  estimateFeesPerGas: async (\n    params: ChainEstimateFeesPerGasFnParameters<typeof formatters>,\n  ) => {\n    if (!params.request?.feeCurrency) return null\n\n    const [gasPrice, maxPriorityFeePerGas, cel2] = await Promise.all([\n      estimateFeePerGasInFeeCurrency(params.client, params.request.feeCurrency),\n      estimateMaxPriorityFeePerGasInFeeCurrency(\n        params.client,\n        params.request.feeCurrency,\n      ),\n      isCel2(params.client),\n    ])\n\n    const maxFeePerGas = cel2\n      ? // eth_gasPrice for cel2 returns baseFeePerGas + maxPriorityFeePerGas\n        params.multiply(gasPrice - maxPriorityFeePerGas) + maxPriorityFeePerGas\n      : // eth_gasPrice for Celo L1 returns (baseFeePerGas * multiplier), where the multiplier is 2 by default.\n        gasPrice + maxPriorityFeePerGas\n\n    return {\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n    }\n  },\n}\n\ntype RequestGasPriceInFeeCurrencyParams = {\n  Method: 'eth_gasPrice'\n  Parameters: [Address]\n  ReturnType: Hex\n}\n\n/*\n * Estimate the fee per gas in the value of the fee token\n\n *\n * @param client - Client to use\n * @param feeCurrency -  Address of a whitelisted fee token\n * @returns The fee per gas in wei in the value of the  fee token\n *\n */\nasync function estimateFeePerGasInFeeCurrency(\n  client: Client,\n  feeCurrency: Address,\n) {\n  const fee = await client.request<RequestGasPriceInFeeCurrencyParams>({\n    method: 'eth_gasPrice',\n    params: [feeCurrency],\n  })\n  return BigInt(fee)\n}\n\ntype RequestMaxGasPriceInFeeCurrencyParams = {\n  Method: 'eth_maxPriorityFeePerGas'\n  Parameters: [Address]\n  ReturnType: Hex\n}\n\n/*\n * Estimate the max priority fee per gas in the value of the fee token\n\n *\n * @param client - Client to use\n * @param feeCurrency -  Address of a whitelisted fee token\n * @returns The fee per gas in wei in the value of the  fee token\n *\n */\nasync function estimateMaxPriorityFeePerGasInFeeCurrency(\n  client: Client,\n  feeCurrency: Address,\n) {\n  const feesPerGas =\n    await client.request<RequestMaxGasPriceInFeeCurrencyParams>({\n      method: 'eth_maxPriorityFeePerGas',\n      params: [feeCurrency],\n    })\n  return BigInt(feesPerGas)\n}\n\nasync function isCel2(client: Client) {\n  const proxyAdminAddress = '0x4200000000000000000000000000000000000018'\n  const code = await getCode(client, { address: proxyAdminAddress })\n  return Boolean(code)\n}\n"],"names":[],"mappings":";;;AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,8BAA8B,CAAA;;AAU/C,MAAM,IAAI,GAAiC;IAChD;;;;;;;;OAQG,CACH,kBAAkB,EAAE,KAAK,EACvB,MAA8D,EAC9D,EAAE;QACF,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,WAAW,EAAE,OAAO,IAAI,CAAA;QAE7C,MAAM,CAAC,QAAQ,EAAE,oBAAoB,EAAE,IAAI,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;YAC/D,8BAA8B,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC;YACzE,yCAAyC,CACvC,MAAM,CAAC,MAAM,EACb,MAAM,CAAC,OAAO,CAAC,WAAW,CAC3B;YACD,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC;SACtB,CAAC,CAAA;QAEF,MAAM,YAAY,GAAG,IAAI,GAErB,MAAM,CAAC,QAAQ,CAAC,QAAQ,GAAG,oBAAoB,CAAC,GAAG,oBAAoB,GAEvE,QAAQ,GAAG,oBAAoB,CAAA;QAEnC,OAAO;YACL,YAAY;YACZ,oBAAoB;SACrB,CAAA;IACH,CAAC;CACF,CAAA;AAQD;;;;;;;;GAQG,CACH,KAAK,UAAU,8BAA8B,CAC3C,MAAc,EACd,WAAoB;IAEpB,MAAM,GAAG,GAAG,MAAM,MAAM,CAAC,OAAO,CAAqC;QACnE,MAAM,EAAE,cAAc;QACtB,MAAM,EAAE;YAAC,WAAW;SAAC;KACtB,CAAC,CAAA;IACF,OAAO,MAAM,CAAC,GAAG,CAAC,CAAA;AACpB,CAAC;AAQD;;;;;;;;GAQG,CACH,KAAK,UAAU,yCAAyC,CACtD,MAAc,EACd,WAAoB;IAEpB,MAAM,UAAU,GACd,MAAM,MAAM,CAAC,OAAO,CAAwC;QAC1D,MAAM,EAAE,0BAA0B;QAClC,MAAM,EAAE;YAAC,WAAW;SAAC;KACtB,CAAC,CAAA;IACJ,OAAO,MAAM,CAAC,UAAU,CAAC,CAAA;AAC3B,CAAC;AAED,KAAK,UAAU,MAAM,CAAC,MAAc;IAClC,MAAM,iBAAiB,GAAG,4CAA4C,CAAA;IACtE,MAAM,IAAI,GAAG,0KAAM,UAAA,AAAO,EAAC,MAAM,EAAE;QAAE,OAAO,EAAE,iBAAiB;IAAA,CAAE,CAAC,CAAA;IAClE,OAAO,OAAO,CAAC,IAAI,CAAC,CAAA;AACtB,CAAC","ignoreList":[0]}},
    {"offset": {"line": 972, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 978, "column": 0}, "map": {"version":3,"file":"chainConfig.js","sources":["file:///Users/yogendrasankhla/Desktop/abstractsdksl/node_modules/viem/celo/chainConfig.ts"],"sourcesContent":["import { contracts } from '../op-stack/contracts.js'\nimport { fees } from './fees.js'\nimport { formatters } from './formatters.js'\nimport { serializers } from './serializers.js'\n\nexport const chainConfig = {\n  contracts,\n  formatters,\n  serializers,\n  fees,\n} as const\n"],"names":[],"mappings":";;;AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,0BAA0B,CAAA;AAEpD,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAA;AAC5C,OAAO,EAAE,WAAW,EAAE,MAAM,kBAAkB,CAAA;AAF9C,OAAO,EAAE,IAAI,EAAE,MAAM,WAAW,CAAA;;;;;AAIzB,MAAM,WAAW,GAAG;2KACzB,YAAS;sKACT,aAAU;wKACV,cAAW;0JACX,OAAI;CACI,CAAA","ignoreList":[0]}},
    {"offset": {"line": 995, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1001, "column": 0}, "map": {"version":3,"file":"estimateGas.js","sources":["file:///Users/yogendrasankhla/Desktop/abstractsdksl/node_modules/viem/linea/actions/estimateGas.ts"],"sourcesContent":["import type { Account } from '../../accounts/types.js'\nimport { parseAccount } from '../../accounts/utils/parseAccount.js'\nimport type { EstimateGasParameters as EstimateGasParameters_base } from '../../actions/public/estimateGas.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { AccountNotFoundError } from '../../errors/account.js'\nimport type { BaseError } from '../../errors/base.js'\nimport type { GetAccountParameter } from '../../types/account.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { TransactionRequest } from '../../types/transaction.js'\nimport type { Filter } from '../../types/utils.js'\nimport { numberToHex } from '../../utils/encoding/toHex.js'\nimport { getCallError } from '../../utils/errors/getCallError.js'\nimport { extract } from '../../utils/formatters/extract.js'\nimport { formatTransactionRequest } from '../../utils/formatters/transactionRequest.js'\nimport {\n  type AssertRequestParameters,\n  assertRequest,\n} from '../../utils/transaction/assertRequest.js'\nimport type { LineaRpcSchema } from '../types/rpc.js'\n\nexport type EstimateGasParameters<\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n> = EstimateGasParameters_base<chain> & GetAccountParameter<account>\n\nexport type EstimateGasReturnType = {\n  gasLimit: bigint\n  baseFeePerGas: bigint\n  priorityFeePerGas: bigint\n}\n\n/**\n * Estimates the gas and fees per gas necessary to complete a transaction without submitting it to the network.\n *\n * @param client - Client to use\n * @param parameters - {@link EstimateGasParameters}\n * @returns A gas estimate and fees per gas (in wei). {@link EstimateGasReturnType}\n *\n * @example\n * import { createPublicClient, http, parseEther } from 'viem'\n * import { linea } from 'viem/chains'\n * import { estimateGas } from 'viem/linea'\n *\n * const client = createPublicClient({\n *   chain: linea,\n *   transport: http(),\n * })\n * const gasEstimate = await estimateGas(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 0n,\n * })\n */\nexport async function estimateGas<\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n>(\n  client: Client<Transport, chain, account>,\n  args: EstimateGasParameters<chain>,\n): Promise<EstimateGasReturnType> {\n  const { account: account_ = client.account } = args\n\n  if (!account_) throw new AccountNotFoundError()\n  const account = parseAccount(account_)\n\n  try {\n    const {\n      accessList,\n      blockNumber,\n      blockTag,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value,\n      ...rest\n    } = args\n\n    const blockNumberHex = blockNumber ? numberToHex(blockNumber) : undefined\n    const block = blockNumberHex || blockTag\n\n    assertRequest(args as AssertRequestParameters)\n\n    const chainFormat = client.chain?.formatters?.transactionRequest?.format\n    const format = chainFormat || formatTransactionRequest\n\n    const request = format({\n      // Pick out extra data that might exist on the chain's transaction request type.\n      ...extract(rest, { format: chainFormat }),\n      from: account?.address,\n      accessList,\n      data,\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      nonce,\n      to,\n      value,\n    } as TransactionRequest)\n\n    type LineaEstimateGasSchema = Filter<\n      LineaRpcSchema,\n      { Method: 'linea_estimateGas' }\n    >[0]\n    const { baseFeePerGas, gasLimit, priorityFeePerGas } =\n      await client.request<LineaEstimateGasSchema>({\n        method: 'linea_estimateGas',\n        params: block ? [request, block] : [request],\n      })\n    return {\n      baseFeePerGas: BigInt(baseFeePerGas),\n      gasLimit: BigInt(gasLimit),\n      priorityFeePerGas: BigInt(priorityFeePerGas),\n    }\n  } catch (err) {\n    throw getCallError(err as BaseError, {\n      ...args,\n      account,\n      chain: client.chain,\n    })\n  }\n}\n"],"names":[],"mappings":";;;AAKA,OAAO,EAAE,oBAAoB,EAAE,MAAM,yBAAyB,CAAA;AAJ9D,OAAO,EAAE,YAAY,EAAE,MAAM,sCAAsC,CAAA;AAUnE,OAAO,EAAE,WAAW,EAAE,MAAM,+BAA+B,CAAA;AAI3D,OAAO,EAEL,aAAa,GACd,MAAM,0CAA0C,CAAA;AAJjD,OAAO,EAAE,wBAAwB,EAAE,MAAM,8CAA8C,CAAA;AADvF,OAAO,EAAE,OAAO,EAAE,MAAM,mCAAmC,CAAA;AAD3D,OAAO,EAAE,YAAY,EAAE,MAAM,oCAAoC,CAAA;;;;;;;;AA0C1D,KAAK,UAAU,WAAW,CAI/B,MAAyC,EACzC,IAAkC;IAElC,MAAM,EAAE,OAAO,EAAE,QAAQ,GAAG,MAAM,CAAC,OAAO,EAAE,GAAG,IAAI,CAAA;IAEnD,IAAI,CAAC,QAAQ,EAAE,MAAM,yJAAI,uBAAoB,EAAE,CAAA;IAC/C,MAAM,OAAO,4KAAG,eAAA,AAAY,EAAC,QAAQ,CAAC,CAAA;IAEtC,IAAI,CAAC;QACH,MAAM,EACJ,UAAU,EACV,WAAW,EACX,QAAQ,EACR,IAAI,EACJ,GAAG,EACH,QAAQ,EACR,YAAY,EACZ,oBAAoB,EACpB,KAAK,EACL,EAAE,EACF,KAAK,EACL,GAAG,IAAI,EACR,GAAG,IAAI,CAAA;QAER,MAAM,cAAc,GAAG,WAAW,CAAC,CAAC,mKAAC,cAAA,AAAW,EAAC,WAAW,CAAC,CAAC,CAAC,CAAC,SAAS,CAAA;QACzE,MAAM,KAAK,GAAG,cAAc,IAAI,QAAQ,CAAA;SAExC,4LAAA,AAAa,EAAC,IAA+B,CAAC,CAAA;QAE9C,MAAM,WAAW,GAAG,MAAM,CAAC,KAAK,EAAE,UAAU,EAAE,kBAAkB,EAAE,MAAM,CAAA;QACxE,MAAM,MAAM,GAAG,WAAW,iLAAI,2BAAwB,CAAA;QAEtD,MAAM,OAAO,GAAG,MAAM,CAAC;YACrB,gFAAgF;YAChF,GAAG,gLAAA,AAAO,EAAC,IAAI,EAAE;gBAAE,MAAM,EAAE,WAAW;YAAA,CAAE,CAAC;YACzC,IAAI,EAAE,OAAO,EAAE,OAAO;YACtB,UAAU;YACV,IAAI;YACJ,GAAG;YACH,QAAQ;YACR,YAAY;YACZ,oBAAoB;YACpB,KAAK;YACL,EAAE;YACF,KAAK;SACgB,CAAC,CAAA;QAMxB,MAAM,EAAE,aAAa,EAAE,QAAQ,EAAE,iBAAiB,EAAE,GAClD,MAAM,MAAM,CAAC,OAAO,CAAyB;YAC3C,MAAM,EAAE,mBAAmB;YAC3B,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC;gBAAC,OAAO;gBAAE,KAAK;aAAC,CAAC,CAAC,CAAC;gBAAC,OAAO;aAAC;SAC7C,CAAC,CAAA;QACJ,OAAO;YACL,aAAa,EAAE,MAAM,CAAC,aAAa,CAAC;YACpC,QAAQ,EAAE,MAAM,CAAC,QAAQ,CAAC;YAC1B,iBAAiB,EAAE,MAAM,CAAC,iBAAiB,CAAC;SAC7C,CAAA;IACH,CAAC,CAAC,OAAO,GAAG,EAAE,CAAC;QACb,6KAAM,eAAA,AAAY,EAAC,GAAgB,EAAE;YACnC,GAAG,IAAI;YACP,OAAO;YACP,KAAK,EAAE,MAAM,CAAC,KAAK;SACpB,CAAC,CAAA;IACJ,CAAC;AACH,CAAC","ignoreList":[0]}},
    {"offset": {"line": 1067, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1073, "column": 0}, "map": {"version":3,"file":"chainConfig.js","sources":["file:///Users/yogendrasankhla/Desktop/abstractsdksl/node_modules/viem/linea/chainConfig.ts"],"sourcesContent":["import type { ChainConfig, ChainEstimateFeesPerGasFn } from '../types/chain.js'\nimport { estimateGas } from './actions/estimateGas.js'\n\nexport const chainConfig = {\n  fees: {\n    estimateFeesPerGas,\n    async maxPriorityFeePerGas({ block, client, request }) {\n      const response = await estimateFeesPerGas({\n        block,\n        client,\n        multiply: (x) => x,\n        request,\n        type: 'eip1559',\n      })\n      // Returning `null` will trigger the base `estimateMaxPriorityFeePerGas` to perform\n      // fallback mechanisms to estimate priority fee.\n      if (!response?.maxPriorityFeePerGas) return null\n      return response.maxPriorityFeePerGas\n    },\n  },\n} as const satisfies ChainConfig\n\n///////////////////////////////////////////////////////////////////////////\n// Internal\n///////////////////////////////////////////////////////////////////////////\n\nasync function estimateFeesPerGas({\n  client,\n  multiply,\n  request,\n  type,\n}: Parameters<ChainEstimateFeesPerGasFn>[0]): ReturnType<ChainEstimateFeesPerGasFn> {\n  try {\n    const response = await estimateGas(client, {\n      ...request,\n      account: request?.account!,\n    })\n    const { priorityFeePerGas: maxPriorityFeePerGas } = response\n\n    const baseFeePerGas = multiply(BigInt(response.baseFeePerGas))\n    const maxFeePerGas = baseFeePerGas + maxPriorityFeePerGas\n\n    if (type === 'legacy') return { gasPrice: maxFeePerGas }\n    return {\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n    }\n  } catch {\n    // Returning `null` will trigger the base `estimateFeesPerGas` to perform\n    // fallback mechanisms to estimate fees.\n    return null\n  }\n}\n"],"names":[],"mappings":";;;AACA,OAAO,EAAE,WAAW,EAAE,MAAM,0BAA0B,CAAA;;AAE/C,MAAM,WAAW,GAAG;IACzB,IAAI,EAAE;QACJ,kBAAkB;QAClB,KAAK,CAAC,oBAAoB,EAAC,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE;YACnD,MAAM,QAAQ,GAAG,MAAM,kBAAkB,CAAC;gBACxC,KAAK;gBACL,MAAM;gBACN,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAG,CAAD,AAAE;gBAClB,OAAO;gBACP,IAAI,EAAE,SAAS;aAChB,CAAC,CAAA;YACF,mFAAmF;YACnF,gDAAgD;YAChD,IAAI,CAAC,QAAQ,EAAE,oBAAoB,EAAE,OAAO,IAAI,CAAA;YAChD,OAAO,QAAQ,CAAC,oBAAoB,CAAA;QACtC,CAAC;KACF;CAC6B,CAAA;AAEhC,2EAA2E;AAC3E,WAAW;AACX,2EAA2E;AAE3E,KAAK,UAAU,kBAAkB,CAAC,EAChC,MAAM,EACN,QAAQ,EACR,OAAO,EACP,IAAI,EACqC;IACzC,IAAI,CAAC;QACH,MAAM,QAAQ,GAAG,OAAM,oLAAA,AAAW,EAAC,MAAM,EAAE;YACzC,GAAG,OAAO;YACV,OAAO,EAAE,OAAO,EAAE,OAAQ;SAC3B,CAAC,CAAA;QACF,MAAM,EAAE,iBAAiB,EAAE,oBAAoB,EAAE,GAAG,QAAQ,CAAA;QAE5D,MAAM,aAAa,GAAG,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAA;QAC9D,MAAM,YAAY,GAAG,aAAa,GAAG,oBAAoB,CAAA;QAEzD,IAAI,IAAI,KAAK,QAAQ,EAAE,OAAO;YAAE,QAAQ,EAAE,YAAY;QAAA,CAAE,CAAA;QACxD,OAAO;YACL,YAAY;YACZ,oBAAoB;SACrB,CAAA;IACH,CAAC,CAAC,OAAM,CAAC;QACP,yEAAyE;QACzE,wCAAwC;QACxC,OAAO,IAAI,CAAA;IACb,CAAC;AACH,CAAC","ignoreList":[0]}},
    {"offset": {"line": 1121, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1127, "column": 0}, "map": {"version":3,"file":"parseEther.js","sources":["file:///Users/yogendrasankhla/Desktop/abstractsdksl/node_modules/viem/utils/unit/parseEther.ts"],"sourcesContent":["import { etherUnits } from '../../constants/unit.js'\nimport type { ErrorType } from '../../errors/utils.js'\n\nimport { type ParseUnitsErrorType, parseUnits } from './parseUnits.js'\n\nexport type ParseEtherErrorType = ParseUnitsErrorType | ErrorType\n\n/**\n * Converts a string representation of ether to numerical wei.\n *\n * - Docs: https://viem.sh/docs/utilities/parseEther\n *\n * @example\n * import { parseEther } from 'viem'\n *\n * parseEther('420')\n * // 420000000000000000000n\n */\nexport function parseEther(ether: string, unit: 'wei' | 'gwei' = 'wei') {\n  return parseUnits(ether, etherUnits[unit])\n}\n"],"names":[],"mappings":";;;AAGA,OAAO,EAA4B,UAAU,EAAE,MAAM,iBAAiB,CAAA;AAHtE,OAAO,EAAE,UAAU,EAAE,MAAM,yBAAyB,CAAA;;;AAkB9C,SAAU,UAAU,CAAC,KAAa,EAAE,OAAuB,KAAK;IACpE,0KAAO,aAAA,AAAU,EAAC,KAAK,uJAAE,aAAU,CAAC,IAAI,CAAC,CAAC,CAAA;AAC5C,CAAC","ignoreList":[0]}},
    {"offset": {"line": 1137, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1143, "column": 0}, "map": {"version":3,"file":"parseSignature.js","sources":["file:///Users/yogendrasankhla/Desktop/abstractsdksl/node_modules/viem/utils/signature/parseSignature.ts"],"sourcesContent":["import { secp256k1 } from '@noble/curves/secp256k1'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hex, Signature } from '../../types/misc.js'\nimport {\n  type NumberToHexErrorType,\n  numberToHex,\n} from '../../utils/encoding/toHex.js'\n\nexport type ParseSignatureErrorType = NumberToHexErrorType | ErrorType\n\n/**\n * @description Parses a hex formatted signature into a structured signature.\n *\n * @param signatureHex Signature in hex format.\n * @returns The structured signature.\n *\n * @example\n * parseSignature('0x6e100a352ec6ad1b70802290e18aeed190704973570f3b8ed42cb9808e2ea6bf4a90a229a244495b41890987806fcbd2d5d23fc0dbe5f5256c2613c039d76db81c')\n * // { r: '0x...', s: '0x...', v: 28n }\n */\nexport function parseSignature(signatureHex: Hex) {\n  const { r, s } = secp256k1.Signature.fromCompact(signatureHex.slice(2, 130))\n  const yParityOrV = Number(`0x${signatureHex.slice(130)}`)\n  const [v, yParity] = (() => {\n    if (yParityOrV === 0 || yParityOrV === 1) return [undefined, yParityOrV]\n    if (yParityOrV === 27) return [BigInt(yParityOrV), 0]\n    if (yParityOrV === 28) return [BigInt(yParityOrV), 1]\n    throw new Error('Invalid yParityOrV value')\n  })()\n\n  if (typeof v !== 'undefined')\n    return {\n      r: numberToHex(r, { size: 32 }),\n      s: numberToHex(s, { size: 32 }),\n      v,\n      yParity,\n    } satisfies Signature\n  return {\n    r: numberToHex(r, { size: 32 }),\n    s: numberToHex(s, { size: 32 }),\n    yParity,\n  } satisfies Signature\n}\n"],"names":[],"mappings":";;;AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,yBAAyB,CAAA;AAInD,OAAO,EAEL,WAAW,GACZ,MAAM,+BAA+B,CAAA;;;AAchC,SAAU,cAAc,CAAC,YAAiB;IAC9C,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,4JAAG,YAAS,CAAC,SAAS,CAAC,WAAW,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAA;IAC5E,MAAM,UAAU,GAAG,MAAM,CAAC,CAAA,EAAA,EAAK,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,CAAA;IACzD,MAAM,CAAC,CAAC,EAAE,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE;QACzB,IAAI,UAAU,KAAK,CAAC,IAAI,UAAU,KAAK,CAAC,EAAE,OAAO;YAAC,SAAS;YAAE,UAAU;SAAC,CAAA;QACxE,IAAI,UAAU,KAAK,EAAE,EAAE,OAAO;YAAC,MAAM,CAAC,UAAU,CAAC;YAAE,CAAC;SAAC,CAAA;QACrD,IAAI,UAAU,KAAK,EAAE,EAAE,OAAO;YAAC,MAAM,CAAC,UAAU,CAAC;YAAE,CAAC;SAAC,CAAA;QACrD,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAA;IAC7C,CAAC,CAAC,EAAE,CAAA;IAEJ,IAAI,OAAO,CAAC,KAAK,WAAW,EAC1B,OAAO;QACL,CAAC,oKAAE,cAAA,AAAW,EAAC,CAAC,EAAE;YAAE,IAAI,EAAE,EAAE;QAAA,CAAE,CAAC;QAC/B,CAAC,GAAE,+KAAA,AAAW,EAAC,CAAC,EAAE;YAAE,IAAI,EAAE,EAAE;QAAA,CAAE,CAAC;QAC/B,CAAC;QACD,OAAO;KACY,CAAA;IACvB,OAAO;QACL,CAAC,EAAE,gLAAA,AAAW,EAAC,CAAC,EAAE;YAAE,IAAI,EAAE,EAAE;QAAA,CAAE,CAAC;QAC/B,CAAC,oKAAE,cAAA,AAAW,EAAC,CAAC,EAAE;YAAE,IAAI,EAAE,EAAE;QAAA,CAAE,CAAC;QAC/B,OAAO;KACY,CAAA;AACvB,CAAC","ignoreList":[0]}},
    {"offset": {"line": 1188, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}