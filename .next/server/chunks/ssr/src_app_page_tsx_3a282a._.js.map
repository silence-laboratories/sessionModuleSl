{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/yogendrasankhla/Desktop/abstractsdksl/src/app/page.tsx"],"sourcesContent":["// // app/page.tsx\n\"use client\";\n// import { useState } from 'react';\n// import {\n//   createSmartAccountClient,\n//   toNexusAccount,\n//   smartSessionCreateActions,\n//   toSmartSessionsValidator,\n//   smartSessionUseActions,\n//   stringify,\n//   parse,\n//   SmartSessionMode,\n//   CreateSessionDataParams,\n// } from \"@biconomy/abstractjs\";\n// import { baseSepolia } from \"viem/chains\";\n// import { http, encodeFunctionData } from \"viem\";\n// import { createViemAccount, generateCryptographicKey, createSignerForSign } from '../../lib/sl';\nimport abi from './../../contracts/ABI.json';\n// import { privateKeyToAccount } from 'viem/accounts';\n// import { ethers } from 'ethers';\n\n// export default function SessionPage() {\n//   const [mpcSigner, setMpcSigner] = useState<any>(null);\n//   const [sessionData, setSessionData] = useState<string | null>(null);\n//   const [loading, setLoading] = useState<string>('');\n//   const [txHash, setTxHash] = useState<string>('');\n\n//   // Initialize MPC Signer: generate keys (if needed) and then create the signer for signing\n//   const initializeMPCSigner = async () => {\n//     setLoading('Initializing MPC signer...');\n//     try {\n//       // Generate key pair (this will store config in localStorage)\n//       await generateCryptographicKey();\n//       // Create a NetworkSigner using EphAuth for signing operations\n//       const { networkSigner, keyId, publicKey } = await createSignerForSign();\n//       const mpcAccount = createViemAccount(networkSigner, keyId, publicKey);\n//       setMpcSigner(mpcAccount);\n//       setLoading('');\n//     } catch (error) {\n//       console.error('MPC Signer Error:', error);\n//       setLoading('');\n//     }\n//   };\n\n//   // Create Biconomy Smart Session\n//   const createSmartSession = async () => {\n//     if (!mpcSigner) return;\n//     setLoading('Creating smart session...');\n\n//     try {\n//       // Initialize Nexus client with owner account\n//       const ownerPrivateKey = \"0xec2387b319f9c96c5f2a3f9f5152208d09c0265d139235cab9c90511e6836fc7\"; // Replace with actual owner key\n//       const ownerAccount = privateKeyToAccount(ownerPrivateKey);\n\n//       const bundlerUrl = \"https://bundler.biconomy.io/api/v3/84532/nJPK7B3ru.dd7f7861-190d-41bd-af80-6877f74b8f44\";\n//       const ownerAccountAddress = ownerAccount.address;\n//       console.log(\"Owner Account:\", ownerAccountAddress);\n//       const nexusClient = await createSmartAccountClient({\n//         account: await toNexusAccount({\n//           signer: ownerAccount,\n//           chain: baseSepolia,\n//           transport: http(),\n//         }),\n//         transport: http(bundlerUrl),\n//       });\n//       console.log(\"Nexus Client:\", nexusClient.account.address);\n\n//       // Create and install sessions module\n//       const sessionsModule = toSmartSessionsValidator({\n//         account: nexusClient.account,\n//         signer: ownerAccount\n//       });\n//       console.log(\"Sessions Module:\", sessionsModule.moduleInitData);\n\n//       const hash = await nexusClient.installModule({\n//         module: sessionsModule.moduleInitData\n//       });\n//       console.log(\"Module Installation Hash:\", hash);\n\n//       await nexusClient.waitForUserOperationReceipt({ hash });\n\n//       const nexusSessionClient = nexusClient.extend(smartSessionCreateActions(sessionsModule));\n\n//       // Create session with MPC public key\n//       const sessionRequestedInfo: CreateSessionDataParams[] = [\n//         {\n//           sessionKeyData: mpcSigner.address as `0x${string}`,\n//           actionPoliciesInfo: [{\n//             contractAddress: \"0x7961d826258946969fa0d80b34508094c6148bdf\" as `0x${string}`,\n//             rules: [],\n//             functionSelector: \"0xd09de08a\" as `0x${string}` // Function selector for 'increment'\n//           }]\n//         }\n//       ];\n//       console.log(\"sessionRequestedInfo:\", sessionRequestedInfo);\n\n//       const createSessionsResponse = await nexusSessionClient.grantPermission({\n//         sessionRequestedInfo\n//       });\n\n//       await nexusClient.waitForUserOperationReceipt({\n//         hash: createSessionsResponse.userOpHash\n//       });\n\n//       // Store session data in localStorage for persistence\n//       const sessionDataObj = {\n//         granter: nexusClient.account.address,\n//         sessionPublicKey: mpcSigner.address,\n//         description: `MPC Session for ${nexusClient.account.address.slice(0, 6)}`,\n//         moduleData: {\n//           ...createSessionsResponse,\n//           mode: SmartSessionMode.USE\n//         }\n//       };\n\n//       const compressedData = stringify(sessionDataObj);\n//       localStorage.setItem('mpcSessionData', compressedData);\n//       setSessionData(compressedData);\n//       setLoading('');\n//     } catch (error) {\n//       console.error('Session Creation Error:', error);\n//       setLoading('');\n//     }\n//   };\n\n//   // Execute Transaction with MPC Session\n//   const executeTransaction = async () => {\n//     if (!sessionData) return;\n//     setLoading('Executing transaction...');\n\n//     try {\n//       const parsedData = parse(sessionData);\n//       const bundlerUrl = \"https://bundler.biconomy.io/api/v3/84532/nJPK7B3ru.dd7f7861-190d-41bd-af80-6877f74b8f44\";\n\n//       // Create MPC-powered client\n//       console.log(\"Creating MPC-powered client...\");\n//       const smartSessionClient = createSmartAccountClient({\n//         chain: baseSepolia,\n//         account: await toNexusAccount({\n//           signer: mpcSigner,\n//           chain: baseSepolia,\n//           transport: http(),\n//         }),\n//         transport: http(bundlerUrl)\n//       });\n\n//       // Attach sessions module\n//       console.log(\"Attaching sessions module...\");\n//       const usePermissionsModule = toSmartSessionsValidator({\n//         account: smartSessionClient.account,\n//         signer: mpcSigner,\n//         moduleData: parsedData.moduleData\n//       });\n\n//       const sessionEnabledClient = smartSessionClient.extend(\n//         smartSessionUseActions(usePermissionsModule)\n//       );\n\n//       // Execute transaction (example: calling 'increment')\n//       console.log(\"Executing transaction...\");\n//       const userOpHash = await sessionEnabledClient.usePermission({\n//         calls: [{\n//           to: \"0x7961d826258946969fa0d80b34508094c6148bdf\",\n//           data: encodeFunctionData({\n//             abi: abi,\n//             functionName: \"increment\"\n//           })\n//         }],\n//         callGasLimit: BigInt(100000),\n//         verificationGasLimit: BigInt(500000),\n//         preVerificationGas: BigInt(300000)\n\n//       });\n\n//       setTxHash(userOpHash);\n//       setLoading('');\n//     } catch (error) {\n//       console.error('Execution Error:', error);\n//       setLoading('');\n//     }\n//   };\n\n//   return (\n//     <div className=\"min-h-screen p-8\">\n//       <h1 className=\"text-3xl mb-8\">MPC-Powered Smart Sessions</h1>\n\n//       <div className=\"space-y-4 max-w-2xl\">\n//         <button\n//           onClick={initializeMPCSigner}\n//           className=\"btn-primary\"\n//           disabled={!!mpcSigner}\n//         >\n//           {mpcSigner ? 'MPC Signer Ready' : 'Initialize MPC Signer'}\n//         </button>\n\n//         {mpcSigner && (\n//           <button\n//             onClick={createSmartSession}\n//             className=\"btn-secondary\"\n//             disabled={!!sessionData}\n//           >\n//             {sessionData ? 'Session Created' : 'Create Smart Session'}\n//           </button>\n//         )}\n\n//         {sessionData && (\n//           <button\n//             onClick={executeTransaction}\n//             className=\"btn-success\"\n//           >\n//             Execute Transaction\n//           </button>\n//         )}\n\n//         {loading && <p className=\"text-blue-500\">{loading}</p>}\n//         {txHash && (\n//           <div className=\"mt-4 p-4 bg-gray-100 rounded\">\n//             <p className=\"font-mono break-words\">Transaction Hash: {txHash}</p>\n//           </div>\n//         )}\n\n//         <div className=\"mt-8 space-y-2\">\n//           {mpcSigner && (\n//             <p>MPC Signer Address: {mpcSigner.address}</p>\n//           )}\n//           {sessionData && (\n//             <p>Session Granter: {parse(sessionData).granter}</p>\n//           )}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 198, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}