module.exports = {

"[project]/node_modules/@rhinestone/module-sdk/_esm/module/smart-sessions/constants.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "SMART_SESSIONS_ADDRESS": (()=>SMART_SESSIONS_ADDRESS),
    "SMART_SESSIONS_COMPATIBILITY_FALLBACK_ADDRESS": (()=>SMART_SESSIONS_COMPATIBILITY_FALLBACK_ADDRESS)
});
const SMART_SESSIONS_ADDRESS = '0x00000000002B0eCfbD0496EE71e01257dA0E37DE';
const SMART_SESSIONS_COMPATIBILITY_FALLBACK_ADDRESS = '0xBad7E91C4F2803978cd6c7C3Fe80B5Fd7f7B0b50'; //# sourceMappingURL=constants.js.map
}}),
"[project]/node_modules/@rhinestone/module-sdk/_esm/common/constants.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "INDEXER_URL": (()=>INDEXER_URL),
    "SENTINEL_ADDRESS": (()=>SENTINEL_ADDRESS)
});
const SENTINEL_ADDRESS = '0x0000000000000000000000000000000000000001';
const INDEXER_URL = 'https://indexer.bigdevenergy.link/c03b38d/v1/graphql'; //# sourceMappingURL=constants.js.map
}}),
"[project]/node_modules/@rhinestone/module-sdk/_esm/common/queries/registry.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "getRegistryModules": (()=>getRegistryModules)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$common$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@rhinestone/module-sdk/_esm/common/constants.js [app-rsc] (ecmascript)");
;
const query = `
  query ($chainId: Int) {
     Registry_ModuleRegistration (where: { chainId: { _eq: $chainId } }) {
        id
        implementation
      }
  }
`;
const getRegistryModules = async ({ client })=>{
    const variables = {
        chainId: await client.getChainId()
    };
    const response = await fetch(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$common$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["INDEXER_URL"], {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            query,
            variables
        })
    });
    const responseBody = await response.json();
    if (response.ok) {
        return responseBody.data.Registry_ModuleRegistration;
    } else {
        throw new Error(`Error: ${responseBody.errors.map((error)=>error.message).join(', ')}`);
    }
}; //# sourceMappingURL=registry.js.map
}}),
"[project]/node_modules/@rhinestone/module-sdk/_esm/module/registry/abi.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "abi": (()=>abi)
});
const abi = [
    {
        inputs: [],
        name: 'AccessDenied',
        type: 'error'
    },
    {
        inputs: [],
        name: 'AlreadyAttested',
        type: 'error'
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: 'module',
                type: 'address'
            }
        ],
        name: 'AlreadyRegistered',
        type: 'error'
    },
    {
        inputs: [],
        name: 'AlreadyRevoked',
        type: 'error'
    },
    {
        inputs: [],
        name: 'AttestationNotFound',
        type: 'error'
    },
    {
        inputs: [],
        name: 'DifferentResolvers',
        type: 'error'
    },
    {
        inputs: [],
        name: 'ExternalError_ModuleRegistration',
        type: 'error'
    },
    {
        inputs: [],
        name: 'ExternalError_ResolveAttestation',
        type: 'error'
    },
    {
        inputs: [],
        name: 'ExternalError_ResolveRevocation',
        type: 'error'
    },
    {
        inputs: [],
        name: 'ExternalError_SchemaValidation',
        type: 'error'
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: 'factory',
                type: 'address'
            }
        ],
        name: 'FactoryCallFailed',
        type: 'error'
    },
    {
        inputs: [],
        name: 'InsufficientAttestations',
        type: 'error'
    },
    {
        inputs: [],
        name: 'InvalidAddress',
        type: 'error'
    },
    {
        inputs: [],
        name: 'InvalidAttestation',
        type: 'error'
    },
    {
        inputs: [],
        name: 'InvalidDeployment',
        type: 'error'
    },
    {
        inputs: [],
        name: 'InvalidExpirationTime',
        type: 'error'
    },
    {
        inputs: [],
        name: 'InvalidModuleType',
        type: 'error'
    },
    {
        inputs: [],
        name: 'InvalidModuleTypes',
        type: 'error'
    },
    {
        inputs: [
            {
                internalType: 'contract IExternalResolver',
                name: 'resolver',
                type: 'address'
            }
        ],
        name: 'InvalidResolver',
        type: 'error'
    },
    {
        inputs: [
            {
                internalType: 'ResolverUID',
                name: 'uid',
                type: 'bytes32'
            }
        ],
        name: 'InvalidResolverUID',
        type: 'error'
    },
    {
        inputs: [],
        name: 'InvalidSalt',
        type: 'error'
    },
    {
        inputs: [],
        name: 'InvalidSchema',
        type: 'error'
    },
    {
        inputs: [
            {
                internalType: 'contract IExternalSchemaValidator',
                name: 'validator',
                type: 'address'
            }
        ],
        name: 'InvalidSchemaValidator',
        type: 'error'
    },
    {
        inputs: [],
        name: 'InvalidSignature',
        type: 'error'
    },
    {
        inputs: [],
        name: 'InvalidThreshold',
        type: 'error'
    },
    {
        inputs: [],
        name: 'InvalidTrustedAttesterInput',
        type: 'error'
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: 'moduleAddress',
                type: 'address'
            }
        ],
        name: 'ModuleAddressIsNotContract',
        type: 'error'
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: 'module',
                type: 'address'
            }
        ],
        name: 'ModuleNotFoundInRegistry',
        type: 'error'
    },
    {
        inputs: [],
        name: 'NoTrustedAttestersFound',
        type: 'error'
    },
    {
        inputs: [],
        name: 'ResolverAlreadyExists',
        type: 'error'
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: 'attester',
                type: 'address'
            }
        ],
        name: 'RevokedAttestation',
        type: 'error'
    },
    {
        inputs: [
            {
                internalType: 'SchemaUID',
                name: 'uid',
                type: 'bytes32'
            }
        ],
        name: 'SchemaAlreadyExists',
        type: 'error'
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: 'address',
                name: 'moduleAddress',
                type: 'address'
            },
            {
                indexed: true,
                internalType: 'address',
                name: 'attester',
                type: 'address'
            },
            {
                indexed: false,
                internalType: 'SchemaUID',
                name: 'schemaUID',
                type: 'bytes32'
            },
            {
                indexed: true,
                internalType: 'AttestationDataRef',
                name: 'sstore2Pointer',
                type: 'address'
            }
        ],
        name: 'Attested',
        type: 'event'
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: 'address',
                name: 'implementation',
                type: 'address'
            }
        ],
        name: 'ModuleRegistration',
        type: 'event'
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: 'ResolverUID',
                name: 'uid',
                type: 'bytes32'
            },
            {
                indexed: true,
                internalType: 'address',
                name: 'resolver',
                type: 'address'
            }
        ],
        name: 'NewResolver',
        type: 'event'
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: 'ResolverUID',
                name: 'uid',
                type: 'bytes32'
            },
            {
                indexed: false,
                internalType: 'address',
                name: 'newOwner',
                type: 'address'
            }
        ],
        name: 'NewResolverOwner',
        type: 'event'
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: 'address',
                name: 'smartAccount',
                type: 'address'
            }
        ],
        name: 'NewTrustedAttesters',
        type: 'event'
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: 'contract IExternalResolver',
                name: 'resolver',
                type: 'address'
            }
        ],
        name: 'ResolverRevocationError',
        type: 'event'
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: 'address',
                name: 'moduleAddress',
                type: 'address'
            },
            {
                indexed: true,
                internalType: 'address',
                name: 'revoker',
                type: 'address'
            },
            {
                indexed: false,
                internalType: 'SchemaUID',
                name: 'schema',
                type: 'bytes32'
            }
        ],
        name: 'Revoked',
        type: 'event'
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: 'SchemaUID',
                name: 'uid',
                type: 'bytes32'
            },
            {
                indexed: true,
                internalType: 'address',
                name: 'registerer',
                type: 'address'
            }
        ],
        name: 'SchemaRegistered',
        type: 'event'
    },
    {
        inputs: [
            {
                internalType: 'SchemaUID',
                name: 'schemaUID',
                type: 'bytes32'
            },
            {
                internalType: 'address',
                name: 'attester',
                type: 'address'
            },
            {
                components: [
                    {
                        internalType: 'address',
                        name: 'moduleAddress',
                        type: 'address'
                    },
                    {
                        internalType: 'uint48',
                        name: 'expirationTime',
                        type: 'uint48'
                    },
                    {
                        internalType: 'bytes',
                        name: 'data',
                        type: 'bytes'
                    },
                    {
                        internalType: 'ModuleType[]',
                        name: 'moduleTypes',
                        type: 'uint256[]'
                    }
                ],
                internalType: 'struct AttestationRequest[]',
                name: 'requests',
                type: 'tuple[]'
            },
            {
                internalType: 'bytes',
                name: 'signature',
                type: 'bytes'
            }
        ],
        name: 'attest',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function'
    },
    {
        inputs: [
            {
                internalType: 'SchemaUID',
                name: 'schemaUID',
                type: 'bytes32'
            },
            {
                internalType: 'address',
                name: 'attester',
                type: 'address'
            },
            {
                components: [
                    {
                        internalType: 'address',
                        name: 'moduleAddress',
                        type: 'address'
                    },
                    {
                        internalType: 'uint48',
                        name: 'expirationTime',
                        type: 'uint48'
                    },
                    {
                        internalType: 'bytes',
                        name: 'data',
                        type: 'bytes'
                    },
                    {
                        internalType: 'ModuleType[]',
                        name: 'moduleTypes',
                        type: 'uint256[]'
                    }
                ],
                internalType: 'struct AttestationRequest',
                name: 'request',
                type: 'tuple'
            },
            {
                internalType: 'bytes',
                name: 'signature',
                type: 'bytes'
            }
        ],
        name: 'attest',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function'
    },
    {
        inputs: [
            {
                internalType: 'SchemaUID',
                name: 'schemaUID',
                type: 'bytes32'
            },
            {
                components: [
                    {
                        internalType: 'address',
                        name: 'moduleAddress',
                        type: 'address'
                    },
                    {
                        internalType: 'uint48',
                        name: 'expirationTime',
                        type: 'uint48'
                    },
                    {
                        internalType: 'bytes',
                        name: 'data',
                        type: 'bytes'
                    },
                    {
                        internalType: 'ModuleType[]',
                        name: 'moduleTypes',
                        type: 'uint256[]'
                    }
                ],
                internalType: 'struct AttestationRequest',
                name: 'request',
                type: 'tuple'
            }
        ],
        name: 'attest',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function'
    },
    {
        inputs: [
            {
                internalType: 'SchemaUID',
                name: 'schemaUID',
                type: 'bytes32'
            },
            {
                components: [
                    {
                        internalType: 'address',
                        name: 'moduleAddress',
                        type: 'address'
                    },
                    {
                        internalType: 'uint48',
                        name: 'expirationTime',
                        type: 'uint48'
                    },
                    {
                        internalType: 'bytes',
                        name: 'data',
                        type: 'bytes'
                    },
                    {
                        internalType: 'ModuleType[]',
                        name: 'moduleTypes',
                        type: 'uint256[]'
                    }
                ],
                internalType: 'struct AttestationRequest[]',
                name: 'requests',
                type: 'tuple[]'
            }
        ],
        name: 'attest',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function'
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: 'attester',
                type: 'address'
            }
        ],
        name: 'attesterNonce',
        outputs: [
            {
                internalType: 'uint256',
                name: 'nonce',
                type: 'uint256'
            }
        ],
        stateMutability: 'view',
        type: 'function'
    },
    {
        inputs: [
            {
                internalType: 'bytes32',
                name: 'salt',
                type: 'bytes32'
            },
            {
                internalType: 'bytes',
                name: 'initCode',
                type: 'bytes'
            }
        ],
        name: 'calcModuleAddress',
        outputs: [
            {
                internalType: 'address',
                name: '',
                type: 'address'
            }
        ],
        stateMutability: 'view',
        type: 'function'
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: 'module',
                type: 'address'
            },
            {
                internalType: 'address[]',
                name: 'attesters',
                type: 'address[]'
            },
            {
                internalType: 'uint256',
                name: 'threshold',
                type: 'uint256'
            }
        ],
        name: 'check',
        outputs: [],
        stateMutability: 'view',
        type: 'function'
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: 'module',
                type: 'address'
            },
            {
                internalType: 'ModuleType',
                name: 'moduleType',
                type: 'uint256'
            },
            {
                internalType: 'address[]',
                name: 'attesters',
                type: 'address[]'
            },
            {
                internalType: 'uint256',
                name: 'threshold',
                type: 'uint256'
            }
        ],
        name: 'check',
        outputs: [],
        stateMutability: 'view',
        type: 'function'
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: 'module',
                type: 'address'
            },
            {
                internalType: 'ModuleType',
                name: 'moduleType',
                type: 'uint256'
            }
        ],
        name: 'check',
        outputs: [],
        stateMutability: 'view',
        type: 'function'
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: 'module',
                type: 'address'
            }
        ],
        name: 'check',
        outputs: [],
        stateMutability: 'view',
        type: 'function'
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: 'smartAccount',
                type: 'address'
            },
            {
                internalType: 'address',
                name: 'module',
                type: 'address'
            }
        ],
        name: 'checkForAccount',
        outputs: [],
        stateMutability: 'view',
        type: 'function'
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: 'smartAccount',
                type: 'address'
            },
            {
                internalType: 'address',
                name: 'module',
                type: 'address'
            },
            {
                internalType: 'ModuleType',
                name: 'moduleType',
                type: 'uint256'
            }
        ],
        name: 'checkForAccount',
        outputs: [],
        stateMutability: 'view',
        type: 'function'
    },
    {
        inputs: [
            {
                internalType: 'bytes32',
                name: 'salt',
                type: 'bytes32'
            },
            {
                internalType: 'ResolverUID',
                name: 'resolverUID',
                type: 'bytes32'
            },
            {
                internalType: 'bytes',
                name: 'initCode',
                type: 'bytes'
            },
            {
                internalType: 'bytes',
                name: 'metadata',
                type: 'bytes'
            },
            {
                internalType: 'bytes',
                name: 'resolverContext',
                type: 'bytes'
            }
        ],
        name: 'deployModule',
        outputs: [
            {
                internalType: 'address',
                name: 'moduleAddress',
                type: 'address'
            }
        ],
        stateMutability: 'payable',
        type: 'function'
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: 'factory',
                type: 'address'
            },
            {
                internalType: 'bytes',
                name: 'callOnFactory',
                type: 'bytes'
            },
            {
                internalType: 'bytes',
                name: 'metadata',
                type: 'bytes'
            },
            {
                internalType: 'ResolverUID',
                name: 'resolverUID',
                type: 'bytes32'
            },
            {
                internalType: 'bytes',
                name: 'resolverContext',
                type: 'bytes'
            }
        ],
        name: 'deployViaFactory',
        outputs: [
            {
                internalType: 'address',
                name: 'moduleAddress',
                type: 'address'
            }
        ],
        stateMutability: 'payable',
        type: 'function'
    },
    {
        inputs: [],
        name: 'eip712Domain',
        outputs: [
            {
                internalType: 'bytes1',
                name: 'fields',
                type: 'bytes1'
            },
            {
                internalType: 'string',
                name: 'name',
                type: 'string'
            },
            {
                internalType: 'string',
                name: 'version',
                type: 'string'
            },
            {
                internalType: 'uint256',
                name: 'chainId',
                type: 'uint256'
            },
            {
                internalType: 'address',
                name: 'verifyingContract',
                type: 'address'
            },
            {
                internalType: 'bytes32',
                name: 'salt',
                type: 'bytes32'
            },
            {
                internalType: 'uint256[]',
                name: 'extensions',
                type: 'uint256[]'
            }
        ],
        stateMutability: 'view',
        type: 'function'
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: 'module',
                type: 'address'
            },
            {
                internalType: 'address',
                name: 'attester',
                type: 'address'
            }
        ],
        name: 'findAttestation',
        outputs: [
            {
                components: [
                    {
                        internalType: 'uint48',
                        name: 'time',
                        type: 'uint48'
                    },
                    {
                        internalType: 'uint48',
                        name: 'expirationTime',
                        type: 'uint48'
                    },
                    {
                        internalType: 'uint48',
                        name: 'revocationTime',
                        type: 'uint48'
                    },
                    {
                        internalType: 'PackedModuleTypes',
                        name: 'moduleTypes',
                        type: 'uint32'
                    },
                    {
                        internalType: 'address',
                        name: 'moduleAddress',
                        type: 'address'
                    },
                    {
                        internalType: 'address',
                        name: 'attester',
                        type: 'address'
                    },
                    {
                        internalType: 'AttestationDataRef',
                        name: 'dataPointer',
                        type: 'address'
                    },
                    {
                        internalType: 'SchemaUID',
                        name: 'schemaUID',
                        type: 'bytes32'
                    }
                ],
                internalType: 'struct AttestationRecord',
                name: 'attestation',
                type: 'tuple'
            }
        ],
        stateMutability: 'view',
        type: 'function'
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: 'module',
                type: 'address'
            },
            {
                internalType: 'address[]',
                name: 'attesters',
                type: 'address[]'
            }
        ],
        name: 'findAttestations',
        outputs: [
            {
                components: [
                    {
                        internalType: 'uint48',
                        name: 'time',
                        type: 'uint48'
                    },
                    {
                        internalType: 'uint48',
                        name: 'expirationTime',
                        type: 'uint48'
                    },
                    {
                        internalType: 'uint48',
                        name: 'revocationTime',
                        type: 'uint48'
                    },
                    {
                        internalType: 'PackedModuleTypes',
                        name: 'moduleTypes',
                        type: 'uint32'
                    },
                    {
                        internalType: 'address',
                        name: 'moduleAddress',
                        type: 'address'
                    },
                    {
                        internalType: 'address',
                        name: 'attester',
                        type: 'address'
                    },
                    {
                        internalType: 'AttestationDataRef',
                        name: 'dataPointer',
                        type: 'address'
                    },
                    {
                        internalType: 'SchemaUID',
                        name: 'schemaUID',
                        type: 'bytes32'
                    }
                ],
                internalType: 'struct AttestationRecord[]',
                name: 'attestations',
                type: 'tuple[]'
            }
        ],
        stateMutability: 'view',
        type: 'function'
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: 'moduleAddress',
                type: 'address'
            }
        ],
        name: 'findModule',
        outputs: [
            {
                components: [
                    {
                        internalType: 'ResolverUID',
                        name: 'resolverUID',
                        type: 'bytes32'
                    },
                    {
                        internalType: 'address',
                        name: 'sender',
                        type: 'address'
                    },
                    {
                        internalType: 'bytes',
                        name: 'metadata',
                        type: 'bytes'
                    }
                ],
                internalType: 'struct ModuleRecord',
                name: 'moduleRecord',
                type: 'tuple'
            }
        ],
        stateMutability: 'view',
        type: 'function'
    },
    {
        inputs: [
            {
                internalType: 'ResolverUID',
                name: 'uid',
                type: 'bytes32'
            }
        ],
        name: 'findResolver',
        outputs: [
            {
                components: [
                    {
                        internalType: 'contract IExternalResolver',
                        name: 'resolver',
                        type: 'address'
                    },
                    {
                        internalType: 'address',
                        name: 'resolverOwner',
                        type: 'address'
                    }
                ],
                internalType: 'struct ResolverRecord',
                name: '',
                type: 'tuple'
            }
        ],
        stateMutability: 'view',
        type: 'function'
    },
    {
        inputs: [
            {
                internalType: 'SchemaUID',
                name: 'uid',
                type: 'bytes32'
            }
        ],
        name: 'findSchema',
        outputs: [
            {
                components: [
                    {
                        internalType: 'uint48',
                        name: 'registeredAt',
                        type: 'uint48'
                    },
                    {
                        internalType: 'contract IExternalSchemaValidator',
                        name: 'validator',
                        type: 'address'
                    },
                    {
                        internalType: 'string',
                        name: 'schema',
                        type: 'string'
                    }
                ],
                internalType: 'struct SchemaRecord',
                name: '',
                type: 'tuple'
            }
        ],
        stateMutability: 'view',
        type: 'function'
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: 'smartAccount',
                type: 'address'
            }
        ],
        name: 'findTrustedAttesters',
        outputs: [
            {
                internalType: 'address[]',
                name: 'attesters',
                type: 'address[]'
            }
        ],
        stateMutability: 'view',
        type: 'function'
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: 'address',
                        name: 'moduleAddress',
                        type: 'address'
                    },
                    {
                        internalType: 'uint48',
                        name: 'expirationTime',
                        type: 'uint48'
                    },
                    {
                        internalType: 'bytes',
                        name: 'data',
                        type: 'bytes'
                    },
                    {
                        internalType: 'ModuleType[]',
                        name: 'moduleTypes',
                        type: 'uint256[]'
                    }
                ],
                internalType: 'struct AttestationRequest',
                name: 'request',
                type: 'tuple'
            },
            {
                internalType: 'address',
                name: 'attester',
                type: 'address'
            }
        ],
        name: 'getDigest',
        outputs: [
            {
                internalType: 'bytes32',
                name: 'digest',
                type: 'bytes32'
            }
        ],
        stateMutability: 'view',
        type: 'function'
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: 'address',
                        name: 'moduleAddress',
                        type: 'address'
                    }
                ],
                internalType: 'struct RevocationRequest[]',
                name: 'requests',
                type: 'tuple[]'
            },
            {
                internalType: 'address',
                name: 'attester',
                type: 'address'
            }
        ],
        name: 'getDigest',
        outputs: [
            {
                internalType: 'bytes32',
                name: 'digest',
                type: 'bytes32'
            }
        ],
        stateMutability: 'view',
        type: 'function'
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: 'address',
                        name: 'moduleAddress',
                        type: 'address'
                    }
                ],
                internalType: 'struct RevocationRequest',
                name: 'request',
                type: 'tuple'
            },
            {
                internalType: 'address',
                name: 'attester',
                type: 'address'
            }
        ],
        name: 'getDigest',
        outputs: [
            {
                internalType: 'bytes32',
                name: 'digest',
                type: 'bytes32'
            }
        ],
        stateMutability: 'view',
        type: 'function'
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: 'address',
                        name: 'moduleAddress',
                        type: 'address'
                    },
                    {
                        internalType: 'uint48',
                        name: 'expirationTime',
                        type: 'uint48'
                    },
                    {
                        internalType: 'bytes',
                        name: 'data',
                        type: 'bytes'
                    },
                    {
                        internalType: 'ModuleType[]',
                        name: 'moduleTypes',
                        type: 'uint256[]'
                    }
                ],
                internalType: 'struct AttestationRequest[]',
                name: 'requests',
                type: 'tuple[]'
            },
            {
                internalType: 'address',
                name: 'attester',
                type: 'address'
            }
        ],
        name: 'getDigest',
        outputs: [
            {
                internalType: 'bytes32',
                name: 'digest',
                type: 'bytes32'
            }
        ],
        stateMutability: 'view',
        type: 'function'
    },
    {
        inputs: [
            {
                internalType: 'ResolverUID',
                name: 'resolverUID',
                type: 'bytes32'
            },
            {
                internalType: 'address',
                name: 'moduleAddress',
                type: 'address'
            },
            {
                internalType: 'bytes',
                name: 'metadata',
                type: 'bytes'
            },
            {
                internalType: 'bytes',
                name: 'resolverContext',
                type: 'bytes'
            }
        ],
        name: 'registerModule',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function'
    },
    {
        inputs: [
            {
                internalType: 'contract IExternalResolver',
                name: 'resolver',
                type: 'address'
            }
        ],
        name: 'registerResolver',
        outputs: [
            {
                internalType: 'ResolverUID',
                name: 'uid',
                type: 'bytes32'
            }
        ],
        stateMutability: 'nonpayable',
        type: 'function'
    },
    {
        inputs: [
            {
                internalType: 'string',
                name: 'schema',
                type: 'string'
            },
            {
                internalType: 'contract IExternalSchemaValidator',
                name: 'validator',
                type: 'address'
            }
        ],
        name: 'registerSchema',
        outputs: [
            {
                internalType: 'SchemaUID',
                name: 'uid',
                type: 'bytes32'
            }
        ],
        stateMutability: 'nonpayable',
        type: 'function'
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: 'address',
                        name: 'moduleAddress',
                        type: 'address'
                    }
                ],
                internalType: 'struct RevocationRequest[]',
                name: 'requests',
                type: 'tuple[]'
            }
        ],
        name: 'revoke',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function'
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: 'attester',
                type: 'address'
            },
            {
                components: [
                    {
                        internalType: 'address',
                        name: 'moduleAddress',
                        type: 'address'
                    }
                ],
                internalType: 'struct RevocationRequest[]',
                name: 'requests',
                type: 'tuple[]'
            },
            {
                internalType: 'bytes',
                name: 'signature',
                type: 'bytes'
            }
        ],
        name: 'revoke',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function'
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: 'address',
                        name: 'moduleAddress',
                        type: 'address'
                    }
                ],
                internalType: 'struct RevocationRequest',
                name: 'request',
                type: 'tuple'
            }
        ],
        name: 'revoke',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function'
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: 'attester',
                type: 'address'
            },
            {
                components: [
                    {
                        internalType: 'address',
                        name: 'moduleAddress',
                        type: 'address'
                    }
                ],
                internalType: 'struct RevocationRequest',
                name: 'request',
                type: 'tuple'
            },
            {
                internalType: 'bytes',
                name: 'signature',
                type: 'bytes'
            }
        ],
        name: 'revoke',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function'
    },
    {
        inputs: [
            {
                internalType: 'ResolverUID',
                name: 'uid',
                type: 'bytes32'
            },
            {
                internalType: 'contract IExternalResolver',
                name: 'resolver',
                type: 'address'
            }
        ],
        name: 'setResolver',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function'
    },
    {
        inputs: [
            {
                internalType: 'ResolverUID',
                name: 'uid',
                type: 'bytes32'
            },
            {
                internalType: 'address',
                name: 'newOwner',
                type: 'address'
            }
        ],
        name: 'transferResolverOwnership',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function'
    },
    {
        inputs: [
            {
                internalType: 'uint8',
                name: 'threshold',
                type: 'uint8'
            },
            {
                internalType: 'address[]',
                name: 'attesters',
                type: 'address[]'
            }
        ],
        name: 'trustAttesters',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function'
    }
]; //# sourceMappingURL=abi.js.map
}}),
"[project]/node_modules/@rhinestone/module-sdk/_esm/module/registry/constants.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "MOCK_ATTESTER_ADDRESS": (()=>MOCK_ATTESTER_ADDRESS),
    "REGISTRY_ADDRESS": (()=>REGISTRY_ADDRESS),
    "RHINESTONE_ATTESTER_ADDRESS": (()=>RHINESTONE_ATTESTER_ADDRESS)
});
const REGISTRY_ADDRESS = '0x000000000069E2a187AEFFb852bF3cCdC95151B2';
const RHINESTONE_ATTESTER_ADDRESS = '0x000000333034E9f539ce08819E12c1b8Cb29084d';
const MOCK_ATTESTER_ADDRESS = '0xA4C777199658a41688E9488c4EcbD7a2925Cc23A'; //# sourceMappingURL=constants.js.map
}}),
"[project]/node_modules/@rhinestone/module-sdk/_esm/module/registry/usage.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "fetchRegistryModules": (()=>fetchRegistryModules),
    "findTrustedAttesters": (()=>findTrustedAttesters),
    "getTrustAttestersAction": (()=>getTrustAttestersAction)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$common$2f$queries$2f$registry$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@rhinestone/module-sdk/_esm/common/queries/registry.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodeFunctionData$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/utils/abi/encodeFunctionData.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$registry$2f$abi$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@rhinestone/module-sdk/_esm/module/registry/abi.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$registry$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@rhinestone/module-sdk/_esm/module/registry/constants.js [app-rsc] (ecmascript)");
;
;
;
;
const fetchRegistryModules = ({ client })=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$common$2f$queries$2f$registry$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getRegistryModules"])({
        client
    });
const getTrustAttestersAction = ({ attesters, threshold })=>{
    const data = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodeFunctionData$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["encodeFunctionData"])({
        functionName: 'trustAttesters',
        abi: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$registry$2f$abi$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["abi"],
        args: [
            threshold,
            attesters
        ]
    });
    return {
        to: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$registry$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["REGISTRY_ADDRESS"],
        target: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$registry$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["REGISTRY_ADDRESS"],
        value: BigInt(0),
        callData: data,
        data
    };
};
const findTrustedAttesters = async ({ client, accountAddress })=>{
    return await client.readContract({
        address: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$registry$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["REGISTRY_ADDRESS"],
        abi: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$registry$2f$abi$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["abi"],
        functionName: 'findTrustedAttesters',
        args: [
            accountAddress
        ]
    });
}; //# sourceMappingURL=usage.js.map
}}),
"[project]/node_modules/@rhinestone/module-sdk/_esm/module/smart-sessions/policies/universal-action-policy/constants.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "MAX_RULES": (()=>MAX_RULES),
    "UNIVERSAL_ACTION_POLICY_ADDRESS": (()=>UNIVERSAL_ACTION_POLICY_ADDRESS)
});
const UNIVERSAL_ACTION_POLICY_ADDRESS = '0x0000006DDA6c463511C4e9B05CFc34C1247fCF1F';
const MAX_RULES = 16; //# sourceMappingURL=constants.js.map
}}),
"[project]/node_modules/@rhinestone/module-sdk/_esm/module/smart-sessions/policies/universal-action-policy/abi.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "abi": (()=>abi)
});
const abi = [
    {
        components: [
            {
                name: 'valueLimitPerUse',
                type: 'uint256'
            },
            {
                components: [
                    {
                        name: 'length',
                        type: 'uint256'
                    },
                    {
                        components: [
                            {
                                name: 'condition',
                                type: 'uint8'
                            },
                            {
                                name: 'offset',
                                type: 'uint64'
                            },
                            {
                                name: 'isLimited',
                                type: 'bool'
                            },
                            {
                                name: 'ref',
                                type: 'bytes32'
                            },
                            {
                                components: [
                                    {
                                        name: 'limit',
                                        type: 'uint256'
                                    },
                                    {
                                        name: 'used',
                                        type: 'uint256'
                                    }
                                ],
                                name: 'usage',
                                type: 'tuple'
                            }
                        ],
                        name: 'rules',
                        type: 'tuple[16]'
                    }
                ],
                name: 'paramRules',
                type: 'tuple'
            }
        ],
        name: 'ActionConfig',
        type: 'tuple'
    }
]; //# sourceMappingURL=abi.js.map
}}),
"[project]/node_modules/@rhinestone/module-sdk/_esm/module/smart-sessions/policies/universal-action-policy/installation.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "getUniversalActionPolicy": (()=>getUniversalActionPolicy)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$policies$2f$universal$2d$action$2d$policy$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@rhinestone/module-sdk/_esm/module/smart-sessions/policies/universal-action-policy/constants.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodeAbiParameters$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/utils/abi/encodeAbiParameters.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$policies$2f$universal$2d$action$2d$policy$2f$abi$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@rhinestone/module-sdk/_esm/module/smart-sessions/policies/universal-action-policy/abi.js [app-rsc] (ecmascript)");
;
;
;
const getUniversalActionPolicy = (actionConfig)=>{
    if (actionConfig.paramRules.rules.length > __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$policies$2f$universal$2d$action$2d$policy$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["MAX_RULES"]) {
        throw new Error(`Max number of rules is ${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$policies$2f$universal$2d$action$2d$policy$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["MAX_RULES"]}`);
    }
    return {
        policy: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$policies$2f$universal$2d$action$2d$policy$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["UNIVERSAL_ACTION_POLICY_ADDRESS"],
        address: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$policies$2f$universal$2d$action$2d$policy$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["UNIVERSAL_ACTION_POLICY_ADDRESS"],
        initData: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodeAbiParameters$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["encodeAbiParameters"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$policies$2f$universal$2d$action$2d$policy$2f$abi$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["abi"], [
            {
                valueLimitPerUse: actionConfig.valueLimitPerUse,
                paramRules: {
                    length: actionConfig.paramRules.length,
                    rules: actionConfig.paramRules.rules
                }
            }
        ])
    };
}; //# sourceMappingURL=installation.js.map
}}),
"[project]/node_modules/@rhinestone/module-sdk/_esm/module/smart-sessions/policies/time-frame-policy/constants.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "TIME_FRAME_POLICY_ADDRESS": (()=>TIME_FRAME_POLICY_ADDRESS)
});
const TIME_FRAME_POLICY_ADDRESS = '0x8177451511dE0577b911C254E9551D981C26dc72'; //# sourceMappingURL=constants.js.map
}}),
"[project]/node_modules/@rhinestone/module-sdk/_esm/module/smart-sessions/policies/time-frame-policy/installation.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "getTimeFramePolicy": (()=>getTimeFramePolicy)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$policies$2f$time$2d$frame$2d$policy$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@rhinestone/module-sdk/_esm/module/smart-sessions/policies/time-frame-policy/constants.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodePacked$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/utils/abi/encodePacked.js [app-rsc] (ecmascript)");
;
;
const getTimeFramePolicy = (param)=>{
    return {
        policy: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$policies$2f$time$2d$frame$2d$policy$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["TIME_FRAME_POLICY_ADDRESS"],
        address: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$policies$2f$time$2d$frame$2d$policy$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["TIME_FRAME_POLICY_ADDRESS"],
        initData: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodePacked$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["encodePacked"])([
            'uint128',
            'uint128'
        ], [
            BigInt(param.validUntil),
            BigInt(param.validAfter)
        ])
    };
}; //# sourceMappingURL=installation.js.map
}}),
"[project]/node_modules/@rhinestone/module-sdk/_esm/module/smart-sessions/policies/value-limit-policy/constants.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "VALUE_LIMIT_POLICY_ADDRESS": (()=>VALUE_LIMIT_POLICY_ADDRESS)
});
const VALUE_LIMIT_POLICY_ADDRESS = '0x730DA93267E7E513e932301B47F2ac7D062abC83'; //# sourceMappingURL=constants.js.map
}}),
"[project]/node_modules/@rhinestone/module-sdk/_esm/module/smart-sessions/policies/value-limit-policy/installation.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "getValueLimitPolicy": (()=>getValueLimitPolicy)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$policies$2f$value$2d$limit$2d$policy$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@rhinestone/module-sdk/_esm/module/smart-sessions/policies/value-limit-policy/constants.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodeAbiParameters$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/utils/abi/encodeAbiParameters.js [app-rsc] (ecmascript)");
;
;
const getValueLimitPolicy = (params)=>{
    return {
        policy: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$policies$2f$value$2d$limit$2d$policy$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["VALUE_LIMIT_POLICY_ADDRESS"],
        address: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$policies$2f$value$2d$limit$2d$policy$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["VALUE_LIMIT_POLICY_ADDRESS"],
        initData: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodeAbiParameters$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["encodeAbiParameters"])([
            {
                type: 'uint256'
            }
        ], [
            params.limit
        ])
    };
}; //# sourceMappingURL=installation.js.map
}}),
"[project]/node_modules/@rhinestone/module-sdk/_esm/module/smart-sessions/policies/usage-limit-policy/constants.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "USAGE_LIMIT_POLICY_ADDRESS": (()=>USAGE_LIMIT_POLICY_ADDRESS)
});
const USAGE_LIMIT_POLICY_ADDRESS = '0x1F34eF8311345A3A4a4566aF321b313052F51493'; //# sourceMappingURL=constants.js.map
}}),
"[project]/node_modules/@rhinestone/module-sdk/_esm/module/smart-sessions/policies/usage-limit-policy/installation.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "getUsageLimitPolicy": (()=>getUsageLimitPolicy)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$policies$2f$usage$2d$limit$2d$policy$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@rhinestone/module-sdk/_esm/module/smart-sessions/policies/usage-limit-policy/constants.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodePacked$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/utils/abi/encodePacked.js [app-rsc] (ecmascript)");
;
;
const getUsageLimitPolicy = (params)=>{
    return {
        policy: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$policies$2f$usage$2d$limit$2d$policy$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["USAGE_LIMIT_POLICY_ADDRESS"],
        address: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$policies$2f$usage$2d$limit$2d$policy$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["USAGE_LIMIT_POLICY_ADDRESS"],
        initData: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodePacked$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["encodePacked"])([
            'uint128'
        ], [
            params.limit
        ])
    };
}; //# sourceMappingURL=installation.js.map
}}),
"[project]/node_modules/@rhinestone/module-sdk/_esm/module/smart-sessions/policies/spending-limits-policy/constants.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "SPENDING_LIMITS_POLICY_ADDRESS": (()=>SPENDING_LIMITS_POLICY_ADDRESS)
});
const SPENDING_LIMITS_POLICY_ADDRESS = '0x00000088D48cF102A8Cdb0137A9b173f957c6343'; //# sourceMappingURL=constants.js.map
}}),
"[project]/node_modules/@rhinestone/module-sdk/_esm/module/smart-sessions/policies/spending-limits-policy/installation.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "getSpendingLimitsPolicy": (()=>getSpendingLimitsPolicy)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$policies$2f$spending$2d$limits$2d$policy$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@rhinestone/module-sdk/_esm/module/smart-sessions/policies/spending-limits-policy/constants.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodeAbiParameters$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/utils/abi/encodeAbiParameters.js [app-rsc] (ecmascript)");
;
;
const getSpendingLimitsPolicy = (params)=>{
    return {
        policy: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$policies$2f$spending$2d$limits$2d$policy$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SPENDING_LIMITS_POLICY_ADDRESS"],
        address: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$policies$2f$spending$2d$limits$2d$policy$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SPENDING_LIMITS_POLICY_ADDRESS"],
        initData: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodeAbiParameters$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["encodeAbiParameters"])([
            {
                type: 'address[]'
            },
            {
                type: 'uint256[]'
            }
        ], [
            params.map(({ token })=>token),
            params.map(({ limit })=>limit)
        ])
    };
}; //# sourceMappingURL=installation.js.map
}}),
"[project]/node_modules/@rhinestone/module-sdk/_esm/module/smart-sessions/types.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "SmartSessionMode": (()=>SmartSessionMode)
});
const SmartSessionMode = {
    USE: '0x00',
    ENABLE: '0x01',
    UNSAFE_ENABLE: '0x02'
}; //# sourceMappingURL=types.js.map
}}),
"[project]/node_modules/@rhinestone/module-sdk/_esm/module/smart-sessions/abi.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "abi": (()=>abi),
    "enableSessionAbi": (()=>enableSessionAbi),
    "encodeEnableSessionSignatureAbi": (()=>encodeEnableSessionSignatureAbi),
    "installSmartSessionsAbi": (()=>installSmartSessionsAbi)
});
const installSmartSessionsAbi = [
    {
        components: [
            {
                internalType: 'contract ISessionValidator',
                name: 'sessionValidator',
                type: 'address'
            },
            {
                internalType: 'bytes',
                name: 'sessionValidatorInitData',
                type: 'bytes'
            },
            {
                internalType: 'bytes32',
                name: 'salt',
                type: 'bytes32'
            },
            {
                components: [
                    {
                        internalType: 'address',
                        name: 'policy',
                        type: 'address'
                    },
                    {
                        internalType: 'bytes',
                        name: 'initData',
                        type: 'bytes'
                    }
                ],
                internalType: 'struct PolicyData[]',
                name: 'userOpPolicies',
                type: 'tuple[]'
            },
            {
                components: [
                    {
                        components: [
                            {
                                internalType: 'bytes32',
                                name: 'appDomainSeparator',
                                type: 'bytes32'
                            },
                            {
                                internalType: 'string[]',
                                name: 'contentName',
                                type: 'string[]'
                            }
                        ],
                        internalType: 'struct ERC7739Context[]',
                        name: 'allowedERC7739Content',
                        type: 'tuple[]'
                    },
                    {
                        components: [
                            {
                                internalType: 'address',
                                name: 'policy',
                                type: 'address'
                            },
                            {
                                internalType: 'bytes',
                                name: 'initData',
                                type: 'bytes'
                            }
                        ],
                        internalType: 'struct PolicyData[]',
                        name: 'erc1271Policies',
                        type: 'tuple[]'
                    }
                ],
                internalType: 'struct ERC7739Data',
                name: 'erc7739Policies',
                type: 'tuple'
            },
            {
                components: [
                    {
                        internalType: 'bytes4',
                        name: 'actionTargetSelector',
                        type: 'bytes4'
                    },
                    {
                        internalType: 'address',
                        name: 'actionTarget',
                        type: 'address'
                    },
                    {
                        components: [
                            {
                                internalType: 'address',
                                name: 'policy',
                                type: 'address'
                            },
                            {
                                internalType: 'bytes',
                                name: 'initData',
                                type: 'bytes'
                            }
                        ],
                        internalType: 'struct PolicyData[]',
                        name: 'actionPolicies',
                        type: 'tuple[]'
                    }
                ],
                internalType: 'struct ActionData[]',
                name: 'actions',
                type: 'tuple[]'
            },
            {
                internalType: 'bool',
                name: 'permitERC4337Paymaster',
                type: 'bool'
            }
        ],
        internalType: 'struct Session[]',
        name: 'sessions',
        type: 'tuple[]'
    }
];
const enableSessionAbi = {
    components: [
        {
            type: 'uint8',
            name: 'chainDigestIndex'
        },
        {
            type: 'tuple[]',
            components: [
                {
                    internalType: 'uint64',
                    name: 'chainId',
                    type: 'uint64'
                },
                {
                    internalType: 'bytes32',
                    name: 'sessionDigest',
                    type: 'bytes32'
                }
            ],
            name: 'hashesAndChainIds'
        },
        {
            components: [
                {
                    internalType: 'contract ISessionValidator',
                    name: 'sessionValidator',
                    type: 'address'
                },
                {
                    internalType: 'bytes',
                    name: 'sessionValidatorInitData',
                    type: 'bytes'
                },
                {
                    internalType: 'bytes32',
                    name: 'salt',
                    type: 'bytes32'
                },
                {
                    components: [
                        {
                            internalType: 'address',
                            name: 'policy',
                            type: 'address'
                        },
                        {
                            internalType: 'bytes',
                            name: 'initData',
                            type: 'bytes'
                        }
                    ],
                    internalType: 'struct PolicyData[]',
                    name: 'userOpPolicies',
                    type: 'tuple[]'
                },
                {
                    components: [
                        {
                            components: [
                                {
                                    internalType: 'bytes32',
                                    name: 'appDomainSeparator',
                                    type: 'bytes32'
                                },
                                {
                                    internalType: 'string[]',
                                    name: 'contentName',
                                    type: 'string[]'
                                }
                            ],
                            internalType: 'struct ERC7739Context[]',
                            name: 'allowedERC7739Content',
                            type: 'tuple[]'
                        },
                        {
                            components: [
                                {
                                    internalType: 'address',
                                    name: 'policy',
                                    type: 'address'
                                },
                                {
                                    internalType: 'bytes',
                                    name: 'initData',
                                    type: 'bytes'
                                }
                            ],
                            internalType: 'struct PolicyData[]',
                            name: 'erc1271Policies',
                            type: 'tuple[]'
                        }
                    ],
                    internalType: 'struct ERC7739Data',
                    name: 'erc7739Policies',
                    type: 'tuple'
                },
                {
                    components: [
                        {
                            internalType: 'bytes4',
                            name: 'actionTargetSelector',
                            type: 'bytes4'
                        },
                        {
                            internalType: 'address',
                            name: 'actionTarget',
                            type: 'address'
                        },
                        {
                            components: [
                                {
                                    internalType: 'address',
                                    name: 'policy',
                                    type: 'address'
                                },
                                {
                                    internalType: 'bytes',
                                    name: 'initData',
                                    type: 'bytes'
                                }
                            ],
                            internalType: 'struct PolicyData[]',
                            name: 'actionPolicies',
                            type: 'tuple[]'
                        }
                    ],
                    internalType: 'struct ActionData[]',
                    name: 'actions',
                    type: 'tuple[]'
                },
                {
                    internalType: 'bool',
                    name: 'permitERC4337Paymaster',
                    type: 'bool'
                }
            ],
            internalType: 'struct Session',
            name: 'sessionToEnable',
            type: 'tuple'
        },
        {
            type: 'bytes',
            name: 'permissionEnableSig'
        }
    ],
    internalType: 'struct EnableSession',
    name: 'enableSession',
    type: 'tuple'
};
const encodeEnableSessionSignatureAbi = [
    enableSessionAbi,
    {
        type: 'bytes'
    }
];
const abi = [
    {
        type: 'function',
        name: 'areActionsEnabled',
        inputs: [
            {
                name: 'account',
                type: 'address',
                internalType: 'address'
            },
            {
                name: 'permissionId',
                type: 'bytes32',
                internalType: 'PermissionId'
            },
            {
                name: 'actions',
                type: 'tuple[]',
                internalType: 'struct ActionData[]',
                components: [
                    {
                        name: 'actionTargetSelector',
                        type: 'bytes4',
                        internalType: 'bytes4'
                    },
                    {
                        name: 'actionTarget',
                        type: 'address',
                        internalType: 'address'
                    },
                    {
                        name: 'actionPolicies',
                        type: 'tuple[]',
                        internalType: 'struct PolicyData[]',
                        components: [
                            {
                                name: 'policy',
                                type: 'address',
                                internalType: 'address'
                            },
                            {
                                name: 'initData',
                                type: 'bytes',
                                internalType: 'bytes'
                            }
                        ]
                    }
                ]
            }
        ],
        outputs: [
            {
                name: '',
                type: 'bool',
                internalType: 'bool'
            }
        ],
        stateMutability: 'view'
    },
    {
        type: 'function',
        name: 'areERC1271PoliciesEnabled',
        inputs: [
            {
                name: 'account',
                type: 'address',
                internalType: 'address'
            },
            {
                name: 'permissionId',
                type: 'bytes32',
                internalType: 'PermissionId'
            },
            {
                name: 'erc1271Policies',
                type: 'tuple[]',
                internalType: 'struct PolicyData[]',
                components: [
                    {
                        name: 'policy',
                        type: 'address',
                        internalType: 'address'
                    },
                    {
                        name: 'initData',
                        type: 'bytes',
                        internalType: 'bytes'
                    }
                ]
            }
        ],
        outputs: [
            {
                name: '',
                type: 'bool',
                internalType: 'bool'
            }
        ],
        stateMutability: 'view'
    },
    {
        type: 'function',
        name: 'areUserOpPoliciesEnabled',
        inputs: [
            {
                name: 'account',
                type: 'address',
                internalType: 'address'
            },
            {
                name: 'permissionId',
                type: 'bytes32',
                internalType: 'PermissionId'
            },
            {
                name: 'userOpPolicies',
                type: 'tuple[]',
                internalType: 'struct PolicyData[]',
                components: [
                    {
                        name: 'policy',
                        type: 'address',
                        internalType: 'address'
                    },
                    {
                        name: 'initData',
                        type: 'bytes',
                        internalType: 'bytes'
                    }
                ]
            }
        ],
        outputs: [
            {
                name: '',
                type: 'bool',
                internalType: 'bool'
            }
        ],
        stateMutability: 'view'
    },
    {
        type: 'function',
        name: 'disableActionId',
        inputs: [
            {
                name: 'permissionId',
                type: 'bytes32',
                internalType: 'PermissionId'
            },
            {
                name: 'actionId',
                type: 'bytes32',
                internalType: 'ActionId'
            }
        ],
        outputs: [],
        stateMutability: 'nonpayable'
    },
    {
        type: 'function',
        name: 'disableActionPolicies',
        inputs: [
            {
                name: 'permissionId',
                type: 'bytes32',
                internalType: 'PermissionId'
            },
            {
                name: 'actionId',
                type: 'bytes32',
                internalType: 'ActionId'
            },
            {
                name: 'policies',
                type: 'address[]',
                internalType: 'address[]'
            }
        ],
        outputs: [],
        stateMutability: 'nonpayable'
    },
    {
        type: 'function',
        name: 'disableERC1271Policies',
        inputs: [
            {
                name: 'permissionId',
                type: 'bytes32',
                internalType: 'PermissionId'
            },
            {
                name: 'policies',
                type: 'address[]',
                internalType: 'address[]'
            },
            {
                name: 'contexts',
                type: 'tuple[]',
                internalType: 'struct ERC7739Context[]',
                components: [
                    {
                        name: 'appDomainSeparator',
                        type: 'bytes32',
                        internalType: 'bytes32'
                    },
                    {
                        name: 'contentName',
                        type: 'string[]',
                        internalType: 'string[]'
                    }
                ]
            }
        ],
        outputs: [],
        stateMutability: 'nonpayable'
    },
    {
        type: 'function',
        name: 'disableUserOpPolicies',
        inputs: [
            {
                name: 'permissionId',
                type: 'bytes32',
                internalType: 'PermissionId'
            },
            {
                name: 'policies',
                type: 'address[]',
                internalType: 'address[]'
            }
        ],
        outputs: [],
        stateMutability: 'nonpayable'
    },
    {
        type: 'function',
        name: 'enableActionPolicies',
        inputs: [
            {
                name: 'permissionId',
                type: 'bytes32',
                internalType: 'PermissionId'
            },
            {
                name: 'actionPolicies',
                type: 'tuple[]',
                internalType: 'struct ActionData[]',
                components: [
                    {
                        name: 'actionTargetSelector',
                        type: 'bytes4',
                        internalType: 'bytes4'
                    },
                    {
                        name: 'actionTarget',
                        type: 'address',
                        internalType: 'address'
                    },
                    {
                        name: 'actionPolicies',
                        type: 'tuple[]',
                        internalType: 'struct PolicyData[]',
                        components: [
                            {
                                name: 'policy',
                                type: 'address',
                                internalType: 'address'
                            },
                            {
                                name: 'initData',
                                type: 'bytes',
                                internalType: 'bytes'
                            }
                        ]
                    }
                ]
            }
        ],
        outputs: [],
        stateMutability: 'nonpayable'
    },
    {
        type: 'function',
        name: 'enableERC1271Policies',
        inputs: [
            {
                name: 'permissionId',
                type: 'bytes32',
                internalType: 'PermissionId'
            },
            {
                name: 'erc1271Policies',
                type: 'tuple',
                internalType: 'struct ERC7739Data',
                components: [
                    {
                        name: 'allowedERC7739Content',
                        type: 'tuple[]',
                        internalType: 'struct ERC7739Context[]',
                        components: [
                            {
                                name: 'appDomainSeparator',
                                type: 'bytes32',
                                internalType: 'bytes32'
                            },
                            {
                                name: 'contentName',
                                type: 'string[]',
                                internalType: 'string[]'
                            }
                        ]
                    },
                    {
                        name: 'erc1271Policies',
                        type: 'tuple[]',
                        internalType: 'struct PolicyData[]',
                        components: [
                            {
                                name: 'policy',
                                type: 'address',
                                internalType: 'address'
                            },
                            {
                                name: 'initData',
                                type: 'bytes',
                                internalType: 'bytes'
                            }
                        ]
                    }
                ]
            }
        ],
        outputs: [],
        stateMutability: 'nonpayable'
    },
    {
        type: 'function',
        name: 'enableSessions',
        inputs: [
            {
                name: 'sessions',
                type: 'tuple[]',
                internalType: 'struct Session[]',
                components: [
                    {
                        name: 'sessionValidator',
                        type: 'address',
                        internalType: 'contract ISessionValidator'
                    },
                    {
                        name: 'sessionValidatorInitData',
                        type: 'bytes',
                        internalType: 'bytes'
                    },
                    {
                        name: 'salt',
                        type: 'bytes32',
                        internalType: 'bytes32'
                    },
                    {
                        name: 'userOpPolicies',
                        type: 'tuple[]',
                        internalType: 'struct PolicyData[]',
                        components: [
                            {
                                name: 'policy',
                                type: 'address',
                                internalType: 'address'
                            },
                            {
                                name: 'initData',
                                type: 'bytes',
                                internalType: 'bytes'
                            }
                        ]
                    },
                    {
                        name: 'erc7739Policies',
                        type: 'tuple',
                        internalType: 'struct ERC7739Data',
                        components: [
                            {
                                name: 'allowedERC7739Content',
                                type: 'tuple[]',
                                internalType: 'struct ERC7739Context[]',
                                components: [
                                    {
                                        name: 'appDomainSeparator',
                                        type: 'bytes32',
                                        internalType: 'bytes32'
                                    },
                                    {
                                        name: 'contentName',
                                        type: 'string[]',
                                        internalType: 'string[]'
                                    }
                                ]
                            },
                            {
                                name: 'erc1271Policies',
                                type: 'tuple[]',
                                internalType: 'struct PolicyData[]',
                                components: [
                                    {
                                        name: 'policy',
                                        type: 'address',
                                        internalType: 'address'
                                    },
                                    {
                                        name: 'initData',
                                        type: 'bytes',
                                        internalType: 'bytes'
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        name: 'actions',
                        type: 'tuple[]',
                        internalType: 'struct ActionData[]',
                        components: [
                            {
                                name: 'actionTargetSelector',
                                type: 'bytes4',
                                internalType: 'bytes4'
                            },
                            {
                                name: 'actionTarget',
                                type: 'address',
                                internalType: 'address'
                            },
                            {
                                name: 'actionPolicies',
                                type: 'tuple[]',
                                internalType: 'struct PolicyData[]',
                                components: [
                                    {
                                        name: 'policy',
                                        type: 'address',
                                        internalType: 'address'
                                    },
                                    {
                                        name: 'initData',
                                        type: 'bytes',
                                        internalType: 'bytes'
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        name: 'permitERC4337Paymaster',
                        type: 'bool',
                        internalType: 'bool'
                    }
                ]
            }
        ],
        outputs: [
            {
                name: 'permissionIds',
                type: 'bytes32[]',
                internalType: 'PermissionId[]'
            }
        ],
        stateMutability: 'nonpayable'
    },
    {
        type: 'function',
        name: 'enableUserOpPolicies',
        inputs: [
            {
                name: 'permissionId',
                type: 'bytes32',
                internalType: 'PermissionId'
            },
            {
                name: 'userOpPolicies',
                type: 'tuple[]',
                internalType: 'struct PolicyData[]',
                components: [
                    {
                        name: 'policy',
                        type: 'address',
                        internalType: 'address'
                    },
                    {
                        name: 'initData',
                        type: 'bytes',
                        internalType: 'bytes'
                    }
                ]
            }
        ],
        outputs: [],
        stateMutability: 'nonpayable'
    },
    {
        type: 'function',
        name: 'getActionPolicies',
        inputs: [
            {
                name: 'account',
                type: 'address',
                internalType: 'address'
            },
            {
                name: 'permissionId',
                type: 'bytes32',
                internalType: 'PermissionId'
            },
            {
                name: 'actionId',
                type: 'bytes32',
                internalType: 'ActionId'
            }
        ],
        outputs: [
            {
                name: '',
                type: 'address[]',
                internalType: 'address[]'
            }
        ],
        stateMutability: 'view'
    },
    {
        type: 'function',
        name: 'getERC1271Policies',
        inputs: [
            {
                name: 'account',
                type: 'address',
                internalType: 'address'
            },
            {
                name: 'permissionId',
                type: 'bytes32',
                internalType: 'PermissionId'
            }
        ],
        outputs: [
            {
                name: '',
                type: 'address[]',
                internalType: 'address[]'
            }
        ],
        stateMutability: 'view'
    },
    {
        type: 'function',
        name: 'getEnabledActions',
        inputs: [
            {
                name: 'account',
                type: 'address',
                internalType: 'address'
            },
            {
                name: 'permissionId',
                type: 'bytes32',
                internalType: 'PermissionId'
            }
        ],
        outputs: [
            {
                name: '',
                type: 'bytes32[]',
                internalType: 'bytes32[]'
            }
        ],
        stateMutability: 'view'
    },
    {
        type: 'function',
        name: 'getEnabledERC7739Content',
        inputs: [
            {
                name: 'account',
                type: 'address',
                internalType: 'address'
            },
            {
                name: 'permissionId',
                type: 'bytes32',
                internalType: 'PermissionId'
            }
        ],
        outputs: [
            {
                name: 'enabledERC7739ContentHashes',
                type: 'tuple[]',
                internalType: 'struct ERC7739ContextHashes[]',
                components: [
                    {
                        name: 'appDomainSeparator',
                        type: 'bytes32',
                        internalType: 'bytes32'
                    },
                    {
                        name: 'contentNameHashes',
                        type: 'bytes32[]',
                        internalType: 'bytes32[]'
                    }
                ]
            }
        ],
        stateMutability: 'view'
    },
    {
        type: 'function',
        name: 'getNonce',
        inputs: [
            {
                name: 'permissionId',
                type: 'bytes32',
                internalType: 'PermissionId'
            },
            {
                name: 'account',
                type: 'address',
                internalType: 'address'
            }
        ],
        outputs: [
            {
                name: '',
                type: 'uint256',
                internalType: 'uint256'
            }
        ],
        stateMutability: 'view'
    },
    {
        type: 'function',
        name: 'getPermissionIDs',
        inputs: [
            {
                name: 'account',
                type: 'address',
                internalType: 'address'
            }
        ],
        outputs: [
            {
                name: 'permissionIds',
                type: 'bytes32[]',
                internalType: 'PermissionId[]'
            }
        ],
        stateMutability: 'view'
    },
    {
        type: 'function',
        name: 'getPermissionId',
        inputs: [
            {
                name: 'session',
                type: 'tuple',
                internalType: 'struct Session',
                components: [
                    {
                        name: 'sessionValidator',
                        type: 'address',
                        internalType: 'contract ISessionValidator'
                    },
                    {
                        name: 'sessionValidatorInitData',
                        type: 'bytes',
                        internalType: 'bytes'
                    },
                    {
                        name: 'salt',
                        type: 'bytes32',
                        internalType: 'bytes32'
                    },
                    {
                        name: 'userOpPolicies',
                        type: 'tuple[]',
                        internalType: 'struct PolicyData[]',
                        components: [
                            {
                                name: 'policy',
                                type: 'address',
                                internalType: 'address'
                            },
                            {
                                name: 'initData',
                                type: 'bytes',
                                internalType: 'bytes'
                            }
                        ]
                    },
                    {
                        name: 'erc7739Policies',
                        type: 'tuple',
                        internalType: 'struct ERC7739Data',
                        components: [
                            {
                                name: 'allowedERC7739Content',
                                type: 'tuple[]',
                                internalType: 'struct ERC7739Context[]',
                                components: [
                                    {
                                        name: 'appDomainSeparator',
                                        type: 'bytes32',
                                        internalType: 'bytes32'
                                    },
                                    {
                                        name: 'contentName',
                                        type: 'string[]',
                                        internalType: 'string[]'
                                    }
                                ]
                            },
                            {
                                name: 'erc1271Policies',
                                type: 'tuple[]',
                                internalType: 'struct PolicyData[]',
                                components: [
                                    {
                                        name: 'policy',
                                        type: 'address',
                                        internalType: 'address'
                                    },
                                    {
                                        name: 'initData',
                                        type: 'bytes',
                                        internalType: 'bytes'
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        name: 'actions',
                        type: 'tuple[]',
                        internalType: 'struct ActionData[]',
                        components: [
                            {
                                name: 'actionTargetSelector',
                                type: 'bytes4',
                                internalType: 'bytes4'
                            },
                            {
                                name: 'actionTarget',
                                type: 'address',
                                internalType: 'address'
                            },
                            {
                                name: 'actionPolicies',
                                type: 'tuple[]',
                                internalType: 'struct PolicyData[]',
                                components: [
                                    {
                                        name: 'policy',
                                        type: 'address',
                                        internalType: 'address'
                                    },
                                    {
                                        name: 'initData',
                                        type: 'bytes',
                                        internalType: 'bytes'
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        name: 'permitERC4337Paymaster',
                        type: 'bool',
                        internalType: 'bool'
                    }
                ]
            }
        ],
        outputs: [
            {
                name: 'permissionId',
                type: 'bytes32',
                internalType: 'PermissionId'
            }
        ],
        stateMutability: 'pure'
    },
    {
        type: 'function',
        name: 'getSessionDigest',
        inputs: [
            {
                name: 'permissionId',
                type: 'bytes32',
                internalType: 'PermissionId'
            },
            {
                name: 'account',
                type: 'address',
                internalType: 'address'
            },
            {
                name: 'data',
                type: 'tuple',
                internalType: 'struct Session',
                components: [
                    {
                        name: 'sessionValidator',
                        type: 'address',
                        internalType: 'contract ISessionValidator'
                    },
                    {
                        name: 'sessionValidatorInitData',
                        type: 'bytes',
                        internalType: 'bytes'
                    },
                    {
                        name: 'salt',
                        type: 'bytes32',
                        internalType: 'bytes32'
                    },
                    {
                        name: 'userOpPolicies',
                        type: 'tuple[]',
                        internalType: 'struct PolicyData[]',
                        components: [
                            {
                                name: 'policy',
                                type: 'address',
                                internalType: 'address'
                            },
                            {
                                name: 'initData',
                                type: 'bytes',
                                internalType: 'bytes'
                            }
                        ]
                    },
                    {
                        name: 'erc7739Policies',
                        type: 'tuple',
                        internalType: 'struct ERC7739Data',
                        components: [
                            {
                                name: 'allowedERC7739Content',
                                type: 'tuple[]',
                                internalType: 'struct ERC7739Context[]',
                                components: [
                                    {
                                        name: 'appDomainSeparator',
                                        type: 'bytes32',
                                        internalType: 'bytes32'
                                    },
                                    {
                                        name: 'contentName',
                                        type: 'string[]',
                                        internalType: 'string[]'
                                    }
                                ]
                            },
                            {
                                name: 'erc1271Policies',
                                type: 'tuple[]',
                                internalType: 'struct PolicyData[]',
                                components: [
                                    {
                                        name: 'policy',
                                        type: 'address',
                                        internalType: 'address'
                                    },
                                    {
                                        name: 'initData',
                                        type: 'bytes',
                                        internalType: 'bytes'
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        name: 'actions',
                        type: 'tuple[]',
                        internalType: 'struct ActionData[]',
                        components: [
                            {
                                name: 'actionTargetSelector',
                                type: 'bytes4',
                                internalType: 'bytes4'
                            },
                            {
                                name: 'actionTarget',
                                type: 'address',
                                internalType: 'address'
                            },
                            {
                                name: 'actionPolicies',
                                type: 'tuple[]',
                                internalType: 'struct PolicyData[]',
                                components: [
                                    {
                                        name: 'policy',
                                        type: 'address',
                                        internalType: 'address'
                                    },
                                    {
                                        name: 'initData',
                                        type: 'bytes',
                                        internalType: 'bytes'
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        name: 'permitERC4337Paymaster',
                        type: 'bool',
                        internalType: 'bool'
                    }
                ]
            },
            {
                name: 'mode',
                type: 'uint8',
                internalType: 'enum SmartSessionMode'
            }
        ],
        outputs: [
            {
                name: '',
                type: 'bytes32',
                internalType: 'bytes32'
            }
        ],
        stateMutability: 'view'
    },
    {
        type: 'function',
        name: 'getSessionValidatorAndConfig',
        inputs: [
            {
                name: 'account',
                type: 'address',
                internalType: 'address'
            },
            {
                name: 'permissionId',
                type: 'bytes32',
                internalType: 'PermissionId'
            }
        ],
        outputs: [
            {
                name: 'sessionValidator',
                type: 'address',
                internalType: 'address'
            },
            {
                name: 'sessionValidatorData',
                type: 'bytes',
                internalType: 'bytes'
            }
        ],
        stateMutability: 'view'
    },
    {
        type: 'function',
        name: 'getUserOpPolicies',
        inputs: [
            {
                name: 'account',
                type: 'address',
                internalType: 'address'
            },
            {
                name: 'permissionId',
                type: 'bytes32',
                internalType: 'PermissionId'
            }
        ],
        outputs: [
            {
                name: '',
                type: 'address[]',
                internalType: 'address[]'
            }
        ],
        stateMutability: 'view'
    },
    {
        type: 'function',
        name: 'isActionIdEnabled',
        inputs: [
            {
                name: 'account',
                type: 'address',
                internalType: 'address'
            },
            {
                name: 'permissionId',
                type: 'bytes32',
                internalType: 'PermissionId'
            },
            {
                name: 'actionId',
                type: 'bytes32',
                internalType: 'ActionId'
            }
        ],
        outputs: [
            {
                name: '',
                type: 'bool',
                internalType: 'bool'
            }
        ],
        stateMutability: 'view'
    },
    {
        type: 'function',
        name: 'isActionPolicyEnabled',
        inputs: [
            {
                name: 'account',
                type: 'address',
                internalType: 'address'
            },
            {
                name: 'permissionId',
                type: 'bytes32',
                internalType: 'PermissionId'
            },
            {
                name: 'actionId',
                type: 'bytes32',
                internalType: 'ActionId'
            },
            {
                name: 'policy',
                type: 'address',
                internalType: 'address'
            }
        ],
        outputs: [
            {
                name: '',
                type: 'bool',
                internalType: 'bool'
            }
        ],
        stateMutability: 'view'
    },
    {
        type: 'function',
        name: 'isERC1271PolicyEnabled',
        inputs: [
            {
                name: 'account',
                type: 'address',
                internalType: 'address'
            },
            {
                name: 'permissionId',
                type: 'bytes32',
                internalType: 'PermissionId'
            },
            {
                name: 'policy',
                type: 'address',
                internalType: 'address'
            }
        ],
        outputs: [
            {
                name: '',
                type: 'bool',
                internalType: 'bool'
            }
        ],
        stateMutability: 'view'
    },
    {
        type: 'function',
        name: 'isERC7739ContentEnabled',
        inputs: [
            {
                name: 'account',
                type: 'address',
                internalType: 'address'
            },
            {
                name: 'permissionId',
                type: 'bytes32',
                internalType: 'PermissionId'
            },
            {
                name: 'appDomainSeparator',
                type: 'bytes32',
                internalType: 'bytes32'
            },
            {
                name: 'content',
                type: 'string',
                internalType: 'string'
            }
        ],
        outputs: [
            {
                name: '',
                type: 'bool',
                internalType: 'bool'
            }
        ],
        stateMutability: 'view'
    },
    {
        type: 'function',
        name: 'isISessionValidatorSet',
        inputs: [
            {
                name: 'permissionId',
                type: 'bytes32',
                internalType: 'PermissionId'
            },
            {
                name: 'account',
                type: 'address',
                internalType: 'address'
            }
        ],
        outputs: [
            {
                name: '',
                type: 'bool',
                internalType: 'bool'
            }
        ],
        stateMutability: 'view'
    },
    {
        type: 'function',
        name: 'isInitialized',
        inputs: [
            {
                name: 'smartAccount',
                type: 'address',
                internalType: 'address'
            }
        ],
        outputs: [
            {
                name: '',
                type: 'bool',
                internalType: 'bool'
            }
        ],
        stateMutability: 'view'
    },
    {
        type: 'function',
        name: 'isModuleType',
        inputs: [
            {
                name: 'typeID',
                type: 'uint256',
                internalType: 'uint256'
            }
        ],
        outputs: [
            {
                name: '',
                type: 'bool',
                internalType: 'bool'
            }
        ],
        stateMutability: 'pure'
    },
    {
        type: 'function',
        name: 'isPermissionEnabled',
        inputs: [
            {
                name: 'permissionId',
                type: 'bytes32',
                internalType: 'PermissionId'
            },
            {
                name: 'account',
                type: 'address',
                internalType: 'address'
            }
        ],
        outputs: [
            {
                name: '',
                type: 'bool',
                internalType: 'bool'
            }
        ],
        stateMutability: 'view'
    },
    {
        type: 'function',
        name: 'isUserOpPolicyEnabled',
        inputs: [
            {
                name: 'account',
                type: 'address',
                internalType: 'address'
            },
            {
                name: 'permissionId',
                type: 'bytes32',
                internalType: 'PermissionId'
            },
            {
                name: 'policy',
                type: 'address',
                internalType: 'address'
            }
        ],
        outputs: [
            {
                name: '',
                type: 'bool',
                internalType: 'bool'
            }
        ],
        stateMutability: 'view'
    },
    {
        type: 'function',
        name: 'isValidSignatureWithSender',
        inputs: [
            {
                name: 'sender',
                type: 'address',
                internalType: 'address'
            },
            {
                name: 'hash',
                type: 'bytes32',
                internalType: 'bytes32'
            },
            {
                name: 'signature',
                type: 'bytes',
                internalType: 'bytes'
            }
        ],
        outputs: [
            {
                name: 'result',
                type: 'bytes4',
                internalType: 'bytes4'
            }
        ],
        stateMutability: 'view'
    },
    {
        type: 'function',
        name: 'onInstall',
        inputs: [
            {
                name: 'data',
                type: 'bytes',
                internalType: 'bytes'
            }
        ],
        outputs: [],
        stateMutability: 'nonpayable'
    },
    {
        type: 'function',
        name: 'onUninstall',
        inputs: [
            {
                name: '',
                type: 'bytes',
                internalType: 'bytes'
            }
        ],
        outputs: [],
        stateMutability: 'nonpayable'
    },
    {
        type: 'function',
        name: 'removeSession',
        inputs: [
            {
                name: 'permissionId',
                type: 'bytes32',
                internalType: 'PermissionId'
            }
        ],
        outputs: [],
        stateMutability: 'nonpayable'
    },
    {
        type: 'function',
        name: 'revokeEnableSignature',
        inputs: [
            {
                name: 'permissionId',
                type: 'bytes32',
                internalType: 'PermissionId'
            }
        ],
        outputs: [],
        stateMutability: 'nonpayable'
    },
    {
        type: 'function',
        name: 'setpermitERC4337Paymaster',
        inputs: [
            {
                name: 'permissionId',
                type: 'bytes32',
                internalType: 'PermissionId'
            },
            {
                name: 'enabled',
                type: 'bool',
                internalType: 'bool'
            }
        ],
        outputs: [],
        stateMutability: 'nonpayable'
    },
    {
        type: 'function',
        name: 'validateUserOp',
        inputs: [
            {
                name: 'userOp',
                type: 'tuple',
                internalType: 'struct PackedUserOperation',
                components: [
                    {
                        name: 'sender',
                        type: 'address',
                        internalType: 'address'
                    },
                    {
                        name: 'nonce',
                        type: 'uint256',
                        internalType: 'uint256'
                    },
                    {
                        name: 'initCode',
                        type: 'bytes',
                        internalType: 'bytes'
                    },
                    {
                        name: 'callData',
                        type: 'bytes',
                        internalType: 'bytes'
                    },
                    {
                        name: 'accountGasLimits',
                        type: 'bytes32',
                        internalType: 'bytes32'
                    },
                    {
                        name: 'preVerificationGas',
                        type: 'uint256',
                        internalType: 'uint256'
                    },
                    {
                        name: 'gasFees',
                        type: 'bytes32',
                        internalType: 'bytes32'
                    },
                    {
                        name: 'paymasterAndData',
                        type: 'bytes',
                        internalType: 'bytes'
                    },
                    {
                        name: 'signature',
                        type: 'bytes',
                        internalType: 'bytes'
                    }
                ]
            },
            {
                name: 'userOpHash',
                type: 'bytes32',
                internalType: 'bytes32'
            }
        ],
        outputs: [
            {
                name: 'vd',
                type: 'uint256',
                internalType: 'ValidationData'
            }
        ],
        stateMutability: 'nonpayable'
    },
    {
        type: 'event',
        name: 'ActionIdDisabled',
        inputs: [
            {
                name: 'permissionId',
                type: 'bytes32',
                indexed: false,
                internalType: 'PermissionId'
            },
            {
                name: 'actionId',
                type: 'bytes32',
                indexed: false,
                internalType: 'ActionId'
            },
            {
                name: 'smartAccount',
                type: 'address',
                indexed: false,
                internalType: 'address'
            }
        ],
        anonymous: false
    },
    {
        type: 'event',
        name: 'NonceIterated',
        inputs: [
            {
                name: 'permissionId',
                type: 'bytes32',
                indexed: false,
                internalType: 'PermissionId'
            },
            {
                name: 'account',
                type: 'address',
                indexed: false,
                internalType: 'address'
            },
            {
                name: 'newValue',
                type: 'uint256',
                indexed: false,
                internalType: 'uint256'
            }
        ],
        anonymous: false
    },
    {
        type: 'event',
        name: 'PermissionIdpermitERC4337Paymaster',
        inputs: [
            {
                name: 'permissionId',
                type: 'bytes32',
                indexed: false,
                internalType: 'PermissionId'
            },
            {
                name: 'smartAccount',
                type: 'address',
                indexed: false,
                internalType: 'address'
            },
            {
                name: 'enabled',
                type: 'bool',
                indexed: false,
                internalType: 'bool'
            }
        ],
        anonymous: false
    },
    {
        type: 'event',
        name: 'PolicyDisabled',
        inputs: [
            {
                name: 'permissionId',
                type: 'bytes32',
                indexed: false,
                internalType: 'PermissionId'
            },
            {
                name: 'policyType',
                type: 'uint8',
                indexed: false,
                internalType: 'enum PolicyType'
            },
            {
                name: 'policy',
                type: 'address',
                indexed: false,
                internalType: 'address'
            },
            {
                name: 'smartAccount',
                type: 'address',
                indexed: false,
                internalType: 'address'
            }
        ],
        anonymous: false
    },
    {
        type: 'event',
        name: 'PolicyEnabled',
        inputs: [
            {
                name: 'permissionId',
                type: 'bytes32',
                indexed: false,
                internalType: 'PermissionId'
            },
            {
                name: 'policyType',
                type: 'uint8',
                indexed: false,
                internalType: 'enum PolicyType'
            },
            {
                name: 'policy',
                type: 'address',
                indexed: false,
                internalType: 'address'
            },
            {
                name: 'smartAccount',
                type: 'address',
                indexed: false,
                internalType: 'address'
            }
        ],
        anonymous: false
    },
    {
        type: 'event',
        name: 'SessionCreated',
        inputs: [
            {
                name: 'permissionId',
                type: 'bytes32',
                indexed: false,
                internalType: 'PermissionId'
            },
            {
                name: 'account',
                type: 'address',
                indexed: false,
                internalType: 'address'
            }
        ],
        anonymous: false
    },
    {
        type: 'event',
        name: 'SessionRemoved',
        inputs: [
            {
                name: 'permissionId',
                type: 'bytes32',
                indexed: false,
                internalType: 'PermissionId'
            },
            {
                name: 'smartAccount',
                type: 'address',
                indexed: false,
                internalType: 'address'
            }
        ],
        anonymous: false
    },
    {
        type: 'event',
        name: 'SessionValidatorDisabled',
        inputs: [
            {
                name: 'permissionId',
                type: 'bytes32',
                indexed: false,
                internalType: 'PermissionId'
            },
            {
                name: 'sessionValidator',
                type: 'address',
                indexed: false,
                internalType: 'address'
            },
            {
                name: 'smartAccount',
                type: 'address',
                indexed: false,
                internalType: 'address'
            }
        ],
        anonymous: false
    },
    {
        type: 'event',
        name: 'SessionValidatorEnabled',
        inputs: [
            {
                name: 'permissionId',
                type: 'bytes32',
                indexed: false,
                internalType: 'PermissionId'
            },
            {
                name: 'sessionValidator',
                type: 'address',
                indexed: false,
                internalType: 'address'
            },
            {
                name: 'smartAccount',
                type: 'address',
                indexed: false,
                internalType: 'address'
            }
        ],
        anonymous: false
    },
    {
        type: 'error',
        name: 'AssociatedArray_OutOfBounds',
        inputs: [
            {
                name: 'index',
                type: 'uint256',
                internalType: 'uint256'
            }
        ]
    },
    {
        type: 'error',
        name: 'ChainIdMismatch',
        inputs: [
            {
                name: 'providedChainId',
                type: 'uint64',
                internalType: 'uint64'
            }
        ]
    },
    {
        type: 'error',
        name: 'ChainIdMismatch',
        inputs: [
            {
                name: 'providedChainId',
                type: 'uint64',
                internalType: 'uint64'
            }
        ]
    },
    {
        type: 'error',
        name: 'ForbiddenValidationData',
        inputs: []
    },
    {
        type: 'error',
        name: 'HashIndexOutOfBounds',
        inputs: [
            {
                name: 'index',
                type: 'uint256',
                internalType: 'uint256'
            }
        ]
    },
    {
        type: 'error',
        name: 'HashMismatch',
        inputs: [
            {
                name: 'providedHash',
                type: 'bytes32',
                internalType: 'bytes32'
            },
            {
                name: 'computedHash',
                type: 'bytes32',
                internalType: 'bytes32'
            }
        ]
    },
    {
        type: 'error',
        name: 'HashMismatch',
        inputs: [
            {
                name: 'providedHash',
                type: 'bytes32',
                internalType: 'bytes32'
            },
            {
                name: 'computedHash',
                type: 'bytes32',
                internalType: 'bytes32'
            }
        ]
    },
    {
        type: 'error',
        name: 'InvalidActionId',
        inputs: []
    },
    {
        type: 'error',
        name: 'InvalidCallTarget',
        inputs: []
    },
    {
        type: 'error',
        name: 'InvalidData',
        inputs: []
    },
    {
        type: 'error',
        name: 'InvalidEnableSignature',
        inputs: [
            {
                name: 'account',
                type: 'address',
                internalType: 'address'
            },
            {
                name: 'hash',
                type: 'bytes32',
                internalType: 'bytes32'
            }
        ]
    },
    {
        type: 'error',
        name: 'InvalidISessionValidator',
        inputs: [
            {
                name: 'sessionValidator',
                type: 'address',
                internalType: 'contract ISessionValidator'
            }
        ]
    },
    {
        type: 'error',
        name: 'InvalidMode',
        inputs: []
    },
    {
        type: 'error',
        name: 'InvalidPermissionId',
        inputs: [
            {
                name: 'permissionId',
                type: 'bytes32',
                internalType: 'PermissionId'
            }
        ]
    },
    {
        type: 'error',
        name: 'InvalidSelfCall',
        inputs: []
    },
    {
        type: 'error',
        name: 'InvalidSession',
        inputs: [
            {
                name: 'permissionId',
                type: 'bytes32',
                internalType: 'PermissionId'
            }
        ]
    },
    {
        type: 'error',
        name: 'InvalidSessionKeySignature',
        inputs: [
            {
                name: 'permissionId',
                type: 'bytes32',
                internalType: 'PermissionId'
            },
            {
                name: 'sessionValidator',
                type: 'address',
                internalType: 'address'
            },
            {
                name: 'account',
                type: 'address',
                internalType: 'address'
            },
            {
                name: 'userOpHash',
                type: 'bytes32',
                internalType: 'bytes32'
            }
        ]
    },
    {
        type: 'error',
        name: 'InvalidTarget',
        inputs: []
    },
    {
        type: 'error',
        name: 'InvalidUserOpSender',
        inputs: [
            {
                name: 'sender',
                type: 'address',
                internalType: 'address'
            }
        ]
    },
    {
        type: 'error',
        name: 'NoExecutionsInBatch',
        inputs: []
    },
    {
        type: 'error',
        name: 'NoPoliciesSet',
        inputs: [
            {
                name: 'permissionId',
                type: 'bytes32',
                internalType: 'PermissionId'
            }
        ]
    },
    {
        type: 'error',
        name: 'PartlyEnabledActions',
        inputs: []
    },
    {
        type: 'error',
        name: 'PartlyEnabledPolicies',
        inputs: []
    },
    {
        type: 'error',
        name: 'PaymasterValidationNotEnabled',
        inputs: [
            {
                name: 'permissionId',
                type: 'bytes32',
                internalType: 'PermissionId'
            }
        ]
    },
    {
        type: 'error',
        name: 'PolicyViolation',
        inputs: [
            {
                name: 'permissionId',
                type: 'bytes32',
                internalType: 'PermissionId'
            },
            {
                name: 'policy',
                type: 'address',
                internalType: 'address'
            }
        ]
    },
    {
        type: 'error',
        name: 'SignerNotFound',
        inputs: [
            {
                name: 'permissionId',
                type: 'bytes32',
                internalType: 'PermissionId'
            },
            {
                name: 'account',
                type: 'address',
                internalType: 'address'
            }
        ]
    },
    {
        type: 'error',
        name: 'SignerNotFound',
        inputs: [
            {
                name: 'permissionId',
                type: 'bytes32',
                internalType: 'PermissionId'
            },
            {
                name: 'account',
                type: 'address',
                internalType: 'address'
            }
        ]
    },
    {
        type: 'error',
        name: 'SmartSessionModuleAlreadyInstalled',
        inputs: [
            {
                name: 'account',
                type: 'address',
                internalType: 'address'
            }
        ]
    },
    {
        type: 'error',
        name: 'UnsupportedExecutionType',
        inputs: []
    },
    {
        type: 'error',
        name: 'UnsupportedPolicy',
        inputs: [
            {
                name: 'policy',
                type: 'address',
                internalType: 'address'
            }
        ]
    },
    {
        type: 'error',
        name: 'UnsupportedSmartSessionMode',
        inputs: [
            {
                name: 'mode',
                type: 'uint8',
                internalType: 'enum SmartSessionMode'
            }
        ]
    }
]; //# sourceMappingURL=abi.js.map
}}),
"[project]/node_modules/@rhinestone/module-sdk/_esm/module/types.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "CallType": (()=>CallType),
    "moduleTypeIds": (()=>moduleTypeIds)
});
const moduleTypeIds = {
    validator: 1,
    executor: 2,
    fallback: 3,
    hook: 4
};
var CallType;
(function(CallType) {
    CallType["CALLTYPE_SINGLE"] = "0x00";
    CallType["CALLTYPE_BATCH"] = "0x01";
    CallType["CALLTYPE_STATIC"] = "0xFE";
    CallType["CALLTYPE_DELEGATECALL"] = "0xFF";
})(CallType || (CallType = {})); //# sourceMappingURL=types.js.map
}}),
"[project]/node_modules/@rhinestone/module-sdk/_esm/module/smart-sessions/installation.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "getSmartSessionsCompatibilityFallback": (()=>getSmartSessionsCompatibilityFallback),
    "getSmartSessionsValidator": (()=>getSmartSessionsValidator)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@rhinestone/module-sdk/_esm/module/smart-sessions/constants.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodePacked$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/utils/abi/encodePacked.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@rhinestone/module-sdk/_esm/module/smart-sessions/types.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodeAbiParameters$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/utils/abi/encodeAbiParameters.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$abi$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@rhinestone/module-sdk/_esm/module/smart-sessions/abi.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@rhinestone/module-sdk/_esm/module/types.js [app-rsc] (ecmascript)");
;
;
;
;
;
const getSmartSessionsValidator = ({ sessions, useRegistry = true, hook })=>{
    return {
        address: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SMART_SESSIONS_ADDRESS"],
        module: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SMART_SESSIONS_ADDRESS"],
        initData: sessions?.length ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodePacked$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["encodePacked"])([
            'bytes1',
            'bytes'
        ], [
            useRegistry ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SmartSessionMode"].ENABLE : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SmartSessionMode"].UNSAFE_ENABLE,
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodeAbiParameters$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["encodeAbiParameters"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$abi$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["installSmartSessionsAbi"], [
                sessions
            ])
        ]) : '0x',
        deInitData: '0x',
        additionalContext: '0x',
        type: 'validator',
        hook
    };
};
const getSmartSessionsCompatibilityFallback = ()=>{
    return {
        address: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SMART_SESSIONS_COMPATIBILITY_FALLBACK_ADDRESS"],
        module: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SMART_SESSIONS_COMPATIBILITY_FALLBACK_ADDRESS"],
        initData: '0x',
        deInitData: '0x',
        selector: '0x84b0196e',
        callType: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["CallType"].CALLTYPE_SINGLE,
        additionalContext: '0x',
        type: 'fallback'
    };
}; //# sourceMappingURL=installation.js.map
}}),
"[project]/node_modules/@rhinestone/module-sdk/_esm/account/utils.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "isAccount": (()=>isAccount),
    "isModule": (()=>isModule)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$address$2f$isAddress$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/utils/address/isAddress.js [app-rsc] (ecmascript)");
;
function isAccount(obj) {
    const account = obj;
    return typeof obj === 'object' && obj !== null && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$address$2f$isAddress$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["isAddress"])(account.address, {
        strict: false
    }) && (account.initCode === undefined || account.initCode !== undefined && typeof account.initCode === 'string' && account.initCode.startsWith('0x')) && typeof account.type === 'string' && isAccountType(account.type) && Array.isArray(account.deployedOnChains) && account.deployedOnChains.every((chainId)=>typeof chainId === 'number');
}
function isAccountType(value) {
    const validTypes = [
        'erc7579-implementation',
        'kernel',
        'safe',
        'nexus'
    ];
    return typeof value === 'string' && validTypes.includes(value);
}
function isModule(object) {
    const module = object;
    return typeof object === 'object' && object !== null && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$address$2f$isAddress$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["isAddress"])(module.address, {
        strict: false
    }) && typeof module.initData === 'string' && module.initData.startsWith('0x') && typeof module.deInitData === 'string' && module.deInitData.startsWith('0x') && typeof module.additionalContext === 'string' && module.additionalContext.startsWith('0x') && isModuleType(module.type);
}
const isModuleType = (value)=>{
    const validTypes = [
        'validator',
        'executor',
        'fallback',
        'hook'
    ];
    return typeof value === 'string' && validTypes.includes(value);
}; //# sourceMappingURL=utils.js.map
}}),
"[project]/node_modules/@rhinestone/module-sdk/_esm/module/smart-sessions/usage.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "decodeSmartSessionSignature": (()=>decodeSmartSessionSignature),
    "encodeSmartSessionSignature": (()=>encodeSmartSessionSignature),
    "encodeUseOrEnableSmartSessionSignature": (()=>encodeUseOrEnableSmartSessionSignature),
    "formatPermissionEnableSig": (()=>formatPermissionEnableSig),
    "getAccountEIP712Domain": (()=>getAccountEIP712Domain),
    "getActionId": (()=>getActionId),
    "getDisableActionPoliciesAction": (()=>getDisableActionPoliciesAction),
    "getDisableERC1271PoliciesAction": (()=>getDisableERC1271PoliciesAction),
    "getDisableUserOpPoliciesAction": (()=>getDisableUserOpPoliciesAction),
    "getEnableActionPoliciesAction": (()=>getEnableActionPoliciesAction),
    "getEnableERC1271PoliciesAction": (()=>getEnableERC1271PoliciesAction),
    "getEnableSessionDetails": (()=>getEnableSessionDetails),
    "getEnableSessionsAction": (()=>getEnableSessionsAction),
    "getEnableUserOpPoliciesAction": (()=>getEnableUserOpPoliciesAction),
    "getPermissionId": (()=>getPermissionId),
    "getRemoveSessionAction": (()=>getRemoveSessionAction),
    "getSessionDigest": (()=>getSessionDigest),
    "getSessionNonce": (()=>getSessionNonce),
    "getVerifySignatureResult": (()=>getVerifySignatureResult),
    "hashChainSessions": (()=>hashChainSessions),
    "isSessionEnabled": (()=>isSessionEnabled)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$solady$2f$js$2f$solady$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/solady/js/solady.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$hash$2f$keccak256$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/utils/hash/keccak256.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodeAbiParameters$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/utils/abi/encodeAbiParameters.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodePacked$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/utils/abi/encodePacked.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@rhinestone/module-sdk/_esm/module/smart-sessions/constants.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$abi$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@rhinestone/module-sdk/_esm/module/smart-sessions/abi.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$account$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@rhinestone/module-sdk/_esm/account/utils.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodeFunctionData$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/utils/abi/encodeFunctionData.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@rhinestone/module-sdk/_esm/module/smart-sessions/types.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$data$2f$slice$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/utils/data/slice.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$decodeAbiParameters$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/utils/abi/decodeAbiParameters.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$signature$2f$hashTypedData$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/utils/signature/hashTypedData.js [app-rsc] (ecmascript)");
;
;
;
;
;
;
const getPermissionId = ({ session })=>{
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$hash$2f$keccak256$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["keccak256"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodeAbiParameters$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["encodeAbiParameters"])([
        {
            type: 'address',
            name: 'sessionValidator'
        },
        {
            type: 'bytes',
            name: 'sessionValidatorInitData'
        },
        {
            type: 'bytes32',
            name: 'salt'
        }
    ], [
        session.sessionValidator,
        session.sessionValidatorInitData,
        session.salt
    ]));
};
const getActionId = async ({ target, selector })=>{
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$hash$2f$keccak256$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["keccak256"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodePacked$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["encodePacked"])([
        'address',
        'bytes4'
    ], [
        target,
        selector
    ]));
};
const getSessionNonce = async ({ client, account, permissionId })=>{
    return await client.readContract({
        address: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SMART_SESSIONS_ADDRESS"],
        abi: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$abi$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["abi"],
        functionName: 'getNonce',
        args: [
            permissionId,
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$account$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["isAccount"])(account) ? account.address : account
        ]
    });
};
const getVerifySignatureResult = async ({ client, account, sender, hash, signature })=>{
    let calldata = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodeFunctionData$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["encodeFunctionData"])({
        abi: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$abi$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["abi"],
        functionName: 'isValidSignatureWithSender',
        args: [
            sender,
            hash,
            signature
        ]
    });
    const { data } = await client.call({
        account: account.address,
        to: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SMART_SESSIONS_ADDRESS"],
        data: calldata
    });
    return data === '0x1626ba7e00000000000000000000000000000000000000000000000000000000';
};
const getAccountEIP712Domain = async ({ client, account })=>{
    let data = await client.readContract({
        address: account.address,
        abi: [
            {
                type: 'function',
                name: 'eip712Domain',
                inputs: [],
                outputs: [
                    {
                        type: 'bytes1',
                        name: 'fields,'
                    },
                    {
                        type: 'string',
                        name: 'name'
                    },
                    {
                        type: 'string',
                        name: 'version'
                    },
                    {
                        type: 'uint256',
                        name: 'chainId'
                    },
                    {
                        type: 'address',
                        name: 'verifyingContract'
                    },
                    {
                        type: 'bytes32',
                        name: 'salt'
                    },
                    {
                        type: 'uint256[]',
                        name: 'extensions'
                    }
                ],
                stateMutability: 'view',
                constant: true
            }
        ],
        functionName: 'eip712Domain',
        args: []
    });
    return {
        name: data[1],
        version: data[2],
        chainId: data[3],
        verifyingContract: data[4],
        salt: data[5]
    };
};
const isSessionEnabled = async ({ client, account, permissionId })=>{
    return await client.readContract({
        address: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SMART_SESSIONS_ADDRESS"],
        abi: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$abi$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["abi"],
        functionName: 'isPermissionEnabled',
        args: [
            permissionId,
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$account$2f$utils$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["isAccount"])(account) ? account.address : account
        ]
    });
};
const getSessionDigest = async ({ client, account, session, permissionId, mode })=>{
    return await client.readContract({
        address: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SMART_SESSIONS_ADDRESS"],
        abi: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$abi$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["abi"],
        functionName: 'getSessionDigest',
        args: [
            permissionId,
            account.address,
            session,
            Number(mode)
        ]
    });
};
const encodeSmartSessionSignature = ({ mode, permissionId, signature, enableSessionData })=>{
    switch(mode){
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SmartSessionMode"].USE:
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodePacked$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["encodePacked"])([
                'bytes1',
                'bytes32',
                'bytes'
            ], [
                mode,
                permissionId,
                signature
            ]);
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SmartSessionMode"].ENABLE:
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SmartSessionMode"].UNSAFE_ENABLE:
            if (!enableSessionData) {
                throw new Error('enableSession is required for ENABLE mode');
            }
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodePacked$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["encodePacked"])([
                'bytes1',
                'bytes'
            ], [
                mode,
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$solady$2f$js$2f$solady$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["LibZip"].flzCompress(encodeEnableSessionSignature({
                    enableSessionData,
                    signature
                }))
            ]);
        default:
            throw new Error(`Unknown mode ${mode}`);
    }
};
const encodeUseOrEnableSmartSessionSignature = async ({ account, client, permissionId, signature, enableSessionData })=>{
    const sessionEnabled = await isSessionEnabled({
        account,
        client,
        permissionId
    });
    return sessionEnabled ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodePacked$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["encodePacked"])([
        'bytes1',
        'bytes32',
        'bytes'
    ], [
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SmartSessionMode"].USE,
        permissionId,
        signature
    ]) : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodePacked$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["encodePacked"])([
        'bytes1',
        'bytes'
    ], [
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SmartSessionMode"].ENABLE,
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$solady$2f$js$2f$solady$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["LibZip"].flzCompress(encodeEnableSessionSignature({
            enableSessionData,
            signature
        }))
    ]);
};
const decodeSmartSessionSignature = ({ signature, account })=>{
    const mode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$data$2f$slice$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["slice"])(signature, 0, 1);
    let permissionId;
    let compressedData;
    let data;
    switch(mode){
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SmartSessionMode"].USE:
            permissionId = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$data$2f$slice$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["slice"])(signature, 1, 33);
            const decodedSignature = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$data$2f$slice$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["slice"])(signature, 33);
            return {
                mode,
                permissionId,
                signature: decodedSignature
            };
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SmartSessionMode"].ENABLE:
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SmartSessionMode"].UNSAFE_ENABLE:
            compressedData = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$data$2f$slice$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["slice"])(signature, 1);
            data = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$solady$2f$js$2f$solady$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["LibZip"].flzDecompress(compressedData);
            if (!account) {
                throw new Error('account is required for ENABLE mode decoding');
            }
            const decodedData = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$decodeAbiParameters$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["decodeAbiParameters"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$abi$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["encodeEnableSessionSignatureAbi"], data);
            const enableSession = decodedData[0];
            const permissionEnableSigSlice = account.type === 'kernel' ? 1 : 0;
            if (account.type === 'kernel' && !enableSession.permissionEnableSig.startsWith('0x01')) {
                throw new Error('Invalid permissionEnableSig for kernel account');
            }
            const permissionEnableSig = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$data$2f$slice$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["slice"])(enableSession.permissionEnableSig, 20 + permissionEnableSigSlice);
            const validator = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$data$2f$slice$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["slice"])(enableSession.permissionEnableSig, 0 + permissionEnableSigSlice, 20 + permissionEnableSigSlice);
            return {
                mode: mode,
                permissionId: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$hash$2f$keccak256$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["keccak256"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodeAbiParameters$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["encodeAbiParameters"])([
                    {
                        type: 'address',
                        name: 'sessionValidator'
                    },
                    {
                        type: 'bytes',
                        name: 'sessionValidatorInitData'
                    },
                    {
                        type: 'bytes32',
                        name: 'salt'
                    }
                ], [
                    enableSession.sessionToEnable.sessionValidator,
                    enableSession.sessionToEnable.sessionValidatorInitData,
                    enableSession.sessionToEnable.salt
                ])),
                signature: decodedData[1],
                enableSessionData: {
                    enableSession: {
                        chainDigestIndex: enableSession.chainDigestIndex,
                        hashesAndChainIds: enableSession.hashesAndChainIds,
                        sessionToEnable: enableSession.sessionToEnable,
                        permissionEnableSig: permissionEnableSig
                    },
                    validator: validator,
                    accountType: account.type
                }
            };
        default:
            throw new Error(`Unknown mode ${mode}`);
    }
};
const hashChainSessions = (chainSessions)=>{
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$signature$2f$hashTypedData$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["hashTypedData"])({
        domain: {
            name: 'SmartSession',
            version: '1'
        },
        types: {
            PolicyData: [
                {
                    name: 'policy',
                    type: 'address'
                },
                {
                    name: 'initData',
                    type: 'bytes'
                }
            ],
            ActionData: [
                {
                    name: 'actionTargetSelector',
                    type: 'bytes4'
                },
                {
                    name: 'actionTarget',
                    type: 'address'
                },
                {
                    name: 'actionPolicies',
                    type: 'PolicyData[]'
                }
            ],
            ERC7739Context: [
                {
                    name: 'appDomainSeparator',
                    type: 'bytes32'
                },
                {
                    name: 'contentName',
                    type: 'string[]'
                }
            ],
            ERC7739Data: [
                {
                    name: 'allowedERC7739Content',
                    type: 'ERC7739Context[]'
                },
                {
                    name: 'erc1271Policies',
                    type: 'PolicyData[]'
                }
            ],
            SignedPermissions: [
                {
                    name: 'permitGenericPolicy',
                    type: 'bool'
                },
                {
                    name: 'permitAdminAccess',
                    type: 'bool'
                },
                {
                    name: 'ignoreSecurityAttestations',
                    type: 'bool'
                },
                {
                    name: 'permitERC4337Paymaster',
                    type: 'bool'
                },
                {
                    name: 'userOpPolicies',
                    type: 'PolicyData[]'
                },
                {
                    name: 'erc7739Policies',
                    type: 'ERC7739Data'
                },
                {
                    name: 'actions',
                    type: 'ActionData[]'
                }
            ],
            SignedSession: [
                {
                    name: 'account',
                    type: 'address'
                },
                {
                    name: 'permissions',
                    type: 'SignedPermissions'
                },
                {
                    name: 'sessionValidator',
                    type: 'address'
                },
                {
                    name: 'sessionValidatorInitData',
                    type: 'bytes'
                },
                {
                    name: 'salt',
                    type: 'bytes32'
                },
                {
                    name: 'smartSession',
                    type: 'address'
                },
                {
                    name: 'nonce',
                    type: 'uint256'
                }
            ],
            ChainSession: [
                {
                    name: 'chainId',
                    type: 'uint64'
                },
                {
                    name: 'session',
                    type: 'SignedSession'
                }
            ],
            MultiChainSession: [
                {
                    name: 'sessionsAndChainIds',
                    type: 'ChainSession[]'
                }
            ]
        },
        primaryType: 'MultiChainSession',
        message: {
            sessionsAndChainIds: chainSessions
        }
    });
};
const encodeEnableSessionSignature = ({ enableSessionData, signature })=>{
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodeAbiParameters$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["encodeAbiParameters"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$abi$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["encodeEnableSessionSignatureAbi"], [
        {
            chainDigestIndex: enableSessionData.enableSession.chainDigestIndex,
            hashesAndChainIds: enableSessionData.enableSession.hashesAndChainIds,
            sessionToEnable: enableSessionData.enableSession.sessionToEnable,
            permissionEnableSig: formatPermissionEnableSig({
                signature: enableSessionData.enableSession.permissionEnableSig,
                validator: enableSessionData.validator,
                accountType: enableSessionData.accountType
            })
        },
        signature
    ]);
};
const formatPermissionEnableSig = ({ signature, validator, accountType })=>{
    switch(accountType){
        case 'erc7579-implementation':
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodePacked$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["encodePacked"])([
                'address',
                'bytes'
            ], [
                validator,
                signature
            ]);
        case 'nexus':
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodePacked$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["encodePacked"])([
                'address',
                'bytes'
            ], [
                validator,
                signature
            ]);
        case 'safe':
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodePacked$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["encodePacked"])([
                'address',
                'bytes'
            ], [
                validator,
                signature
            ]);
        case 'kernel':
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodePacked$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["encodePacked"])([
                'bytes1',
                'address',
                'bytes'
            ], [
                '0x01',
                validator,
                signature
            ]);
        default:
            throw new Error(`Unsupported account type: ${accountType}`);
    }
};
const getEnableSessionsAction = ({ sessions })=>{
    const data = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodeFunctionData$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["encodeFunctionData"])({
        abi: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$abi$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["abi"],
        functionName: 'enableSessions',
        args: [
            sessions
        ]
    });
    return {
        to: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SMART_SESSIONS_ADDRESS"],
        target: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SMART_SESSIONS_ADDRESS"],
        value: BigInt(0),
        callData: data,
        data
    };
};
const getRemoveSessionAction = ({ permissionId })=>{
    const data = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodeFunctionData$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["encodeFunctionData"])({
        abi: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$abi$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["abi"],
        functionName: 'removeSession',
        args: [
            permissionId
        ]
    });
    return {
        to: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SMART_SESSIONS_ADDRESS"],
        target: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SMART_SESSIONS_ADDRESS"],
        value: BigInt(0),
        callData: data,
        data
    };
};
const getEnableUserOpPoliciesAction = ({ permissionId, userOpPolicies })=>{
    const data = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodeFunctionData$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["encodeFunctionData"])({
        abi: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$abi$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["abi"],
        functionName: 'enableUserOpPolicies',
        args: [
            permissionId,
            userOpPolicies
        ]
    });
    return {
        to: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SMART_SESSIONS_ADDRESS"],
        target: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SMART_SESSIONS_ADDRESS"],
        value: BigInt(0),
        callData: data,
        data
    };
};
const getDisableUserOpPoliciesAction = ({ permissionId, userOpPolicies })=>{
    const data = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodeFunctionData$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["encodeFunctionData"])({
        abi: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$abi$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["abi"],
        functionName: 'disableUserOpPolicies',
        args: [
            permissionId,
            userOpPolicies
        ]
    });
    return {
        to: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SMART_SESSIONS_ADDRESS"],
        target: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SMART_SESSIONS_ADDRESS"],
        value: BigInt(0),
        callData: data,
        data
    };
};
const getEnableERC1271PoliciesAction = ({ permissionId, erc1271Policies })=>{
    const data = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodeFunctionData$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["encodeFunctionData"])({
        abi: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$abi$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["abi"],
        functionName: 'enableERC1271Policies',
        args: [
            permissionId,
            erc1271Policies
        ]
    });
    return {
        to: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SMART_SESSIONS_ADDRESS"],
        target: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SMART_SESSIONS_ADDRESS"],
        value: BigInt(0),
        callData: data,
        data
    };
};
const getDisableERC1271PoliciesAction = ({ permissionId, policies, contents })=>{
    const data = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodeFunctionData$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["encodeFunctionData"])({
        abi: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$abi$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["abi"],
        functionName: 'disableERC1271Policies',
        args: [
            permissionId,
            policies,
            contents
        ]
    });
    return {
        to: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SMART_SESSIONS_ADDRESS"],
        target: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SMART_SESSIONS_ADDRESS"],
        value: BigInt(0),
        callData: data,
        data
    };
};
const getEnableActionPoliciesAction = ({ permissionId, actionPolicies })=>{
    const data = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodeFunctionData$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["encodeFunctionData"])({
        abi: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$abi$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["abi"],
        functionName: 'enableActionPolicies',
        args: [
            permissionId,
            actionPolicies
        ]
    });
    return {
        to: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SMART_SESSIONS_ADDRESS"],
        target: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SMART_SESSIONS_ADDRESS"],
        value: BigInt(0),
        callData: data,
        data
    };
};
const getDisableActionPoliciesAction = ({ permissionId, actionId, policies })=>{
    const data = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodeFunctionData$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["encodeFunctionData"])({
        abi: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$abi$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["abi"],
        functionName: 'disableActionPolicies',
        args: [
            permissionId,
            actionId,
            policies
        ]
    });
    return {
        to: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SMART_SESSIONS_ADDRESS"],
        target: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SMART_SESSIONS_ADDRESS"],
        value: BigInt(0),
        callData: data,
        data
    };
};
const getEnableSessionDetails = async ({ sessions, sessionIndex, enableMode, account, clients, enableValidatorAddress, permitGenericPolicy = false, permitAdminAccess = false, ignoreSecurityAttestations = false })=>{
    const chainDigests = [];
    const chainSessions = [];
    for (const session of sessions){
        const permissionId = getPermissionId({
            session
        });
        const client = clients.find((c)=>BigInt(c.chain?.id ?? 0) === session.chainId);
        if (!client) {
            throw new Error(`Client not found for chainId ${session.chainId}`);
        }
        const sessionNonce = await getSessionNonce({
            client,
            account,
            permissionId
        });
        const sessionDigest = await getSessionDigest({
            client,
            account,
            session,
            mode: enableMode || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SmartSessionMode"].ENABLE,
            permissionId
        });
        chainDigests.push({
            chainId: session.chainId,
            sessionDigest
        });
        chainSessions.push({
            chainId: session.chainId,
            session: {
                ...session,
                permissions: {
                    permitGenericPolicy: permitGenericPolicy,
                    permitAdminAccess: permitAdminAccess,
                    ignoreSecurityAttestations: ignoreSecurityAttestations,
                    permitERC4337Paymaster: session.permitERC4337Paymaster,
                    userOpPolicies: session.userOpPolicies,
                    erc7739Policies: session.erc7739Policies,
                    actions: session.actions
                },
                account: account.address,
                smartSession: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SMART_SESSIONS_ADDRESS"],
                nonce: sessionNonce
            }
        });
    }
    const permissionEnableHash = hashChainSessions(chainSessions);
    const sessionToEnable = sessions[sessionIndex || 0];
    const permissionId = getPermissionId({
        session: sessionToEnable
    });
    return {
        permissionEnableHash,
        mode: enableMode || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$types$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SmartSessionMode"].ENABLE,
        permissionId,
        signature: '0x',
        enableSessionData: {
            enableSession: {
                chainDigestIndex: sessionIndex || 0,
                hashesAndChainIds: chainDigests,
                sessionToEnable,
                permissionEnableSig: '0x'
            },
            validator: enableValidatorAddress ?? sessionToEnable.sessionValidator,
            accountType: account.type
        }
    };
}; //# sourceMappingURL=usage.js.map
}}),
"[project]/node_modules/@rhinestone/module-sdk/_esm/module/ownable-validator/abi.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "abi": (()=>abi)
});
const abi = [
    {
        inputs: [
            {
                internalType: 'address',
                name: 'smartAccount',
                type: 'address'
            }
        ],
        name: 'AlreadyInitialized',
        type: 'error'
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: 'owner',
                type: 'address'
            }
        ],
        name: 'InvalidOwner',
        type: 'error'
    },
    {
        inputs: [],
        name: 'InvalidSignature',
        type: 'error'
    },
    {
        inputs: [],
        name: 'InvalidThreshold',
        type: 'error'
    },
    {
        inputs: [],
        name: 'LinkedList_AlreadyInitialized',
        type: 'error'
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: 'entry',
                type: 'address'
            }
        ],
        name: 'LinkedList_EntryAlreadyInList',
        type: 'error'
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: 'entry',
                type: 'address'
            }
        ],
        name: 'LinkedList_InvalidEntry',
        type: 'error'
    },
    {
        inputs: [],
        name: 'LinkedList_InvalidPage',
        type: 'error'
    },
    {
        inputs: [],
        name: 'MaxOwnersReached',
        type: 'error'
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: 'smartAccount',
                type: 'address'
            }
        ],
        name: 'NotInitialized',
        type: 'error'
    },
    {
        inputs: [],
        name: 'NotSortedAndUnique',
        type: 'error'
    },
    {
        inputs: [],
        name: 'ThresholdNotSet',
        type: 'error'
    },
    {
        inputs: [
            {
                internalType: 'bytes',
                name: 'contractSignature',
                type: 'bytes'
            }
        ],
        name: 'WrongContractSignature',
        type: 'error'
    },
    {
        inputs: [
            {
                internalType: 'uint256',
                name: 's',
                type: 'uint256'
            },
            {
                internalType: 'uint256',
                name: 'contractSignatureLen',
                type: 'uint256'
            },
            {
                internalType: 'uint256',
                name: 'signaturesLen',
                type: 'uint256'
            }
        ],
        name: 'WrongContractSignatureFormat',
        type: 'error'
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: 'owner',
                type: 'address'
            }
        ],
        name: 'addOwner',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function'
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: 'account',
                type: 'address'
            }
        ],
        name: 'getOwners',
        outputs: [
            {
                internalType: 'address[]',
                name: 'ownersArray',
                type: 'address[]'
            }
        ],
        stateMutability: 'view',
        type: 'function'
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: 'smartAccount',
                type: 'address'
            }
        ],
        name: 'isInitialized',
        outputs: [
            {
                internalType: 'bool',
                name: '',
                type: 'bool'
            }
        ],
        stateMutability: 'view',
        type: 'function'
    },
    {
        inputs: [
            {
                internalType: 'uint256',
                name: 'typeID',
                type: 'uint256'
            }
        ],
        name: 'isModuleType',
        outputs: [
            {
                internalType: 'bool',
                name: '',
                type: 'bool'
            }
        ],
        stateMutability: 'pure',
        type: 'function'
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: '',
                type: 'address'
            },
            {
                internalType: 'bytes32',
                name: 'hash',
                type: 'bytes32'
            },
            {
                internalType: 'bytes',
                name: 'data',
                type: 'bytes'
            }
        ],
        name: 'isValidSignatureWithSender',
        outputs: [
            {
                internalType: 'bytes4',
                name: '',
                type: 'bytes4'
            }
        ],
        stateMutability: 'view',
        type: 'function'
    },
    {
        inputs: [],
        name: 'name',
        outputs: [
            {
                internalType: 'string',
                name: '',
                type: 'string'
            }
        ],
        stateMutability: 'pure',
        type: 'function'
    },
    {
        inputs: [
            {
                internalType: 'bytes',
                name: 'data',
                type: 'bytes'
            }
        ],
        name: 'onInstall',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function'
    },
    {
        inputs: [
            {
                internalType: 'bytes',
                name: '',
                type: 'bytes'
            }
        ],
        name: 'onUninstall',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function'
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: '',
                type: 'address'
            }
        ],
        name: 'ownerCount',
        outputs: [
            {
                internalType: 'uint256',
                name: '',
                type: 'uint256'
            }
        ],
        stateMutability: 'view',
        type: 'function'
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: 'prevOwner',
                type: 'address'
            },
            {
                internalType: 'address',
                name: 'owner',
                type: 'address'
            }
        ],
        name: 'removeOwner',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function'
    },
    {
        inputs: [
            {
                internalType: 'uint256',
                name: '_threshold',
                type: 'uint256'
            }
        ],
        name: 'setThreshold',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function'
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: 'account',
                type: 'address'
            }
        ],
        name: 'threshold',
        outputs: [
            {
                internalType: 'uint256',
                name: '',
                type: 'uint256'
            }
        ],
        stateMutability: 'view',
        type: 'function'
    },
    {
        inputs: [
            {
                internalType: 'bytes32',
                name: 'hash',
                type: 'bytes32'
            },
            {
                internalType: 'bytes',
                name: 'signature',
                type: 'bytes'
            },
            {
                internalType: 'bytes',
                name: 'data',
                type: 'bytes'
            }
        ],
        name: 'validateSignatureWithData',
        outputs: [
            {
                internalType: 'bool',
                name: '',
                type: 'bool'
            }
        ],
        stateMutability: 'view',
        type: 'function'
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: 'address',
                        name: 'sender',
                        type: 'address'
                    },
                    {
                        internalType: 'uint256',
                        name: 'nonce',
                        type: 'uint256'
                    },
                    {
                        internalType: 'bytes',
                        name: 'initCode',
                        type: 'bytes'
                    },
                    {
                        internalType: 'bytes',
                        name: 'callData',
                        type: 'bytes'
                    },
                    {
                        internalType: 'bytes32',
                        name: 'accountGasLimits',
                        type: 'bytes32'
                    },
                    {
                        internalType: 'uint256',
                        name: 'preVerificationGas',
                        type: 'uint256'
                    },
                    {
                        internalType: 'bytes32',
                        name: 'gasFees',
                        type: 'bytes32'
                    },
                    {
                        internalType: 'bytes',
                        name: 'paymasterAndData',
                        type: 'bytes'
                    },
                    {
                        internalType: 'bytes',
                        name: 'signature',
                        type: 'bytes'
                    }
                ],
                internalType: 'struct PackedUserOperation',
                name: 'userOp',
                type: 'tuple'
            },
            {
                internalType: 'bytes32',
                name: 'userOpHash',
                type: 'bytes32'
            }
        ],
        name: 'validateUserOp',
        outputs: [
            {
                internalType: 'ERC7579ValidatorBase.ValidationData',
                name: '',
                type: 'uint256'
            }
        ],
        stateMutability: 'view',
        type: 'function'
    },
    {
        inputs: [],
        name: 'version',
        outputs: [
            {
                internalType: 'string',
                name: '',
                type: 'string'
            }
        ],
        stateMutability: 'pure',
        type: 'function'
    }
]; //# sourceMappingURL=abi.js.map
}}),
"[project]/node_modules/@rhinestone/module-sdk/_esm/module/ownable-validator/constants.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "OWNABLE_VALIDATOR_ADDRESS": (()=>OWNABLE_VALIDATOR_ADDRESS)
});
const OWNABLE_VALIDATOR_ADDRESS = '0x2483DA3A338895199E5e538530213157e931Bf06'; //# sourceMappingURL=constants.js.map
}}),
"[project]/node_modules/@rhinestone/module-sdk/_esm/module/ownable-validator/usage.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "encodeValidationData": (()=>encodeValidationData),
    "getAddOwnableValidatorOwnerAction": (()=>getAddOwnableValidatorOwnerAction),
    "getIsValidSignatureStateless": (()=>getIsValidSignatureStateless),
    "getOwnableValidatorMockSignature": (()=>getOwnableValidatorMockSignature),
    "getOwnableValidatorOwners": (()=>getOwnableValidatorOwners),
    "getOwnableValidatorSignature": (()=>getOwnableValidatorSignature),
    "getOwnableValidatorThreshold": (()=>getOwnableValidatorThreshold),
    "getRemoveOwnableValidatorOwnerAction": (()=>getRemoveOwnableValidatorOwnerAction),
    "getSetOwnableValidatorThresholdAction": (()=>getSetOwnableValidatorThresholdAction)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodeFunctionData$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/utils/abi/encodeFunctionData.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$ownable$2d$validator$2f$abi$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@rhinestone/module-sdk/_esm/module/ownable-validator/abi.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$ownable$2d$validator$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@rhinestone/module-sdk/_esm/module/ownable-validator/constants.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$address$2f$getAddress$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/utils/address/getAddress.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$common$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@rhinestone/module-sdk/_esm/common/constants.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodeAbiParameters$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/utils/abi/encodeAbiParameters.js [app-rsc] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodePacked$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/viem/_esm/utils/abi/encodePacked.js [app-rsc] (ecmascript)");
;
;
;
;
const getSetOwnableValidatorThresholdAction = ({ threshold })=>{
    const data = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodeFunctionData$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["encodeFunctionData"])({
        functionName: 'setThreshold',
        abi: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$ownable$2d$validator$2f$abi$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["abi"],
        args: [
            BigInt(threshold)
        ]
    });
    return {
        to: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$ownable$2d$validator$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["OWNABLE_VALIDATOR_ADDRESS"],
        target: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$ownable$2d$validator$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["OWNABLE_VALIDATOR_ADDRESS"],
        value: BigInt(0),
        callData: data,
        data
    };
};
const getAddOwnableValidatorOwnerAction = async ({ owner, client, account })=>{
    const owners = await getOwnableValidatorOwners({
        account,
        client
    });
    const currentOwnerIndex = owners.findIndex((o)=>o === owner);
    if (currentOwnerIndex !== -1) {
        throw new Error('Owner already exists');
    }
    const data = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodeFunctionData$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["encodeFunctionData"])({
        functionName: 'addOwner',
        abi: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$ownable$2d$validator$2f$abi$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["abi"],
        args: [
            owner
        ]
    });
    return {
        to: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$ownable$2d$validator$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["OWNABLE_VALIDATOR_ADDRESS"],
        target: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$ownable$2d$validator$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["OWNABLE_VALIDATOR_ADDRESS"],
        value: BigInt(0),
        callData: data,
        data
    };
};
const getRemoveOwnableValidatorOwnerAction = async ({ client, account, owner })=>{
    const owners = await getOwnableValidatorOwners({
        account,
        client
    });
    let prevOwner;
    const currentOwnerIndex = owners.findIndex((o)=>o === owner);
    if (currentOwnerIndex === -1) {
        throw new Error('Owner not found');
    } else if (currentOwnerIndex === 0) {
        prevOwner = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$common$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SENTINEL_ADDRESS"];
    } else {
        prevOwner = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$address$2f$getAddress$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["getAddress"])(owners[currentOwnerIndex - 1]);
    }
    const data = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodeFunctionData$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["encodeFunctionData"])({
        functionName: 'removeOwner',
        abi: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$ownable$2d$validator$2f$abi$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["abi"],
        args: [
            prevOwner,
            owner
        ]
    });
    return {
        to: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$ownable$2d$validator$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["OWNABLE_VALIDATOR_ADDRESS"],
        target: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$ownable$2d$validator$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["OWNABLE_VALIDATOR_ADDRESS"],
        value: BigInt(0),
        callData: data,
        data
    };
};
const getOwnableValidatorOwners = async ({ account, client })=>{
    try {
        const owners = await client.readContract({
            address: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$ownable$2d$validator$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["OWNABLE_VALIDATOR_ADDRESS"],
            abi: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$ownable$2d$validator$2f$abi$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["abi"],
            functionName: 'getOwners',
            args: [
                account.address
            ]
        });
        return owners;
    } catch (err) {
        console.error(err);
        return [];
    }
};
const getOwnableValidatorThreshold = async ({ account, client })=>{
    try {
        const threshold = await client.readContract({
            address: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$ownable$2d$validator$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["OWNABLE_VALIDATOR_ADDRESS"],
            abi: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$ownable$2d$validator$2f$abi$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["abi"],
            functionName: 'threshold',
            args: [
                account.address
            ]
        });
        return Number(threshold);
    } catch  {
        throw new Error('Failed to get threshold');
    }
};
const getIsValidSignatureStateless = async ({ hash, signature, data, client })=>{
    try {
        return await client.readContract({
            address: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$ownable$2d$validator$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["OWNABLE_VALIDATOR_ADDRESS"],
            abi: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$ownable$2d$validator$2f$abi$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["abi"],
            functionName: 'validateSignatureWithData',
            args: [
                hash,
                signature,
                data
            ]
        });
    } catch  {
        throw new Error('Failed to check signature');
    }
};
const encodeValidationData = ({ threshold, owners })=>{
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodeAbiParameters$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["encodeAbiParameters"])([
        {
            type: 'uint256'
        },
        {
            type: 'address[]'
        }
    ], [
        BigInt(threshold),
        owners.sort()
    ]);
};
const getOwnableValidatorSignature = ({ signatures })=>{
    let signature = signatures[0];
    for(let i = 1; i < signatures.length; i++){
        signature = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$viem$2f$_esm$2f$utils$2f$abi$2f$encodePacked$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["encodePacked"])([
            'bytes',
            'bytes'
        ], [
            signature,
            signatures[i]
        ]);
    }
    return signature;
};
const getOwnableValidatorMockSignature = ({ threshold })=>{
    const mockSignature = '0xe8b94748580ca0b4993c9a1b86b5be851bfc076ff5ce3a1ff65bf16392acfcb800f9b4f1aef1555c7fce5599fffb17e7c635502154a0333ba21f3ae491839af51c';
    return getOwnableValidatorSignature({
        signatures: Array(threshold).fill(mockSignature)
    });
}; //# sourceMappingURL=usage.js.map
}}),
"[project]/node_modules/@rhinestone/module-sdk/_esm/module/smart-sessions/policies/sudo-policy/constants.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "SUDO_POLICY_ADDRESS": (()=>SUDO_POLICY_ADDRESS)
});
const SUDO_POLICY_ADDRESS = '0x0000003111cD8e92337C100F22B7A9dbf8DEE301'; //# sourceMappingURL=constants.js.map
}}),
"[project]/node_modules/@rhinestone/module-sdk/_esm/module/smart-sessions/policies/sudo-policy/installation.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "getSudoPolicy": (()=>getSudoPolicy)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$policies$2f$sudo$2d$policy$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@rhinestone/module-sdk/_esm/module/smart-sessions/policies/sudo-policy/constants.js [app-rsc] (ecmascript)");
;
const getSudoPolicy = ()=>{
    return {
        policy: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$policies$2f$sudo$2d$policy$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SUDO_POLICY_ADDRESS"],
        address: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$rhinestone$2f$module$2d$sdk$2f$_esm$2f$module$2f$smart$2d$sessions$2f$policies$2f$sudo$2d$policy$2f$constants$2e$js__$5b$app$2d$rsc$5d$__$28$ecmascript$29$__["SUDO_POLICY_ADDRESS"],
        initData: '0x'
    };
}; //# sourceMappingURL=installation.js.map
}}),
"[project]/node_modules/@rhinestone/module-sdk/_esm/account/api/getAccount.js [app-rsc] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "getAccount": (()=>getAccount)
});
const getAccount = ({ address, initCode, type, deployedOnChains = [] })=>{
    return {
        address,
        initCode,
        type,
        deployedOnChains
    };
}; //# sourceMappingURL=getAccount.js.map
}}),

};

//# sourceMappingURL=node_modules_%40rhinestone_module-sdk__esm_b8d4fa._.js.map